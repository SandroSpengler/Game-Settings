/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

export interface ActiveBoostsLcdsStoreFulfillmentNotification {
  data?: Record<string, any>
  inventoryType?: string
}

export interface ActiveBoostsLcdsSummonerActiveBoostsDTO {
  /** @format int64 */
  ipBoostEndDate?: number
  /** @format int32 */
  ipBoostPerWinCount?: number
  /** @format int32 */
  ipLoyaltyBoost?: number
  /** @format int64 */
  summonerId?: number
  /** @format int64 */
  xpBoostEndDate?: number
  /** @format int32 */
  xpBoostPerWinCount?: number
  /** @format int32 */
  xpLoyaltyBoost?: number
}

export enum AggregationType {
  None = 'none',
  Sum = 'sum',
  Average = 'average'
}

export interface AlertDTO {
  /** @format int64 */
  alertTime?: number
}

export interface BannedChampion {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  pickTurn?: number
  /** @format int32 */
  teamId?: number
}

export interface BasePlayerDTO {
  /** @format int32 */
  code?: number
  data?: MatchedPlayerDTO
  message?: string
}

/** Represents a cancelled asynchronous operation. */
export interface BindingAsyncCancelEvent {
  /**
   * Asynchronous operation token
   * @format int32
   */
  asyncToken?: number
}

/** Represents a failed asynchronous operation. */
export interface BindingAsyncFailureEvent {
  /**
   * Asynchronous operation token
   * @format int32
   */
  asyncToken?: number
  /** Error message */
  error?: string
}

/** Possible states of an asynchronous operation. */
export enum BindingAsyncState {
  None = 'None',
  Running = 'Running',
  Cancelling = 'Cancelling',
  Cancelled = 'Cancelled',
  Succeeded = 'Succeeded',
  Failed = 'Failed'
}

/** Represents the parameters of a call to a provided callback. */
export interface BindingCallbackEvent {
  /**
   * ID of the callback being invoked
   * @format int32
   */
  id?: number
  /** Callback parameters */
  parameters?: Record<string, any>[]
}

/** Describes the exposed native API. */
export interface BindingFullApiHelp {
  events?: BindingFullEventHelp[]
  functions?: BindingFullFunctionHelp[]
  types?: BindingFullTypeHelp[]
}

/** Describes a function parameter. */
export interface BindingFullArgumentHelp {
  description?: string
  name?: string
  optional?: boolean
  /** Describes the type of a value. */
  type?: BindingFullTypeIdentifier
}

/** Describes an enumerator. */
export interface BindingFullEnumValueHelp {
  description?: string
  name?: string
  /** @format int32 */
  value?: number
}

/** Describes an event. */
export interface BindingFullEventHelp {
  description?: string
  name?: string
  nameSpace?: string
  tags?: string[]
  /** Describes the type of a value. */
  type?: BindingFullTypeIdentifier
}

/** Describes a member of a struct. */
export interface BindingFullFieldHelp {
  description?: string
  name?: string
  /** @format int32 */
  offset?: number
  optional?: boolean
  /** Describes the type of a value. */
  type?: BindingFullTypeIdentifier
}

/** Describes a function. */
export interface BindingFullFunctionHelp {
  arguments?: BindingFullArgumentHelp[]
  async?: string
  description?: string
  help?: string
  name?: string
  nameSpace?: string
  /** Describes the type of a value. */
  returns?: BindingFullTypeIdentifier
  tags?: string[]
  threadSafe?: boolean
}

/** Describes a struct or enum type. */
export interface BindingFullTypeHelp {
  description?: string
  fields?: BindingFullFieldHelp[]
  name?: string
  nameSpace?: string
  /** @format int32 */
  size?: number
  tags?: string[]
  values?: BindingFullEnumValueHelp[]
}

/** Describes the type of a value. */
export interface BindingFullTypeIdentifier {
  elementType?: string
  type?: string
}

/** Represents generic data for an asynchronous event. */
export interface BindingGenericAsyncEvent {
  /**
   * Asynchronous operation token
   * @format int32
   */
  asyncToken?: number
  /** Event data */
  data?: Record<string, any>
}

/** Represents generic data for an event. */
export interface BindingGenericEvent {
  /** Event data */
  data?: Record<string, any>
}

/** Help format for binding functions and types. */
export enum BindingHelpFormat {
  Full = 'Full',
  Epytext = 'Epytext'
}

export interface BoostTeamSkinRentalDTO {
  availableSkins?: number[]
  /** @format int64 */
  ipReward?: number
  /** @format int64 */
  ipRewardForPurchaser?: number
  /** @format int64 */
  price?: number
  skinUnlockMode?: string
  summonerName?: string
  unlocked?: boolean
}

export interface Bracket {
  /** @format int64 */
  id?: number
  matches?: BracketMatch[]
  /** @format int64 */
  phaseId?: number
  rosters?: BracketRoster[]
  /** @format int32 */
  size?: number
  /** @format int64 */
  tournamentId?: number
  /** @format int32 */
  version?: number
}

export interface BracketMatch {
  /** @format int32 */
  failRosterStatus?: number
  /** @format int64 */
  forfeitRosterId?: number
  /** @format int64 */
  gameId?: number
  /** @format int64 */
  gameStartTime?: number
  /** @format int32 */
  highestPossiblePosition?: number
  /** @format int64 */
  id?: number
  loserBracket?: boolean
  /** @format int32 */
  lowestPossiblePosition?: number
  /** @format int32 */
  order?: number
  resultHistory?: string
  /** @format int64 */
  rosterId1?: number
  /** @format int64 */
  rosterId2?: number
  /** @format int32 */
  round?: number
  /** @format int64 */
  roundStartTime?: number
  status?: ClientBracketMatchStatus
  /** @format int64 */
  winnerId?: number
}

export interface BracketRoster {
  /** @format int32 */
  logo?: number
  /** @format int32 */
  logoColor?: number
  name?: string
  /** @format int64 */
  rosterId?: number
  shortName?: string
}

export interface BuildInfo {
  branch?: string
  patchline?: string
  patchlineVisibleName?: string
  version?: string
}

export enum CapacityEnum {
  LOW = 'LOW',
  MEDIUM = 'MEDIUM',
  HIGH = 'HIGH',
  FULL = 'FULL'
}

export interface ChampSelectLcdsGameDTO {
  bannedChampions?: BannedChampion[]
  gameMutators?: string[]
  gameState?: string
  /** @format int64 */
  id?: number
  multiUserChatJwtMap?: Record<string, string>
  name?: string
  /** @format int64 */
  optimisticLock?: number
  /** @format int32 */
  pickTurn?: number
  playerChampionSelections?: ChampSelectLcdsPlayerChampionSelectionDTO[]
  queueTypeName?: string
  roomName?: string
  roomPassword?: string
  /** @format int64 */
  spectatorDelay?: number
  statusOfParticipants?: string
  teamOne?: Record<string, any>[]
  teamTwo?: Record<string, any>[]
}

export interface ChampSelectLcdsGameTimerDTO {
  currentGameState?: string
  /** @format double */
  remainingTimeInMillis?: number
}

export interface ChampSelectLcdsObfuscatedParticipant {
  /** @format int64 */
  gameUniqueId?: number
}

export interface ChampSelectLcdsPlayerChampionSelectionDTO {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  selectedSkinIndex?: number
  /** @format int32 */
  spell1Id?: number
  /** @format int32 */
  spell2Id?: number
  summonerInternalName?: string
}

export interface ChampSelectLcdsPlayerParticipant {
  /** @format int32 */
  pickMode?: number
  /** @format int32 */
  pickTurn?: number
  /** @format int64 */
  summonerId?: number
  summonerInternalName?: string
  summonerName?: string
}

export interface ChampSelectLcdsPointSummary {
  /** @format int32 */
  currentPoints?: number
  /** @format int32 */
  maxRolls?: number
  /** @format int32 */
  numberOfRolls?: number
  /** @format int32 */
  pointsCostToRoll?: number
  /** @format int32 */
  pointsToNextRoll?: number
}

export interface ChampSelectLcdsPotentialTradersDTO {
  potentialTraders?: string[]
}

export interface ChampSelectLcdsRollResult {
  /** @format int32 */
  championId?: number
  pointSummary?: ChampSelectLcdsPointSummary
}

export interface ChampSelectLcdsTradeContractDTO {
  /** @format int32 */
  requesterChampionId?: number
  requesterInternalSummonerName?: string
  /** @format int32 */
  responderChampionId?: number
  responderInternalSummonerName?: string
  state?: string
}

export interface ChampionMasteryPublicDTO {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  championLevel?: number
  /** @format int32 */
  championPoints?: number
}

export interface ChampionScoutingDTO {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  gameCount?: number
  /** @format float */
  kda?: number
  /** @format int32 */
  winCount?: number
}

export interface ClashEventData {
  /** @format int64 */
  bracket?: number
  earnedDate?: string
  playerUUIDs?: string[]
  rewardSpec?: ClashRewardSpec
  rewardType?: string
  /** @format int64 */
  rosterId?: number
  /** @format int32 */
  seasonId?: number
  teamLogoChromaId?: string
  teamLogoName?: string
  teamName?: string
  teamShortName?: string
  theme?: string
  tier?: string
  /** @format int64 */
  tournamentId?: number
  tournamentName?: string
}

export interface ClashOfflineNotification {
  metaData?: Record<string, string>
  reason?: string
  /** @format int64 */
  tournamentId?: number
}

export interface ClashRewardConfigClient {
  entries?: ClashRewardConfigEntry[]
  grantToSub?: boolean
  keyDef?: ClashRewardKeyType[]
  name?: string
}

export interface ClashRewardConfigEntry {
  key?: string
  vals?: ClashRewardOutput[]
}

export interface ClashRewardDefinition {
  rewardSpec?: ClashRewardSpec
  rewardType?: ClashRewardType
}

export enum ClashRewardKeyType {
  TIER = 'TIER',
  CUP = 'CUP',
  TICKET_COUNT = 'TICKET_COUNT',
  TICKET_TYPE = 'TICKET_TYPE',
  LOWEST_POSITION = 'LOWEST_POSITION',
  TOURNAMENT_WIN_POS = 'TOURNAMENT_WIN_POS',
  WINS = 'WINS',
  POINTS = 'POINTS',
  THEME_VP = 'THEME_VP',
  SEASON_VP = 'SEASON_VP',
  SEASON_FLAG_COUNT = 'SEASON_FLAG_COUNT',
  TOC_STATE = 'TOC_STATE'
}

export interface ClashRewardOutput {
  alternative?: ClashRewardDefinition
  grant?: ClashRewardTime
  primary?: ClashRewardDefinition
  show?: ClashRewardTime
}

export interface ClashRewardSpec {
  bracket?: string
  cup?: string
  gem?: string
  level?: string
  name?: string
  pedestal?: string
  quantity?: string
  seasonId?: string
  theme?: string
  tier?: string
}

export enum ClashRewardTime {
  NONE = 'NONE',
  EOG = 'EOG',
  EOB = 'EOB',
  EOT = 'EOT'
}

export enum ClashRewardType {
  TROPHY = 'TROPHY',
  FLAG = 'FLAG',
  FRAME = 'FRAME',
  LOGO = 'LOGO',
  LOOT = 'LOOT',
  VP = 'VP',
  TOC = 'TOC'
}

export interface ClashSeasonRewardResult {
  banned?: boolean
  eligible?: boolean
  /** @format int32 */
  honorLevel?: number
  /** @format int64 */
  playerId?: number
  rewards?: ClashRewardDefinition[]
  /** @format int32 */
  seasonId?: number
  /** @format int32 */
  seasonVp?: number
}

export enum ClientBracketMatchStatus {
  UPCOMING = 'UPCOMING',
  STARTED = 'STARTED',
  COMPLETED = 'COMPLETED'
}

export interface ClientConfigAuthenticatedConnection {
  authToken?: string
  /** @format int32 */
  connectionId?: number
  subscribed?: boolean
}

export interface ClientConfigBuildInfo {
  branch?: string
  branchFull?: string
  /** @format int32 */
  codeBuildId?: number
  /** @format int32 */
  contentBuildId?: number
  gameBranch?: string
  gameBranchFull?: string
  /** @format int32 */
  gameDataBuildId?: number
  patchline?: string
  patchlineVisibleName?: string
  version?: string
}

export interface ClientConfigClientConfig {
  data?: Record<string, Record<string, any>>
  params?: ClientConfigConfigParams
  /** @format int64 */
  updateTime?: number
}

export interface ClientConfigConfigNamespaceUpdate {
  player?: string[]
  public?: string[]
}

export interface ClientConfigConfigParams {
  appName?: string
  namespace?: string
  patchline?: string
  region?: string
  type?: ClientConfigConfigType
  version?: string
}

export enum ClientConfigConfigReadinessEnum {
  NotReady = 'NotReady',
  Ready = 'Ready',
  Disabled = 'Disabled'
}

export interface ClientConfigConfigStatus {
  readiness?: ClientConfigConfigReadinessEnum
  /** @format int64 */
  updateId?: number
}

export enum ClientConfigConfigType {
  Public = 'public',
  Player = 'player'
}

export interface ClientConfigDataPaths {
  configRoot?: string
  dataRoot?: string
  localSettingsPath?: string
  privateSettingsPath?: string
  userDataRoot?: string
}

export interface ClientConfigDepInjectorEntitlements {
  accessToken?: string
  entitlements?: string[]
  issuer?: string
  subject?: string
  token?: string
}

export interface ClientConfigDepInjectorEntitlementsUpdate {
  EntitlementsTokenResource?: ClientConfigDepInjectorEntitlements
  EntitlementsUpdateType?: ClientConfigDepInjectorEntitlementsUpdateType
}

export enum ClientConfigDepInjectorEntitlementsUpdateType {
  Create = 'Create',
  Update = 'Update',
  Delete = 'Delete'
}

export interface ClientConfigEntitlements {
  accessToken?: string
  entitlements?: string[]
  issuer?: string
  subject?: string
  token?: string
}

export interface ClientConfigEntitlementsUpdate {
  EntitlementsTokenResource?: ClientConfigEntitlements
  UpdateType?: ClientConfigUpdateType
}

export interface ClientConfigSession {
  connections?: ClientConfigAuthenticatedConnection[]
  isInternal?: boolean
  patchlineId?: string
  productId?: string
  version?: string
}

export enum ClientConfigUpdateType {
  Create = 'Create',
  Update = 'Update',
  Delete = 'Delete'
}

export interface ClientDynamicConfig {
  compressed?: boolean
  configs?: string
  delta?: boolean
}

export enum ClientRequestError {
  ALREADY_IN_GAME = 'ALREADY_IN_GAME',
  ALREADY_MEMBER = 'ALREADY_MEMBER',
  ALREADY_INVITED = 'ALREADY_INVITED',
  ALREADY_SUGGESTED = 'ALREADY_SUGGESTED',
  ALREADY_DECLINE_WITHDRAW = 'ALREADY_DECLINE_WITHDRAW',
  ALREADY_DECLINED = 'ALREADY_DECLINED',
  ALREADY_VOTE_WITHDRAW = 'ALREADY_VOTE_WITHDRAW',
  ALREADY_IN_PHASE = 'ALREADY_IN_PHASE',
  CAPTAIN_NOT_ALLOWED = 'CAPTAIN_NOT_ALLOWED',
  CANNOT_SUB = 'CANNOT_SUB',
  CLASH_BANNED = 'CLASH_BANNED',
  CLASH_BANNED_INVITEE = 'CLASH_BANNED_INVITEE',
  ELIGIBILITY_SERVER_ERROR = 'ELIGIBILITY_SERVER_ERROR',
  FAIL_INVITE = 'FAIL_INVITE',
  FAIL_SUGGESTINVITE = 'FAIL_SUGGESTINVITE',
  HONOR_INELIGIBILITY = 'HONOR_INELIGIBILITY',
  LOGO_NOT_ALLOWED = 'LOGO_NOT_ALLOWED',
  LOGOCOLOR_NOT_ALLOWED = 'LOGOCOLOR_NOT_ALLOWED',
  IN_OTHER_ROSTER = 'IN_OTHER_ROSTER',
  IN_OTHER_PENDINGROSTER = 'IN_OTHER_PENDINGROSTER',
  IN_OTHER_PENDINGSUB = 'IN_OTHER_PENDINGSUB',
  IN_OTHER_PHASE_OF_PERIOD = 'IN_OTHER_PHASE_OF_PERIOD',
  INACTIVE_REGISTRATION = 'INACTIVE_REGISTRATION',
  INACTIVE_PHASE = 'INACTIVE_PHASE',
  INTERNAL_ERROR = 'INTERNAL_ERROR',
  INVALID_ROSTER = 'INVALID_ROSTER',
  INVALID_BUY_BACK = 'INVALID_BUY_BACK',
  INVALID_SUB = 'INVALID_SUB',
  INVALID_TOURNAMENT = 'INVALID_TOURNAMENT',
  INVALID_PHASE = 'INVALID_PHASE',
  INVALID_INVITEE = 'INVALID_INVITEE',
  INVALID_ROSTER_MEMBER_SIZE = 'INVALID_ROSTER_MEMBER_SIZE',
  INVALID_POSITION = 'INVALID_POSITION',
  INVALID_LOGO = 'INVALID_LOGO',
  INVALID_LOGOCOLOR = 'INVALID_LOGOCOLOR',
  INVALID_NAME = 'INVALID_NAME',
  INVALID_SHORTNAME = 'INVALID_SHORTNAME',
  INVALID_CHECKELIGIBILITY_SIZE = 'INVALID_CHECKELIGIBILITY_SIZE',
  INVALID_BRACKET = 'INVALID_BRACKET',
  INVALID_MATCHID = 'INVALID_MATCHID',
  INVALID_PLAYER = 'INVALID_PLAYER',
  INVALIDTier = 'INVALID_Tier',
  INVALID_WITHDRAW = 'INVALID_WITHDRAW',
  INVALID_MATCHSTATUS_FORGAMEEND = 'INVALID_MATCHSTATUS_FORGAMEEND',
  INVALID_REWARD_CONFIG_NAME = 'INVALID_REWARD_CONFIG_NAME',
  INVALID_SEASON = 'INVALID_SEASON',
  MAX_INVITED = 'MAX_INVITED',
  MAX_SUBED = 'MAX_SUBED',
  MAX_ROSTER_FETCHSIZE = 'MAX_ROSTER_FETCHSIZE',
  MAX_SUB_SIZE = 'MAX_SUB_SIZE',
  SUB_IN_OTHER_ROSTER = 'SUB_IN_OTHER_ROSTER',
  NO_SAME_PLAYER = 'NO_SAME_PLAYER',
  NO_AVAILABLE_PHASE = 'NO_AVAILABLE_PHASE',
  NOT_CAPTAIN = 'NOT_CAPTAIN',
  NOT_MEMBER = 'NOT_MEMBER',
  NOT_INVITEE = 'NOT_INVITEE',
  NOT_SEED_INTO_LEAGUE = 'NOT_SEED_INTO_LEAGUE',
  NOT_ENOUGH_TICKETS = 'NOT_ENOUGH_TICKETS',
  NOT_ALLOWED_DELETE_TOURNAMENT = 'NOT_ALLOWED_DELETE_TOURNAMENT',
  NOT_ALLOWED_DELETE_TOURNAMENT_REWARD_CONFIG = 'NOT_ALLOWED_DELETE_TOURNAMENT_REWARD_CONFIG',
  NO_PERMISSION = 'NO_PERMISSION',
  NO_MORE_RECOMMEND = 'NO_MORE_RECOMMEND',
  OVER_SUGGESTION_INVITE = 'OVER_SUGGESTION_INVITE',
  OVER_INVITE = 'OVER_INVITE',
  PENDING_ROSTER_NOT_READY = 'PENDING_ROSTER_NOT_READY',
  PENDING_ROSTER_FULL = 'PENDING_ROSTER_FULL',
  PENDING_ROSTER_CLOSE = 'PENDING_ROSTER_CLOSE',
  PHASE_CANCELLED = 'PHASE_CANCELLED',
  PHASE_FULL = 'PHASE_FULL',
  ROSTER_ELIMINATED = 'ROSTER_ELIMINATED',
  ROSTER_DISBAND_NOT_ALLOWED = 'ROSTER_DISBAND_NOT_ALLOWED',
  SUGGEST_INVITEE_NOT_EXIST = 'SUGGEST_INVITEE_NOT_EXIST',
  SMS_NOT_VERIFIED = 'SMS_NOT_VERIFIED',
  TICKET_ALREADY_SET = 'TICKET_ALREADY_SET',
  TICKET_OFFER_NOT_EXIST = 'TICKET_OFFER_NOT_EXIST',
  TICKET_OFFER_INVALID_COUNT = 'TICKET_OFFER_INVALID_COUNT',
  TICKET_NOT_SET = 'TICKET_NOT_SET',
  VOICE_NOT_AVAILABLE = 'VOICE_NOT_AVAILABLE',
  WITHDRAW_NOT_ALLOWED = 'WITHDRAW_NOT_ALLOWED',
  WITHDRAW_CANCEL_NOT_ALLOWED = 'WITHDRAW_CANCEL_NOT_ALLOWED',
  WITHDRAW_LOCKOUT = 'WITHDRAW_LOCKOUT'
}

export interface CollectionsLcdsChampionDTO {
  active?: boolean
  botEnabled?: boolean
  /** @format int32 */
  championId?: number
  championSkins?: CollectionsLcdsChampionSkinDTO[]
  /** @format int64 */
  endDate?: number
  freeToPlay?: boolean
  freeToPlayReward?: boolean
  owned?: boolean
  /** @format int64 */
  purchaseDate?: number
  /** @format int64 */
  purchased?: number
  rankedPlayEnabled?: boolean
  sources?: string[]
  /** @format int32 */
  winCountRemaining?: number
}

export interface CollectionsLcdsChampionSkinDTO {
  /** @format int32 */
  championId?: number
  /** @format int64 */
  endDate?: number
  freeToPlayReward?: boolean
  lastSelected?: boolean
  owned?: boolean
  /** @format int64 */
  purchaseDate?: number
  /** @format int32 */
  skinId?: number
  sources?: string[]
  stillObtainable?: boolean
  /** @format int32 */
  winCountRemaining?: number
}

export interface CollectionsLcdsClientDynamicConfigurationNotification {
  configs?: string
  delta?: boolean
}

export interface CollectionsLcdsRentalUpdateNotification {
  data?: Record<string, any>
  inventoryType?: string
}

export interface CollectionsLcdsStoreFulfillmentNotification {
  data?: Record<string, any>
  inventoryType?: string
}

export interface ContentItemIdentifier {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export interface CraftLootRefTransactionDTO {
  /** @format int64 */
  accountId?: number
  clientId?: string
  lootNameRefIds?: LootNameRefId[]
  /** @format int64 */
  playerId?: number
  puuid?: string
  recipeName?: string
  /** @format int32 */
  repeat?: number
}

export interface CrashReportingEnvironment {
  environment?: string
  userId?: string
  userName?: string
}

export interface DownloadUrlRequestV2 {
  /** @format int64 */
  gameId?: number
  platformId?: string
}

export interface DownloadUrlResponseV2 {
  url?: string
}

export enum ElevationAction {
  FixBrokenPermissions = 'FixBrokenPermissions'
}

export interface ElevationRequest {
  action?: ElevationAction
}

export interface EndOfGameLcdsClientReportV1 {
  comments?: string
  /** @format int64 */
  gameId?: number
  /** @format int64 */
  offenderSummonerId?: number
  offenses?: string
}

export interface EndOfGameLcdsEndOfGameStats {
  /** @format int32 */
  basePoints?: number
  /** @format int32 */
  battleBoostIpEarned?: number
  /** @format int32 */
  boostIpEarned?: number
  /** @format int32 */
  boostXpEarned?: number
  causedEarlySurrender?: boolean
  /** @format int32 */
  coOpVsAiMinutesLeftToday?: number
  /** @format int32 */
  coOpVsAiMsecsUntilReset?: number
  /** @format int32 */
  completionBonusPoints?: number
  /** @format int32 */
  customMinutesLeftToday?: number
  /** @format int32 */
  customMsecsUntilReset?: number
  difficulty?: string
  earlySurrenderAccomplice?: boolean
  /** @format int32 */
  elo?: number
  /** @format int32 */
  eloChange?: number
  /** @format int32 */
  experienceEarned?: number
  /** @format int32 */
  experienceTotal?: number
  /** @format int32 */
  firstWinBonus?: number
  gameEndedInEarlySurrender?: boolean
  /** @format int64 */
  gameId?: number
  /** @format int32 */
  gameLength?: number
  gameMode?: string
  gameMutators?: string[]
  gameType?: string
  imbalancedTeamsNoPoints?: boolean
  invalid?: boolean
  /** @format int32 */
  ipEarned?: number
  /** @format int32 */
  ipTotal?: number
  leveledUp?: boolean
  /** @format int32 */
  loyaltyBoostIpEarned?: number
  /** @format int32 */
  loyaltyBoostXpEarned?: number
  multiUserChatJwt?: string
  myTeamInfo?: EndOfGameLcdsTeamInfo
  myTeamStatus?: string
  newSpells?: EndOfGameLcdsSpell[]
  /** @format int32 */
  odinBonusIp?: number
  otherTeamInfo?: EndOfGameLcdsTeamInfo
  otherTeamPlayerParticipantStats?: EndOfGameLcdsPlayerParticipantStatsSummary[]
  /** @format int32 */
  partyRewardsBonusIpEarned?: number
  pointsPenalties?: EndOfGameLcdsPointsPenalty[]
  /** @format int64 */
  previousLevel?: number
  /** @format int64 */
  previousXpTotal?: number
  /** @format int32 */
  queueBonusEarned?: number
  queueType?: string
  ranked?: boolean
  /** @format int64 */
  reportGameId?: number
  roomName?: string
  roomPassword?: string
  /** @format int32 */
  rpEarned?: number
  sendStatsToTournamentProvider?: boolean
  /** @format int32 */
  skinId?: number
  /** @format int32 */
  skinIndex?: number
  summonerName?: string
  /** @format int32 */
  talentPointsGained?: number
  teamEarlySurrendered?: boolean
  teamPlayerParticipantStats?: EndOfGameLcdsPlayerParticipantStatsSummary[]
  /** @format int32 */
  timeUntilNextFirstWinBonus?: number
  /** @format int64 */
  userId?: number
}

export interface EndOfGameLcdsHarassmentReport {
  comment?: string
  /** @format int64 */
  gameId?: number
  offense?: string
  reportSource?: string
  /** @format int64 */
  reportedSummonerId?: number
  /** @format int64 */
  reportingSummonerId?: number
}

export interface EndOfGameLcdsPlayerParticipantStatsSummary {
  botPlayer?: boolean
  /** @format int32 */
  championId?: number
  detectedTeamPosition?: string
  /** @format int32 */
  elo?: number
  /** @format int32 */
  eloChange?: number
  /** @format int64 */
  gameId?: number
  leaver?: boolean
  /** @format int32 */
  leaves?: number
  /** @format int32 */
  level?: number
  /** @format int32 */
  losses?: number
  /** @format int32 */
  profileIconId?: number
  selectedPosition?: string
  /** @format int32 */
  skinIndex?: number
  skinName?: string
  /** @format int32 */
  spell1Id?: number
  /** @format int32 */
  spell2Id?: number
  statistics?: EndOfGameLcdsRawStatDTO[]
  summonerName?: string
  /** @format int32 */
  teamId?: number
  /** @format int64 */
  userId?: number
  /** @format int32 */
  wins?: number
}

export interface EndOfGameLcdsPointsPenalty {
  /** @format double */
  penalty?: number
  type?: string
}

export interface EndOfGameLcdsRawStatDTO {
  statTypeName?: string
  /** @format int64 */
  value?: number
}

export interface EndOfGameLcdsSpell {
  /** @format int32 */
  spellId?: number
}

export interface EndOfGameLcdsTeamId {
  fullId?: string
}

export interface EndOfGameLcdsTeamInfo {
  memberStatusString?: string
  name?: string
  /** @format int64 */
  secondsUntilEligibleForDeletion?: number
  tag?: string
  teamId?: EndOfGameLcdsTeamId
}

export interface EntitlementsToken {
  accessToken?: string
  entitlements?: string[]
  issuer?: string
  subject?: string
  token?: string
}

export interface EogLcdsGameDTO {
  bannedChampions?: BannedChampion[]
  gameState?: string
  /** @format int64 */
  id?: number
  teamOne?: PlayerParticipant[]
  teamTwo?: PlayerParticipant[]
}

export enum ExternalPluginsAvailability {
  NotAvailable = 'NotAvailable',
  Preparing = 'Preparing',
  Connected = 'Connected',
  Recovering = 'Recovering',
  Error = 'Error'
}

export interface ExternalPluginsResource {
  errorString?: string
  state?: ExternalPluginsAvailability
}

export interface FailedInvite {
  exception?: ClientRequestError
  /** @format int64 */
  playerId?: number
}

export enum GameQueuesLcdsAllowSpectators {
  NONE = 'NONE',
  LOBBYONLY = 'LOBBYONLY',
  DROPINONLY = 'DROPINONLY',
  ALL = 'ALL'
}

export interface GameQueuesLcdsGameQueueConfig {
  /** @format int32 */
  blockedMinutesThreshold?: number
  botsCanSpawnOnBlueSide?: boolean
  cacheName?: string
  disallowFreeChampions?: boolean
  gameMode?: string
  gameMutators?: string[]
  /** @format int32 */
  gameTypeConfigId?: number
  /** @format int32 */
  id?: number
  /** @format int64 */
  lastToggledOffTime?: number
  /** @format int64 */
  lastToggledOnTime?: number
  mapSelectionAlgorithm?: string
  matchingThrottleConfig?: GameQueuesLcdsMatchingThrottleConfig
  /** @format int32 */
  maxLevel?: number
  /** @format int32 */
  maxSummonerLevelForFirstWinOfTheDay?: number
  /** @format int32 */
  maximumParticipantListSize?: number
  /** @format int32 */
  minLevel?: number
  /** @format int32 */
  minimumParticipantListSize?: number
  /** @format int32 */
  minimumQueueDodgeDelayTime?: number
  /** @format int32 */
  numPlayersPerTeam?: number
  pointsConfigKey?: string
  queueBonusKey?: string
  queueState?: string
  queueStateString?: string
  randomizeTeamSizes?: boolean
  ranked?: boolean
  removalFromGameAllowed?: boolean
  /** @format int32 */
  removalFromGameDelayMinutes?: number
  supportedMapIds?: number[]
  teamOnly?: boolean
  thresholdEnabled?: boolean
  /** @format int64 */
  thresholdSize?: number
  type?: string
  typeString?: string
}

export interface GameQueuesLcdsMatchingThrottleConfig {
  cacheName?: string
  /** @format int64 */
  limit?: number
}

export interface GameflowLcdsGameDTO {
  gameMode?: string
  /** @format int32 */
  gameQueueConfigId?: number
  gameState?: string
  gameType?: string
  /** @format int32 */
  gameTypeConfigId?: number
  /** @format int64 */
  id?: number
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  maxNumPlayers?: number
  playerChampionSelections?: Record<string, any>[]
  queueTypeName?: string
  /** @format int32 */
  spectatorDelay?: number
  teamOne?: Record<string, any>[]
  teamTwo?: Record<string, any>[]
}

export interface GameflowLcdsPlayerCredentialsDto {
  encryptionKey?: string
  /** @format int64 */
  gameId?: number
  observer?: boolean
  observerEncryptionKey?: string
  observerServerIp?: string
  observerServerPort?: number
  serverIp?: string
  serverPort?: number
  /** @format int64 */
  summonerId?: number
}

export interface GameflowLcdsReconnectInfoDto {
  game?: GameflowLcdsGameDTO
  playerCredentials?: GameflowLcdsPlayerCredentialsDto
  /** @format int32 */
  reconnectDelay?: number
}

export interface IdsDTO {
  missionIds?: string[]
  seriesIds?: string[]
}

export enum InviteType {
  FREEAGENT = 'FREEAGENT',
  FRIEND = 'FRIEND',
  SUGGEST = 'SUGGEST',
  SELFJOIN = 'SELFJOIN',
  NONE = 'NONE'
}

export interface LCDSBroadcastNotification {
  broadcastMessages?: LolServiceStatusBroadcastMessage[]
}

export interface LCDSChampionReward {
  /** @format int32 */
  championId?: number
  skins?: number[]
}

export interface LCDSGlobalRewards {
  allChampions?: boolean
}

export interface LCDSLoyaltyRewards {
  champions?: LCDSChampionReward[]
  global?: LCDSGlobalRewards
  /** @format int32 */
  ipBoost?: number
  /** @format int32 */
  xpBoost?: number
}

export interface LCDSLoyaltyStateChangeNotification {
  /** @format int64 */
  accountId?: number
  notificationCategory?: LCDSLoyaltyStateChangeNotificationCategory
  rewards?: LCDSLoyaltyRewards
}

export enum LCDSLoyaltyStateChangeNotificationCategory {
  Legacy = 'legacy',
  Grant = 'grant',
  Expiry = 'expiry',
  Change = 'change',
  Revoke = 'revoke',
  Disabled = 'disabled'
}

export interface LCDSPlayerMessagingSimpleMessage {
  /** @format int64 */
  accountId?: number
  bodyCode?: string
  msgId?: string
  params?: string[]
  titleCode?: string
  type?: string
}

export interface LCDSPlayerMessagingSimpleMessageResponse {
  /** @format int64 */
  accountId?: number
  command?: string
  msgId?: string
}

export interface LcdsBotParticipant {
  /** @format int32 */
  botSkillLevel?: number
  /** @format int64 */
  summonerId?: number
  summonerInternalName?: string
  summonerName?: string
  teamId?: string
}

export interface LcdsFailedJoinPlayer {
  reasonFailed?: string
  summoner?: LcdsSummoner
}

export interface LcdsGameDTO {
  gameMode?: string
  gameMutators?: string[]
  gameState?: string
  gameType?: string
  /** @format int32 */
  gameTypeConfigId?: number
  /** @format int64 */
  id?: number
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  maxNumPlayers?: number
  multiUserChatJwtMap?: Record<string, string>
  name?: string
  observers?: LcdsPlayerParticipant[]
  /** @format int64 */
  optimisticLock?: number
  ownerSummary?: LcdsPlayerParticipant
  passbackDataPacket?: string
  passbackUrl?: string
  practiceGameRewardsDisabledReasons?: string[]
  roomName?: string
  roomPassword?: string
  spectatorsAllowed?: string
  teamOne?: LcdsPlayerParticipant[]
  teamTwo?: LcdsPlayerParticipant[]
}

export interface LcdsGameInviteBaseRuntimeException {
  rootCauseClassname?: string
}

export interface LcdsGameMap {
  description?: string
  displayName?: string
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  minCustomPlayers?: number
  name?: string
  /** @format int32 */
  totalPlayers?: number
}

export interface LcdsGameNotification {
  messageArgument?: string
  messageCode?: string
  type?: string
}

export interface LcdsInvitationRequest {
  gameMetaData?: string
  invitationId?: string
  invitationState?: LcdsInvitationState
  invitePayload?: string
  inviteType?: string
  inviter?: LcdsInviter
  owner?: LcdsPlayer
}

export enum LcdsInvitationState {
  ACTIVE = 'ACTIVE',
  ON_HOLD = 'ON_HOLD',
  REVOKED = 'REVOKED'
}

export interface LcdsInviteFailed {
  exception?: LcdsGameInviteBaseRuntimeException
  /** @format int64 */
  summonerId?: number
  summonerName?: string
}

export interface LcdsInvitePrivileges {
  canInvite?: boolean
}

export interface LcdsInvitee {
  inviteeState?: LcdsInviteeState
  /** @format int64 */
  summonerId?: number
  summonerName?: string
}

export enum LcdsInviteeState {
  CREATOR = 'CREATOR',
  PENDING = 'PENDING',
  DECLINED = 'DECLINED',
  ACCEPTED = 'ACCEPTED',
  ACCEPT_FAILED = 'ACCEPT_FAILED',
  JOINED = 'JOINED',
  QUIT = 'QUIT',
  KICKED = 'KICKED',
  BANNED = 'BANNED'
}

export interface LcdsInviter {
  previousSeasonHighestTier?: string
  /** @format int64 */
  summonerId?: number
  summonerName?: string
}

export interface LcdsLobbyStatus {
  chatKey?: string
  gameMetaData?: string
  invitationId?: string
  invitees?: LcdsInvitee[]
  members?: LcdsMember[]
  owner?: LcdsPlayer
}

export interface LcdsMember {
  hasDelegatedInvitePower?: boolean
  /** @format int64 */
  summonerId?: number
  summonerName?: string
}

export interface LcdsPayloadDto {
  body?: string
  headers?: Record<string, string>
  method?: string
  path?: string
}

export interface LcdsPlayer {
  /** @format int64 */
  summonerId?: number
  summonerName?: string
}

export interface LcdsPlayerParticipant {
  /** @format int32 */
  botSkillLevel?: number
  /** @format int64 */
  summonerId?: number
  summonerInternalName?: string
  summonerName?: string
}

export interface LcdsPracticeGameConfig {
  allowSpectators?: string
  gameMap?: LcdsGameMap
  gameMode?: string
  gameMutators?: string[]
  gameName?: string
  gamePassword?: string
  /** @format int32 */
  gameTypeConfig?: number
  gameVersion?: string
  /** @format int32 */
  maxNumPlayers?: number
  passbackDataPacket?: string
  passbackUrl?: string
  region?: string
}

export interface LcdsPracticeGameSearchResult {
  allowSpectators?: string
  gameMap?: LcdsGameMap
  /** @format int32 */
  gameMapId?: number
  gameMode?: string
  /** @format int64 */
  id?: number
  /** @format int32 */
  maxNumPlayers?: number
  name?: string
  owner?: LcdsPlayerParticipant
  pickType?: string
  privateGame?: boolean
  /** @format int32 */
  spectatorCount?: number
  /** @format int32 */
  team1Count?: number
  /** @format int32 */
  team2Count?: number
}

export enum LcdsRemovalReason {
  KICKED = 'KICKED',
  DESTROYED = 'DESTROYED',
  PROGRESSED = 'PROGRESSED'
}

export interface LcdsRemovedFromLobbyNotification {
  removalReason?: LcdsRemovalReason
}

export interface LcdsSimpleMessage {
  /** @format int64 */
  accountId?: number
  msgId?: string
  params?: string[]
  type?: string
}

export interface LcdsSimpleMessageResponse {
  /** @format int64 */
  accountId?: number
  command?: string
  msgId?: string
}

export interface LcdsStartChampSelectDto {
  invalidPlayers?: LcdsFailedJoinPlayer[]
}

export interface LcdsSummoner {
  name?: string
  /** @format int64 */
  sumId?: number
}

export interface LeaverBusterLcdsMatchmakingNotification {
  playerJoinFailures?: Record<string, any>[]
}

export interface LeaverBusterLcdsSimpleMessage {
  /** @format int64 */
  accountId?: number
  msgId?: string
  params?: string[]
  type?: string
}

export interface LeaverBusterSimpleMessageResponse {
  /** @format int64 */
  accountId?: number
  command?: string
  msgId?: string
}

export interface LobbyClientDynamicConfigurationNotification {
  configs?: string
  delta?: boolean
}

/** Describes a log entry. */
export interface LogEvent {
  message?: string
  /** Allowable severity levels for log events. */
  severity?: LogSeverityLevels
}

/** Allowable severity levels for log events. */
export enum LogSeverityLevels {
  Okay = 'Okay',
  Warning = 'Warning',
  Error = 'Error',
  Always = 'Always'
}

export interface LolAccountVerificationAVSConfig {
  Enabled?: boolean
  PasswordEnabled?: boolean
}

export interface LolAccountVerificationAuthenticateRequest {
  password?: string
  username?: string
}

export interface LolAccountVerificationAuthenticateResponse {
  message?: string
  /** @format int32 */
  status?: number
  success?: boolean
}

export interface LolAccountVerificationDeviceResponse {
  message?: string
  /** @format int32 */
  status?: number
  success?: boolean
}

export interface LolAccountVerificationInvalidateResponse {
  message?: string
  /** @format int32 */
  smsTokenExpireDurationInSec?: number
  /** @format int32 */
  status?: number
  success?: boolean
}

export interface LolAccountVerificationIsVerifiedResponse {
  message?: string
  /** @format int32 */
  status?: number
  success?: boolean
}

export interface LolAccountVerificationLoginSession {
  /** @format int64 */
  accountId?: number
  state?: LolAccountVerificationLoginSessionState
  /** @format int64 */
  summonerId?: number
  username?: string
}

export enum LolAccountVerificationLoginSessionState {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolAccountVerificationSendTokenRequest {
  device?: string
  locale?: string
  mediator?: string
}

export interface LolAccountVerificationSendTokenResponse {
  message?: string
  /** @format int32 */
  smsTokenExpireDurationInSec?: number
  /** @format int32 */
  status?: number
  success?: boolean
}

export interface LolAccountVerificationVerifyRequest {
  mediator?: string
  token?: string
}

export interface LolAccountVerificationVerifyResponse {
  message?: string
  /** @format int32 */
  status?: number
  success?: boolean
}

export interface LolActiveBoostsActiveBoosts {
  firstWinOfTheDayStartTime?: string
  ipBoostEndDate?: string
  /** @format int32 */
  ipBoostPerWinCount?: number
  /** @format int32 */
  ipLoyaltyBoost?: number
  /** @format int64 */
  summonerId?: number
  xpBoostEndDate?: string
  /** @format int32 */
  xpBoostPerWinCount?: number
  /** @format int32 */
  xpLoyaltyBoost?: number
}

export interface LolActiveBoostsEndOfGameStats {
  /** @format int64 */
  timeUntilNextFirstWinBonus?: number
}

export interface LolActiveBoostsLoginDataPacket {
  /** @format int64 */
  timeUntilFirstWinOfDay?: number
}

export interface LolAntiAddictionAntiAddictionState {
  antiAddictionToken?: string
  localizationKey?: string
  policyType?: LolAntiAddictionPolicyType
}

export interface LolAntiAddictionAntiAddictionToken {
  antiAddictionToken?: string
}

export enum LolAntiAddictionPolicyType {
  AntiAddictionWarning = 'antiAddictionWarning',
  AntiAddictionShutdown = 'antiAddictionShutdown',
  AntiAddictionHeartbeat = 'antiAddictionHeartbeat'
}

export interface LolBannersBannerFlag {
  earnedDateIso8601?: string
  /** @format int32 */
  itemId?: number
  /** @format int64 */
  level?: number
  /** @format int64 */
  seasonId?: number
  theme?: string
}

export interface LolBannersBannerFrame {
  /** @format int64 */
  level?: number
}

export interface LolBannersCapClashFlagEntitlementPayload {
  rewardSpec?: LolBannersClashV2FlagRewardSpec
  rewardType?: string
}

export interface LolBannersCapClashFrameEntitlementPayload {
  rewardSpec?: LolBannersClashV2FrameRewardSpec
  rewardType?: string
}

export interface LolBannersClashV2FlagRewardSpec {
  level?: string
  seasonId?: string
  theme?: string
}

export interface LolBannersClashV2FrameRewardSpec {
  level?: string
  seasonId?: string
}

export interface LolBannersInventoryItemWithPayload {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  payload?: Record<string, any>
  purchaseDate?: string
  uuid?: string
}

export interface LolBannersInventoryItemsByType {
  TOURNAMENT_FLAG?: LolBannersTournamentFlagInventoryItem[]
  TOURNAMENT_FRAME?: LolBannersTournamentFrameInventoryItem[]
}

export interface LolBannersInventoryResponse {
  items?: LolBannersInventoryItemsByType
}

export interface LolBannersLoadout {
  id?: string
  loadout?: Record<string, LolBannersLoadoutsSlot>
  name?: string
  scope?: string
}

export interface LolBannersLoadoutsSlot {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export interface LolBannersSummonerProfileUpdate {
  key?: string
  value?: Record<string, any>
}

export interface LolBannersTournamentFlagInventoryItem {
  /** @format int32 */
  itemId?: number
  payload?: LolBannersCapClashFlagEntitlementPayload
  purchaseDate?: string
}

export interface LolBannersTournamentFrameInventoryItem {
  payload?: LolBannersCapClashFrameEntitlementPayload
  purchaseDate?: string
}

export enum LolCareerStatsCareerStatsQueueType {
  Draft5 = 'draft5',
  Rank5Flex = 'rank5flex',
  Rank5Solo = 'rank5solo',
  Blind5 = 'blind5',
  Aram = 'aram',
  Blind3 = 'blind3',
  Rank3Flex = 'rank3flex',
  Other = 'other'
}

export interface LolCareerStatsChampionQueueStatsResponse {
  /** @format int32 */
  championId?: number
  position?: LolCareerStatsSummonersRiftPosition
  queueType?: LolCareerStatsCareerStatsQueueType
  rankTier?: LolCareerStatsRankedTier
  stats?: Record<string, any>
}

export interface LolCareerStatsChampionStatistics {
  /** @format int32 */
  championId?: number
  experts?: LolCareerStatsExpertPlayer[]
  queueStats?: LolCareerStatsStatisticsByQueue[]
}

export interface LolCareerStatsEntitlementsToken {
  entitlements?: string[]
}

export interface LolCareerStatsExpertPlayer {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  expertRank?: number
  /** @format int32 */
  numOfGames?: number
  position?: LolCareerStatsSummonersRiftPosition
  /** @format int64 */
  summonerId?: number
  summonerName?: string
  /** @format float */
  winRate?: number
}

export interface LolCareerStatsPositionStatistics {
  experts?: LolCareerStatsExpertPlayer[]
  position?: LolCareerStatsSummonersRiftPosition
  queueStats?: LolCareerStatsStatisticsByQueue[]
}

export interface LolCareerStatsPositionStatsQueryRequest {
  position?: LolCareerStatsSummonersRiftPosition
  queueType?: LolCareerStatsCareerStatsQueueType
  rankTier?: LolCareerStatsRankedTier
  /** @format int32 */
  season?: number
}

export enum LolCareerStatsRankedTier {
  ALL = 'ALL',
  UNRANKED = 'UNRANKED',
  IRON = 'IRON',
  BRONZE = 'BRONZE',
  SILVER = 'SILVER',
  GOLD = 'GOLD',
  PLATINUM = 'PLATINUM',
  DIAMOND = 'DIAMOND',
  MASTER = 'MASTER',
  GRANDMASTER = 'GRANDMASTER',
  CHALLENGER = 'CHALLENGER'
}

export interface LolCareerStatsStatisticsByQueue {
  queueType?: LolCareerStatsCareerStatsQueueType
  stats?: Record<string, any>
}

export interface LolCareerStatsStatisticsPercentilesResponse {
  /** @format int32 */
  championId?: number
  position?: LolCareerStatsSummonersRiftPosition
  queueType?: LolCareerStatsCareerStatsQueueType
  rankTier?: LolCareerStatsRankedTier
  /** @format int32 */
  season?: number
  stats?: Record<string, any>
}

export interface LolCareerStatsStatsQueryRequest {
  /** @format int32 */
  championId?: number
  position?: LolCareerStatsSummonersRiftPosition
  queueType?: LolCareerStatsCareerStatsQueueType
  rankTier?: LolCareerStatsRankedTier
  /** @format int32 */
  season?: number
}

export enum LolCareerStatsSummonersRiftPosition {
  ALL = 'ALL',
  UNKNOWN = 'UNKNOWN',
  TOP = 'TOP',
  JUNGLE = 'JUNGLE',
  MID = 'MID',
  BOTTOM = 'BOTTOM',
  SUPPORT = 'SUPPORT'
}

export interface LolCatalogBundled {
  flexible?: boolean
  items?: LolCatalogBundledItem[]
  minimumPrices?: LolCatalogBundledItemCost[]
}

export interface LolCatalogBundledItem {
  discountPrices?: LolCatalogBundledItemCost[]
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  /** @format int32 */
  quantity?: number
}

export interface LolCatalogBundledItemCost {
  /** @format int64 */
  cost?: number
  costType?: string
  currency?: string
  /** @format float */
  discount?: number
}

export interface LolCatalogCatalogItem {
  active?: boolean
  bundled?: LolCatalogBundled
  iconUrl?: string
  inactiveDate?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  itemInstanceId?: string
  itemRequirements?: LolCatalogItemKey[]
  localizations?: Record<string, LolCatalogItemLocalization>
  metadata?: LolCatalogItemMetadataEntry[]
  offerId?: string
  prices?: LolCatalogItemCost[]
  releaseDate?: string
  sale?: LolCatalogSale
  subInventoryType?: string
  tags?: string[]
}

export interface LolCatalogCatalogPluginItem {
  active?: boolean
  description?: string
  imagePath?: string
  /** @format int64 */
  inactiveDate?: number
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  itemInstanceId?: string
  metadata?: LolCatalogItemMetadataEntry[]
  name?: string
  offerId?: string
  owned?: boolean
  ownershipType?: LolCatalogInventoryOwnership
  prices?: LolCatalogCatalogPluginPrice[]
  /** @format int64 */
  purchaseDate?: number
  questSkinInfo?: LolCatalogSkinLineInfo
  /** @format int64 */
  releaseDate?: number
  sale?: LolCatalogSale
  subInventoryType?: string
  subTitle?: string
  tags?: string[]
}

export interface LolCatalogCatalogPluginItemAssets {
  colors?: string[]
  emblems?: LolCatalogChampionSkinEmblem[]
  iconPath?: string
  splashPath?: string
  tilePath?: string
}

export interface LolCatalogCatalogPluginItemWithDetails {
  assets?: LolCatalogCatalogPluginItemAssets
  bundledDiscountPrices?: LolCatalogCatalogPluginPrice[]
  bundledItems?: LolCatalogCatalogPluginItemWithDetails[]
  item?: LolCatalogCatalogPluginItem
  minimumBundlePrices?: LolCatalogCatalogPluginPrice[]
  /** @format int32 */
  quantity?: number
  requiredItems?: LolCatalogCatalogPluginItemWithDetails[]
}

export interface LolCatalogCatalogPluginPrice {
  /** @format int64 */
  cost?: number
  costType?: string
  currency?: string
  sale?: LolCatalogCatalogPluginRetailDiscount
}

export interface LolCatalogCatalogPluginRetailDiscount {
  /** @format int64 */
  cost?: number
  /** @format float */
  discount?: number
  endDate?: string
  startDate?: string
}

export interface LolCatalogChampionSkinEmblem {
  emblemPath?: LolCatalogChampionSkinEmblemPath
  emblemPosition?: LolCatalogChampionSkinEmblemPosition
  name?: string
}

export interface LolCatalogChampionSkinEmblemPath {
  large?: string
  small?: string
}

export interface LolCatalogChampionSkinEmblemPosition {
  horizontal?: string
  vertical?: string
}

export interface LolCatalogGameDataChampion {
  skins?: LolCatalogGameDataChampionSkin[]
}

export interface LolCatalogGameDataChampionChroma {
  chromaPath?: string
  colors?: string[]
  /** @format int64 */
  id?: number
  name?: string
}

export interface LolCatalogGameDataChampionSkin {
  chromaPath?: string
  chromas?: LolCatalogGameDataChampionChroma[]
  colors?: string[]
  emblems?: LolCatalogChampionSkinEmblem[]
  /** @format int64 */
  id?: number
  name?: string
  questSkinInfo?: LolCatalogSkinLineInfo
  splashPath?: string
  tilePath?: string
  uncenteredSplashPath?: string
}

export interface LolCatalogGameDataChampionSummary {
  /** @format int64 */
  id?: number
  name?: string
  skins?: LolCatalogGameDataChampionSkin[]
  squarePortraitPath?: string
}

export interface LolCatalogGameDataItemReference {
  contentId?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export interface LolCatalogGameDataStatstone {
  category?: string
  contentId?: string
  description?: string
  iconFull?: string
  isDuration?: boolean
  isEpic?: boolean
  isRetired?: boolean
  /** @format int32 */
  itemId?: number
  name?: string
}

export interface LolCatalogGameDataStatstonePack {
  contentId?: string
  description?: string
  /** @format int32 */
  itemId?: number
  name?: string
}

export interface LolCatalogGameDataStatstoneSet {
  name?: string
  statstones?: LolCatalogGameDataStatstone[]
}

export interface LolCatalogGameDataStatstonesInfo {
  champIdToPackIds?: Record<string, any>
  collectionIdToStatStoneIds?: Record<string, any>
  packData?: LolCatalogGameDataStatstonePack[]
  packIdToChampIds?: Record<string, any>
  packIdToStatStonesIds?: Record<string, any>
  packIdToSubPackIds?: Record<string, any>
  seriesIdToStatStoneIds?: Record<string, any>
  statstoneData?: LolCatalogGameDataStatstoneSet[]
}

export interface LolCatalogGameDataSummonerEmote {
  description?: string
  /** @format int64 */
  id?: number
  inventoryIcon?: string
  name?: string
}

export interface LolCatalogGameDataSummonerIcon {
  /** @format int64 */
  id?: number
  imagePath?: string
  title?: string
}

export interface LolCatalogGameDataWardSkin {
  description?: string
  /** @format int64 */
  id?: number
  name?: string
  wardImagePath?: string
}

export interface LolCatalogInventoryContent {
  /** @format int64 */
  itemId?: number
  ownershipType?: LolCatalogInventoryOwnership
  purchaseDate?: string
}

export enum LolCatalogInventoryOwnership {
  OWNED = 'OWNED',
  RENTED = 'RENTED',
  LOYALTY = 'LOYALTY',
  F2P = 'F2P'
}

export interface LolCatalogItemChoiceDetails {
  backgroundImage?: string
  contents?: LolCatalogItemDetails[]
  discount?: string
  displayType?: string
  /** @format int64 */
  fullPrice?: number
  item?: LolCatalogCatalogPluginItem
  metadata?: Record<string, any>
}

export interface LolCatalogItemCost {
  /** @format int64 */
  cost?: number
  currency?: string
  /** @format float */
  discount?: number
}

export interface LolCatalogItemDetails {
  description?: string
  iconUrl?: string
  subTitle?: string
  title?: string
}

export interface LolCatalogItemKey {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export interface LolCatalogItemLocalization {
  description?: string
  language?: string
  name?: string
}

export interface LolCatalogItemMetadataEntry {
  type?: string
  value?: string
}

export interface LolCatalogSale {
  endDate?: string
  prices?: LolCatalogItemCost[]
  startDate?: string
}

export interface LolCatalogSkinLineDescriptionInfo {
  description?: string
  iconPath?: string
  title?: string
}

export interface LolCatalogSkinLineInfo {
  collectionCardPath?: string
  collectionDescription?: string
  descriptionInfo?: LolCatalogSkinLineDescriptionInfo[]
  name?: string
  splashPath?: string
  tiers?: LolCatalogSkinLineTier[]
  tilePath?: string
  uncenteredSplashPath?: string
}

export interface LolCatalogSkinLineTier {
  collectionSplashVideoPath?: string
  description?: string
  /** @format int64 */
  id?: number
  loadScreenPath?: string
  name?: string
  shortName?: string
  splashPath?: string
  splashVideoPath?: string
  /** @format int64 */
  stage?: number
  tilePath?: string
  uncenteredSplashPath?: string
}

export interface LolChallengesChallengeData {
  category?: string
  currentLevel?: string
  /** @format int64 */
  currentLevelAchievedTime?: number
  /** @format double */
  currentThreshold?: number
  /** @format double */
  currentValue?: number
  friendsAtLevels?: LolChallengesFriendLevelsData[]
  /** @format int64 */
  id?: number
  /** @format double */
  initValue?: number
  legacy?: boolean
  newLevels?: string[]
  nextLevel?: string
  /** @format double */
  nextThreshold?: number
  /** @format double */
  percentile?: number
  /** @format int32 */
  playersInLevel?: number
  /** @format int32 */
  position?: number
  previousLevel?: string
  /** @format double */
  previousThreshold?: number
  /** @format double */
  previousValue?: number
  /** @format int32 */
  seasonId?: number
  seasonal?: boolean
}

export interface LolChallengesChallengeLevelData {
  level?: string
}

export interface LolChallengesChallengePlayerData {
  /** @format int64 */
  apexLaderUpdateTime?: number
  categoryPoints?: Record<string, LolChallengesChallengePoints>
  id?: string
  levelPoints?: Record<string, number>
  playerChallenges?: LolChallengesChallengeData[]
  preferences?: LolChallengesPlayerClientPreferences
  puuid?: string
  source?: LolChallengesSource
  tags?: Record<string, string>
  totalPoints?: LolChallengesChallengePoints
}

export interface LolChallengesChallengePoints {
  /** @format int32 */
  current?: number
  level?: string
  /** @format int32 */
  max?: number
  /** @format double */
  percentile?: number
}

export interface LolChallengesChallengeSignedUpdatePayload {
  tokensByType?: Record<string, Record<string, any>>
}

export interface LolChallengesChallengeThreshold {
  rewardGroupId?: string
  rewards?: LolChallengesChallengeThresholdReward[]
  /** @format double */
  value?: number
}

export interface LolChallengesChallengeThresholdReward {
  category?: string
  id?: string
  /** @format int32 */
  quantity?: number
}

export interface LolChallengesChallengesPlayerPreferences {
  bannerAccent?: string
  challengeIds?: number[]
  signedJWTPayload?: LolChallengesChallengeSignedUpdatePayload
  title?: string
}

export interface LolChallengesChallengesRMSNotification {
  ackRequired?: boolean
  payload?: string
}

export interface LolChallengesChallengesRMSPayload {
  id?: string
  playerKey?: LolChallengesChallengesRMSPlayerKey
}

export interface LolChallengesChallengesRMSPlayerKey {
  product?: string
  puuid?: string
}

export interface LolChallengesEndOfGameStats {
  /** @format int64 */
  gameId?: number
}

export interface LolChallengesFriendLevelsData {
  friends?: string[]
  level?: string
}

export interface LolChallengesFriendResource {
  puuid?: string
}

export interface LolChallengesGameDataChallengeConfig {
  description?: string
  descriptionShort?: string
  iconPath?: string
  leaderboard?: boolean
  levelToIconPath?: Record<string, string>
  name?: string
  queueIds?: number[]
  reverseDirection?: boolean
  source?: string
  tags?: Record<string, string>
  thresholds?: Record<string, LolChallengesChallengeThreshold>
}

export interface LolChallengesGameDataChallengeTitle {
  /** @format int32 */
  itemId?: number
  name?: string
}

export interface LolChallengesGameDataChallengesData {
  challenges?: Record<string, LolChallengesGameDataChallengeConfig>
  titles?: Record<string, LolChallengesGameDataChallengeTitle>
}

export interface LolChallengesInventoryTypeAchievementTitle {
  /** @format int32 */
  itemId?: number
  uuid?: string
}

export interface LolChallengesPlayerClientPreferences {
  tabard?: string
  title?: string
  tokens?: number[]
}

export interface LolChallengesQueue {
  gameMode?: string
  /** @format int32 */
  id?: number
}

export enum LolChallengesSource {
  CHALLENGES = 'CHALLENGES',
  EOGD = 'EOGD',
  CAP_INVENTORY = 'CAP_INVENTORY',
  HONOR = 'HONOR',
  CHAMPION_MASTERY = 'CHAMPION_MASTERY',
  RANKED_LEAGUES = 'RANKED_LEAGUES',
  CLASH = 'CLASH',
  LOOT = 'LOOT',
  ETERNALS = 'ETERNALS'
}

export interface LolChallengesUICategoryProgress {
  category?: string
  /** @format int32 */
  current?: number
  level?: string
  /** @format int32 */
  max?: number
  /** @format double */
  positionPercentile?: number
}

export interface LolChallengesUIChallenge {
  /** @format int64 */
  capstoneGroupId?: number
  capstoneGroupName?: string
  /** @format int64 */
  capstoneId?: number
  category?: string
  currentLevel?: string
  /** @format int64 */
  currentLevelAchievedTime?: number
  /** @format double */
  currentThreshold?: number
  /** @format double */
  currentValue?: number
  description?: string
  descriptionShort?: string
  friendsAtLevels?: LolChallengesFriendLevelsData[]
  gameModes?: string[]
  hasLeaderboard?: boolean
  iconPath?: string
  /** @format int64 */
  id?: number
  isApex?: boolean
  isCapstone?: boolean
  isReverseDirection?: boolean
  levelToIconPath?: Record<string, string>
  name?: string
  nextLevel?: string
  nextLevelIconPath?: string
  /** @format double */
  nextThreshold?: number
  /** @format double */
  percentile?: number
  /** @format int64 */
  pointsAwarded?: number
  /** @format int32 */
  position?: number
  previousLevel?: string
  /** @format double */
  previousValue?: number
  source?: string
  thresholds?: Record<string, LolChallengesUIChallengeThreshold>
  valueMapping?: string
}

export interface LolChallengesUIChallengeReward {
  asset?: string
  category?: string
  name?: string
  /** @format int64 */
  quantity?: number
}

export interface LolChallengesUIChallengeThreshold {
  rewards?: LolChallengesUIChallengeReward[]
  /** @format double */
  value?: number
}

export interface LolChallengesUIPlayerSummary {
  /** @format int64 */
  apexLadderUpdateTime?: number
  categoryProgress?: LolChallengesUICategoryProgress[]
  overallChallengeLevel?: string
  /** @format int64 */
  pointsUntilNextRank?: number
  /** @format double */
  positionPercentile?: number
  title?: LolChallengesUITitle
  topChallenges?: LolChallengesUIChallenge[]
  /** @format int64 */
  totalChallengeScore?: number
}

export interface LolChallengesUITitle {
  contentId?: string
  /** @format int32 */
  itemId?: number
  name?: string
}

export interface LolChampSelectChampGridChampion {
  disabled?: boolean
  freeToPlay?: boolean
  freeToPlayForQueue?: boolean
  freeToPlayReward?: boolean
  /** @format int32 */
  id?: number
  masteryChestGranted?: boolean
  /** @format int32 */
  masteryLevel?: number
  /** @format int32 */
  masteryPoints?: number
  name?: string
  owned?: boolean
  positionsFavorited?: string[]
  rented?: boolean
  roles?: string[]
  selectionStatus?: LolChampSelectChampionSelection
  squarePortraitPath?: string
}

export interface LolChampSelectChampSelectAction {
  /** @format int64 */
  actorCellId?: number
  /** @format int32 */
  championId?: number
  completed?: boolean
  /** @format int64 */
  id?: number
  isAllyAction?: boolean
  type?: string
}

export interface LolChampSelectChampSelectBannedChampions {
  myTeamBans?: number[]
  /** @format int32 */
  numBans?: number
  theirTeamBans?: number[]
}

export interface LolChampSelectChampSelectChatRoomDetails {
  chatRoomName?: string
  chatRoomPassword?: string
}

export interface LolChampSelectChampSelectMySelection {
  /** @format int32 */
  selectedSkinId?: number
  /** @format int64 */
  spell1Id?: number
  /** @format int64 */
  spell2Id?: number
  /** @format int64 */
  wardSkinId?: number
}

export interface LolChampSelectChampSelectPinDropNotification {
  mapSide?: string
  pinDropSummoners?: LolChampSelectChampSelectPinDropSummoner[]
}

export interface LolChampSelectChampSelectPinDropSummoner {
  isLocalSummoner?: boolean
  isPlaceholder?: boolean
  lane?: string
  /** @format int32 */
  lanePosition?: number
  position?: string
  /** @format int32 */
  slotId?: number
}

export interface LolChampSelectChampSelectPlayerSelection {
  assignedPosition?: string
  /** @format int64 */
  cellId?: number
  /** @format int32 */
  championId?: number
  /** @format int32 */
  championPickIntent?: number
  entitledFeatureType?: string
  /** @format int32 */
  selectedSkinId?: number
  /** @format int64 */
  spell1Id?: number
  /** @format int64 */
  spell2Id?: number
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  team?: number
  /** @format int64 */
  wardSkinId?: number
}

export interface LolChampSelectChampSelectSession {
  actions?: Record<string, any>[]
  allowBattleBoost?: boolean
  allowDuplicatePicks?: boolean
  allowLockedEvents?: boolean
  allowRerolling?: boolean
  allowSkinSelection?: boolean
  bans?: LolChampSelectChampSelectBannedChampions
  benchChampionIds?: number[]
  benchEnabled?: boolean
  /** @format int32 */
  boostableSkinCount?: number
  chatDetails?: LolChampSelectChampSelectChatRoomDetails
  /** @format int64 */
  counter?: number
  entitledFeatureState?: LolChampSelectEntitledFeatureState
  /** @format int64 */
  gameId?: number
  hasSimultaneousBans?: boolean
  hasSimultaneousPicks?: boolean
  isCustomGame?: boolean
  isSpectating?: boolean
  /** @format int64 */
  localPlayerCellId?: number
  /** @format int32 */
  lockedEventIndex?: number
  myTeam?: LolChampSelectChampSelectPlayerSelection[]
  /** @format int64 */
  recoveryCounter?: number
  /** @format int32 */
  rerollsRemaining?: number
  skipChampionSelect?: boolean
  theirTeam?: LolChampSelectChampSelectPlayerSelection[]
  timer?: LolChampSelectChampSelectTimer
  trades?: LolChampSelectChampSelectTradeContract[]
}

export interface LolChampSelectChampSelectSummoner {
  actingBackgroundAnimationState?: string
  activeActionType?: string
  areSummonerActionsComplete?: boolean
  assignedPosition?: string
  banIntentSquarePortratPath?: string
  /** @format int64 */
  cellId?: number
  championIconStyle?: string
  championName?: string
  /** @format int32 */
  currentChampionVotePercentInteger?: number
  entitledFeatureType?: string
  isActingNow?: boolean
  isDonePicking?: boolean
  isOnPlayersTeam?: boolean
  isPickIntenting?: boolean
  isPlaceholder?: boolean
  isSelf?: boolean
  pickSnipedClass?: string
  shouldShowActingBar?: boolean
  shouldShowBanIntentIcon?: boolean
  shouldShowExpanded?: boolean
  shouldShowRingAnimations?: boolean
  shouldShowSelectedSkin?: boolean
  shouldShowSpells?: boolean
  showMuted?: boolean
  showTrades?: boolean
  /** @format int32 */
  skinId?: number
  skinSplashPath?: string
  /** @format int32 */
  slotId?: number
  spell1IconPath?: string
  spell2IconPath?: string
  statusMessageKey?: string
  /** @format int64 */
  summonerId?: number
  /** @format int64 */
  tradeId?: number
}

export interface LolChampSelectChampSelectTimer {
  /** @format int64 */
  adjustedTimeLeftInPhase?: number
  /** @format int64 */
  internalNowInEpochMs?: number
  isInfinite?: boolean
  phase?: string
  /** @format int64 */
  totalTimeInPhase?: number
}

export interface LolChampSelectChampSelectTradeContract {
  /** @format int64 */
  cellId?: number
  /** @format int64 */
  id?: number
  state?: LolChampSelectChampSelectTradeState
}

export interface LolChampSelectChampSelectTradeNotification {
  /** @format int64 */
  id?: number
  initiatedByLocalPlayer?: boolean
  /** @format int64 */
  otherSummonerId?: number
  requesterChampionName?: string
  requesterChampionSplashPath?: string
  responderChampionName?: string
  /** @format int64 */
  responderIndex?: number
  state?: LolChampSelectChampSelectTradeState
}

export enum LolChampSelectChampSelectTradeState {
  AVAILABLE = 'AVAILABLE',
  BUSY = 'BUSY',
  INVALID = 'INVALID',
  RECEIVED = 'RECEIVED',
  SENT = 'SENT',
  DECLINED = 'DECLINED',
  CANCELLED = 'CANCELLED',
  ACCEPTED = 'ACCEPTED'
}

export interface LolChampSelectChampionQuestSkinInfo {
  splashPath?: string
  tiers?: LolChampSelectCollectionsChampionQuestSkin[]
  tilePath?: string
}

export interface LolChampSelectChampionSelection {
  banIntented?: boolean
  banIntentedByMe?: boolean
  isBanned?: boolean
  pickIntented?: boolean
  pickIntentedByMe?: boolean
  pickIntentedPosition?: string
  pickedByOtherOrBanned?: boolean
  selectedByMe?: boolean
}

export interface LolChampSelectCollectionsChampionChroma {
  /** @format int32 */
  championId?: number
  chromaPath?: string
  colors?: string[]
  disabled?: boolean
  /** @format int32 */
  id?: number
  name?: string
  ownership?: LolChampSelectCollectionsOwnership
  stillObtainable?: boolean
}

export interface LolChampSelectCollectionsChampionMastery {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  championLevel?: number
  /** @format int32 */
  championPoints?: number
  chestGranted?: boolean
}

export interface LolChampSelectCollectionsChampionMinimal {
  banVoPath?: string
  baseSplashPath?: string
  chooseVoPath?: string
  disabledQueues?: string[]
  freeToPlay?: boolean
  /** @format int32 */
  id?: number
  name?: string
  ownership?: LolChampSelectCollectionsOwnership
  roles?: string[]
  squarePortraitPath?: string
  stingerSfxPath?: string
}

export interface LolChampSelectCollectionsChampionQuestSkin {
  /** @format int32 */
  championId?: number
  chromaPath?: string
  disabled?: boolean
  /** @format int32 */
  id?: number
  isBase?: boolean
  name?: string
  ownership?: LolChampSelectCollectionsOwnership
  shortName?: string
  splashPath?: string
  splashVideoPath?: string
  /** @format int32 */
  stage?: number
  stillObtainable?: boolean
  tilePath?: string
}

export interface LolChampSelectCollectionsChampionSkin {
  /** @format int32 */
  championId?: number
  chromaPath?: string
  chromas?: LolChampSelectCollectionsChampionChroma[]
  disabled?: boolean
  emblems?: LolChampSelectCollectionsChampionSkinEmblem[]
  /** @format int32 */
  id?: number
  isBase?: boolean
  name?: string
  ownership?: LolChampSelectCollectionsOwnership
  questSkinInfo?: LolChampSelectChampionQuestSkinInfo
  rarityGemPath?: string
  splashPath?: string
  splashVideoPath?: string
  stillObtainable?: boolean
  tilePath?: string
}

export interface LolChampSelectCollectionsChampionSkinEmblem {
  emblemPath?: LolChampSelectCollectionsChampionSkinEmblemPath
  name?: string
  positions?: LolChampSelectCollectionsChampionSkinEmblemPosition
}

export interface LolChampSelectCollectionsChampionSkinEmblemPath {
  large?: string
  small?: string
}

export interface LolChampSelectCollectionsChampionSkinEmblemPosition {
  horizontal?: string
  vertical?: string
}

export interface LolChampSelectCollectionsChampionSkinMinimal {
  /** @format int32 */
  championId?: number
  chromaPath?: string
  disabled?: boolean
  /** @format int32 */
  id?: number
  isBase?: boolean
  name?: string
  ownership?: LolChampSelectCollectionsOwnership
  splashPath?: string
  stillObtainable?: boolean
  tilePath?: string
}

export interface LolChampSelectCollectionsOwnership {
  freeToPlayReward?: boolean
  owned?: boolean
  rental?: LolChampSelectCollectionsRental
}

export interface LolChampSelectCollectionsRental {
  rented?: boolean
}

export interface LolChampSelectEntitledFeatureState {
  /** @format int32 */
  additionalRerolls?: number
  unlockedSkinIds?: number[]
}

export interface LolChampSelectGameDataSummonerSpell {
  iconPath?: string
  /** @format int64 */
  id?: number
}

export interface LolChampSelectLegacyChampSelectAction {
  /** @format int64 */
  actorCellId?: number
  /** @format int32 */
  championId?: number
  completed?: boolean
  /** @format int64 */
  id?: number
  isAllyAction?: boolean
  isInProgress?: boolean
  /** @format int32 */
  pickTurn?: number
  type?: string
}

export interface LolChampSelectLegacyChampSelectBannedChampions {
  myTeamBans?: number[]
  /** @format int32 */
  numBans?: number
  theirTeamBans?: number[]
}

export interface LolChampSelectLegacyChampSelectChatRoomDetails {
  chatRoomName?: string
  chatRoomPassword?: string
}

export interface LolChampSelectLegacyChampSelectMySelection {
  /** @format int32 */
  selectedSkinId?: number
  /** @format int64 */
  spell1Id?: number
  /** @format int64 */
  spell2Id?: number
  /** @format int64 */
  wardSkinId?: number
}

export interface LolChampSelectLegacyChampSelectPlayerSelection {
  assignedPosition?: string
  /** @format int64 */
  cellId?: number
  /** @format int32 */
  championId?: number
  /** @format int32 */
  championPickIntent?: number
  playerType?: string
  /** @format int32 */
  selectedSkinId?: number
  /** @format int64 */
  spell1Id?: number
  /** @format int64 */
  spell2Id?: number
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  team?: number
  /** @format int64 */
  wardSkinId?: number
}

export interface LolChampSelectLegacyChampSelectSession {
  actions?: Record<string, any>[]
  allowBattleBoost?: boolean
  allowRerolling?: boolean
  allowSkinSelection?: boolean
  bans?: LolChampSelectLegacyChampSelectBannedChampions
  chatDetails?: LolChampSelectLegacyChampSelectChatRoomDetails
  hasSimultaneousBans?: boolean
  hasSimultaneousPicks?: boolean
  isCustomGame?: boolean
  isSpectating?: boolean
  /** @format int64 */
  localPlayerCellId?: number
  myTeam?: LolChampSelectLegacyChampSelectPlayerSelection[]
  /** @format int32 */
  rerollsRemaining?: number
  theirTeam?: LolChampSelectLegacyChampSelectPlayerSelection[]
  timer?: LolChampSelectLegacyChampSelectTimer
  trades?: LolChampSelectLegacyChampSelectTradeContract[]
}

export interface LolChampSelectLegacyChampSelectTimer {
  /** @format int64 */
  adjustedTimeLeftInPhase?: number
  /** @format int64 */
  internalNowInEpochMs?: number
  isInfinite?: boolean
  phase?: string
  /** @format int64 */
  totalTimeInPhase?: number
}

export interface LolChampSelectLegacyChampSelectTradeContract {
  /** @format int64 */
  cellId?: number
  /** @format int64 */
  id?: number
  state?: LolChampSelectLegacyChampSelectTradeState
}

export enum LolChampSelectLegacyChampSelectTradeState {
  AVAILABLE = 'AVAILABLE',
  BUSY = 'BUSY',
  INVALID = 'INVALID',
  RECEIVED = 'RECEIVED',
  SENT = 'SENT'
}

export interface LolChampSelectLegacyChampionSelectPreferences {
  skins?: Record<string, number>
  spells?: Record<string, Record<string, any>>
}

export interface LolChampSelectLegacyCollectionsChampion {
  active?: boolean
  disabledQueues?: string[]
  freeToPlay?: boolean
  /** @format int32 */
  id?: number
  ownership?: LolChampSelectLegacyCollectionsOwnership
}

export interface LolChampSelectLegacyCollectionsOwnership {
  freeToPlayReward?: boolean
  owned?: boolean
  rental?: LolChampSelectLegacyCollectionsRental
}

export interface LolChampSelectLegacyCollectionsRental {
  rented?: boolean
}

export interface LolChampSelectLegacyGameflowGameClient {
  running?: boolean
  visible?: boolean
}

export interface LolChampSelectLegacyGameflowGameData {
  queue?: LolChampSelectLegacyQueue
}

export interface LolChampSelectLegacyGameflowGameDodge {
  dodgeIds?: number[]
  state?: LolChampSelectLegacyGameflowGameDodgeState
}

export enum LolChampSelectLegacyGameflowGameDodgeState {
  Invalid = 'Invalid',
  PartyDodged = 'PartyDodged',
  StrangerDodged = 'StrangerDodged',
  TournamentDodged = 'TournamentDodged'
}

export enum LolChampSelectLegacyGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolChampSelectLegacyGameflowSession {
  gameClient?: LolChampSelectLegacyGameflowGameClient
  gameData?: LolChampSelectLegacyGameflowGameData
  phase?: LolChampSelectLegacyGameflowPhase
}

export interface LolChampSelectLegacyInventoryItemWithPayload {
  /** @format int64 */
  itemId?: number
  payload?: Record<string, any>
}

export interface LolChampSelectLegacyLobbyStatus {
  allowedPlayAgain?: boolean
  isCustom?: boolean
  isLeader?: boolean
  isSpectator?: boolean
  memberSummonerIds?: number[]
  /** @format int32 */
  queueId?: number
}

export interface LolChampSelectLegacyLoginSession {
  connected?: boolean
  state?: LolChampSelectLegacyLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolChampSelectLegacyLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolChampSelectLegacyPlayerStatus {
  currentLobbyStatus?: LolChampSelectLegacyLobbyStatus
  lastQueuedLobbyStatus?: LolChampSelectLegacyLobbyStatus
}

export interface LolChampSelectLegacyQueue {
  areFreeChampionsAllowed?: boolean
  gameTypeConfig?: LolChampSelectLegacyQueueGameTypeConfig
}

export interface LolChampSelectLegacyQueueGameTypeConfig {
  allowTrades?: boolean
  battleBoost?: boolean
  /** @format int32 */
  maxAllowableBans?: number
  name?: string
}

export interface LolChampSelectLegacySettingCategoryResource {
  data?: LolChampSelectLegacyChampionSelectPreferences
  /** @format int32 */
  schemaVersion?: number
}

export interface LolChampSelectLegacySummoner {
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolChampSelectLegacyTeamBoost {
  availableSkins?: number[]
  /** @format int64 */
  ipReward?: number
  /** @format int64 */
  ipRewardForPurchaser?: number
  /** @format int64 */
  price?: number
  skinUnlockMode?: string
  summonerName?: string
  unlocked?: boolean
}

export interface LolChampSelectLoginSession {
  /** @format int64 */
  summonerId?: number
}

export interface LolChampSelectMutedPlayerInfo {
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolChampSelectSettingsResource {
  data?: Record<string, any>
  /** @format int64 */
  schemaVersion?: number
}

export interface LolChampSelectSfxNotification {
  /** @format int64 */
  delayMillis?: number
  eventType?: string
  path?: string
}

export interface LolChampSelectSkinSelectorChildSkin {
  /** @format int32 */
  championId?: number
  chromaPreviewPath?: string
  colors?: string[]
  disabled?: boolean
  /** @format int32 */
  id?: number
  isBase?: boolean
  isChampionUnlocked?: boolean
  isUnlockedFromEntitledFeature?: boolean
  name?: string
  ownership?: LolChampSelectCollectionsOwnership
  /** @format int32 */
  parentSkinId?: number
  shortName?: string
  splashPath?: string
  splashVideoPath?: string
  /** @format int32 */
  stage?: number
  stillObtainable?: boolean
  tilePath?: string
  unlocked?: boolean
}

export interface LolChampSelectSkinSelectorInfo {
  championName?: string
  isSkinGrantedFromBoost?: boolean
  /** @format int32 */
  selectedChampionId?: number
  /** @format int32 */
  selectedSkinId?: number
  showSkinSelector?: boolean
  skinSelectionDisabled?: boolean
}

export interface LolChampSelectSkinSelectorSkin {
  /** @format int32 */
  championId?: number
  childSkins?: LolChampSelectSkinSelectorChildSkin[]
  chromaPreviewPath?: string
  disabled?: boolean
  emblems?: LolChampSelectCollectionsChampionSkinEmblem[]
  groupSplash?: string
  /** @format int32 */
  id?: number
  isBase?: boolean
  isChampionUnlocked?: boolean
  isUnlockedFromEntitledFeature?: boolean
  name?: string
  ownership?: LolChampSelectCollectionsOwnership
  rarityGemPath?: string
  splashPath?: string
  splashVideoPath?: string
  stillObtainable?: boolean
  tilePath?: string
  unlocked?: boolean
}

export interface LolChampSelectTeamBoost {
  availableSkins?: number[]
  /** @format int64 */
  ipReward?: number
  /** @format int64 */
  ipRewardForPurchaser?: number
  /** @format int64 */
  price?: number
  skinUnlockMode?: string
  /** @format int64 */
  summonerId?: number
  unlocked?: boolean
}

export interface LolChampionsChampionQuestSkinInfo {
  collectionCardPath?: string
  collectionDescription?: string
  descriptionInfo?: LolChampionsQuestSkinDescriptionInfo[]
  name?: string
  splashPath?: string
  tiers?: LolChampionsCollectionsChampionQuestSkin[]
  tilePath?: string
  uncenteredSplashPath?: string
}

export interface LolChampionsCollectionsChampion {
  active?: boolean
  alias?: string
  banVoPath?: string
  baseLoadScreenPath?: string
  baseSplashPath?: string
  botEnabled?: boolean
  chooseVoPath?: string
  disabledQueues?: string[]
  freeToPlay?: boolean
  /** @format int32 */
  id?: number
  name?: string
  ownership?: LolChampionsCollectionsOwnership
  passive?: LolChampionsCollectionsChampionSpell
  /** @format int64 */
  purchased?: number
  rankedPlayEnabled?: boolean
  roles?: string[]
  skins?: LolChampionsCollectionsChampionSkin[]
  spells?: LolChampionsCollectionsChampionSpell[]
  squarePortraitPath?: string
  stingerSfxPath?: string
  tacticalInfo?: LolChampionsCollectionsChampionTacticalInfo
  title?: string
}

export interface LolChampionsCollectionsChampionChroma {
  /** @format int32 */
  championId?: number
  chromaPath?: string
  colors?: string[]
  disabled?: boolean
  /** @format int32 */
  id?: number
  lastSelected?: boolean
  name?: string
  ownership?: LolChampionsCollectionsOwnership
  stillObtainable?: boolean
}

export interface LolChampionsCollectionsChampionMinimal {
  active?: boolean
  alias?: string
  banVoPath?: string
  baseLoadScreenPath?: string
  baseSplashPath?: string
  botEnabled?: boolean
  chooseVoPath?: string
  disabledQueues?: string[]
  freeToPlay?: boolean
  /** @format int32 */
  id?: number
  name?: string
  ownership?: LolChampionsCollectionsOwnership
  /** @format int64 */
  purchased?: number
  rankedPlayEnabled?: boolean
  roles?: string[]
  squarePortraitPath?: string
  stingerSfxPath?: string
  title?: string
}

export interface LolChampionsCollectionsChampionPlayableCounts {
  /** @format int32 */
  championsFreeToPlay?: number
  /** @format int32 */
  championsFreeToPlayReward?: number
  /** @format int32 */
  championsOwned?: number
  /** @format int32 */
  championsRented?: number
}

export interface LolChampionsCollectionsChampionQuestSkin {
  /** @format int32 */
  championId?: number
  chromaPath?: string
  collectionSplashVideoPath?: string
  description?: string
  disabled?: boolean
  /** @format int32 */
  id?: number
  isBase?: boolean
  lastSelected?: boolean
  loadScreenPath?: string
  name?: string
  ownership?: LolChampionsCollectionsOwnership
  shortName?: string
  splashPath?: string
  splashVideoPath?: string
  /** @format int32 */
  stage?: number
  stillObtainable?: boolean
  tilePath?: string
  uncenteredSplashPath?: string
}

export interface LolChampionsCollectionsChampionSkin {
  /** @format int32 */
  championId?: number
  chromaPath?: string
  chromas?: LolChampionsCollectionsChampionChroma[]
  collectionSplashVideoPath?: string
  disabled?: boolean
  emblems?: LolChampionsCollectionsChampionSkinEmblem[]
  featuresText?: string
  /** @format int32 */
  id?: number
  isBase?: boolean
  lastSelected?: boolean
  loadScreenPath?: string
  name?: string
  ownership?: LolChampionsCollectionsOwnership
  questSkinInfo?: LolChampionsChampionQuestSkinInfo
  rarityGemPath?: string
  skinType?: string
  splashPath?: string
  splashVideoPath?: string
  stillObtainable?: boolean
  tilePath?: string
  uncenteredSplashPath?: string
}

export interface LolChampionsCollectionsChampionSkinEmblem {
  emblemPath?: LolChampionsCollectionsChampionSkinEmblemPath
  name?: string
  positions?: LolChampionsCollectionsChampionSkinEmblemPosition
}

export interface LolChampionsCollectionsChampionSkinEmblemPath {
  large?: string
  small?: string
}

export interface LolChampionsCollectionsChampionSkinEmblemPosition {
  horizontal?: string
  vertical?: string
}

export interface LolChampionsCollectionsChampionSkinMinimal {
  /** @format int32 */
  championId?: number
  chromaPath?: string
  disabled?: boolean
  /** @format int32 */
  id?: number
  isBase?: boolean
  lastSelected?: boolean
  name?: string
  ownership?: LolChampionsCollectionsOwnership
  splashPath?: string
  stillObtainable?: boolean
  tilePath?: string
}

export interface LolChampionsCollectionsChampionSpell {
  description?: string
  name?: string
}

export interface LolChampionsCollectionsChampionTacticalInfo {
  damageType?: string
  /** @format int32 */
  difficulty?: number
  /** @format int32 */
  style?: number
}

export interface LolChampionsCollectionsOwnership {
  freeToPlayReward?: boolean
  owned?: boolean
  rental?: LolChampionsCollectionsRental
}

export interface LolChampionsCollectionsRental {
  /** @format int64 */
  endDate?: number
  /** @format int64 */
  purchaseDate?: number
  rented?: boolean
  /** @format int32 */
  winCountRemaining?: number
}

export interface LolChampionsGameDataChampion {
  alias?: string
  banVoPath?: string
  chooseVoPath?: string
  /** @format int32 */
  id?: number
  name?: string
  passive?: LolChampionsGameDataChampionSpell
  roles?: string[]
  skins?: LolChampionsGameDataChampionSkin[]
  spells?: LolChampionsGameDataChampionSpell[]
  squarePortraitPath?: string
  stingerSfxPath?: string
  tacticalInfo?: LolChampionsGameDataChampionTacticalInfo
  title?: string
}

export interface LolChampionsGameDataChampionChroma {
  chromaPath?: string
  colors?: string[]
  /** @format int32 */
  id?: number
}

export interface LolChampionsGameDataChampionQuestSkin {
  collectionSplashVideoPath?: string
  description?: string
  /** @format int32 */
  id?: number
  loadScreenPath?: string
  name?: string
  shortName?: string
  splashPath?: string
  splashVideoPath?: string
  /** @format int32 */
  stage?: number
  tilePath?: string
  uncenteredSplashPath?: string
}

export interface LolChampionsGameDataChampionSkin {
  chromaPath?: string
  chromas?: LolChampionsGameDataChampionChroma[]
  collectionSplashVideoPath?: string
  emblems?: LolChampionsCollectionsChampionSkinEmblem[]
  featuresText?: string
  /** @format int32 */
  id?: number
  loadScreenPath?: string
  name?: string
  questSkinInfo?: LolChampionsGameDataQuestSkinInfo
  rarityGemPath?: string
  skinType?: string
  splashPath?: string
  splashVideoPath?: string
  tilePath?: string
  uncenteredSplashPath?: string
}

export interface LolChampionsGameDataChampionSpell {
  description?: string
  name?: string
}

export interface LolChampionsGameDataChampionSummary {
  /** @format int32 */
  id?: number
}

export interface LolChampionsGameDataChampionTacticalInfo {
  damageType?: string
  /** @format int32 */
  difficulty?: number
  /** @format int32 */
  style?: number
}

export interface LolChampionsGameDataQuestSkinDescriptionInfo {
  description?: string
  iconPath?: string
  title?: string
}

export interface LolChampionsGameDataQuestSkinInfo {
  collectionCardPath?: string
  collectionDescription?: string
  descriptionInfo?: LolChampionsGameDataQuestSkinDescriptionInfo[]
  name?: string
  splashPath?: string
  tiers?: LolChampionsGameDataChampionQuestSkin[]
  tilePath?: string
  uncenteredSplashPath?: string
}

export interface LolChampionsLcdsDynamicClientConfig {
  DisabledChampions?: Record<string, any>
}

export interface LolChampionsLoginSession {
  connected?: boolean
  state?: LolChampionsLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolChampionsLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export enum LolChampionsLoyaltyStatus {
  LEGACY = 'LEGACY',
  REWARDS_GRANT = 'REWARDS_GRANT',
  EXPIRY = 'EXPIRY',
  CHANGE = 'CHANGE',
  REVOKE = 'REVOKE',
  DISABLED = 'DISABLED'
}

export interface LolChampionsLoyaltyStatusNotification {
  status?: LolChampionsLoyaltyStatus
}

export interface LolChampionsPlayerNotification {
  backgroundUrl?: string
  critical?: boolean
  data?: Record<string, string>
  detailKey?: string
  iconUrl?: string
  /** @format int64 */
  id?: number
  source?: string
  state?: string
  titleKey?: string
  type?: string
}

export interface LolChampionsQuestSkinDescriptionInfo {
  description?: string
  iconPath?: string
  title?: string
}

export interface LolChampionsSummoner {
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
}

export enum LolChatAccountState {
  Offline = 'offline',
  Mobile = 'mobile',
  Away = 'away',
  Chat = 'chat',
  Dnd = 'dnd'
}

export interface LolChatActiveConversationResource {
  id?: string
}

export interface LolChatAuthResourcePlain {
  gasToken?: Record<string, any>
  password?: string
  username?: string
}

export interface LolChatAuthResourceRsoAccessToken {
  /** @format int64 */
  expiry?: number
  scopes?: string[]
  token?: string
}

export enum LolChatAuthType {
  Plain = 'plain',
  RsoCreate = 'rsoCreate',
  RsoRefresh = 'rsoRefresh'
}

export interface LolChatBlocked {
  game_name?: string
  game_tag?: string
  name?: string
  pid?: string
}

export interface LolChatBlockedList {
  blocked?: LolChatBlocked[]
}

export interface LolChatBlockedPlayerResource {
  gameName?: string
  gameTag?: string
  /** @format int32 */
  icon?: number
  id?: string
  name?: string
  pid?: string
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolChatChampSelection {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  selectedSkinIndex?: number
  summonerInternalName?: string
}

export interface LolChatChatDomainConfig {
  ChampSelectDomainName?: string
  ClubDomainName?: string
  CustomGameDomainName?: string
  P2PDomainName?: string
  PostGameDomainName?: string
}

export interface LolChatChatFriendUpdate {
  group?: string
  note?: string
  pid?: string
}

export interface LolChatChatMessage {
  body?: string
  cid?: string
  game_name?: string
  game_tag?: string
  id?: string
  mid?: string
  name?: string
  pid?: string
  read?: boolean
  time?: string
  type?: LolChatMessageType
}

export interface LolChatChatMessageList {
  messages?: LolChatChatMessage[]
}

export interface LolChatChatPlatformLoginSession {
  /** @format int64 */
  accountId?: number
  gasToken?: Record<string, any>
  idToken?: string
  isNewPlayer?: boolean
  puuid?: string
  state?: LolChatChatPlatformLoginSessionState
  /** @format int64 */
  summonerId?: number
  userAuthToken?: string
  username?: string
}

export enum LolChatChatPlatformLoginSessionState {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolChatChatServiceDynamicClientConfig {
  ChatDomain?: LolChatChatDomainConfig
  LcuSocial?: LolChatLcuSocialConfig
}

export enum LolChatChatSessionState {
  Disconnected = 'disconnected',
  Connecting = 'connecting',
  Connected = 'connected'
}

export interface LolChatChatSettings {
  bounceDockIconEnabled?: boolean
  'chat-status-message'?: string
  chatFilterDisabled?: boolean
  chatGBG?: boolean
  chatGroupMobile?: boolean
  chatGroupOffline?: boolean
  chatWindow?: LolChatChatWindowSettings
  /** @format int32 */
  chatWindowDockedHeight?: number
  'closed-conversations'?: Record<string, number>
  friendRequestToastsDisabled?: boolean
  'hidden-conversations'?: Record<string, number>
  linkClickWarningEnabled?: boolean
  messageNotificationsEnabled?: boolean
  moreUnreadsEnabled?: boolean
  'muted-conversations'?: Record<string, number>
  recentlyPlayedFirstOpen?: boolean
  recentlyPlayedOpen?: boolean
  'roster-group-collapsed'?: Record<string, boolean>
  showWhenTypingEnabled?: boolean
  sortBy?: string
  usePlayerPreferences?: boolean
}

export interface LolChatChatSummoner {
  displayName?: string
  /** @format int32 */
  profileIconId?: number
  puuid?: string
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
  unnamed?: boolean
}

export interface LolChatChatWindowSettings {
  detached?: boolean
  /** @format int32 */
  height?: number
  /** @format int32 */
  left?: number
  /** @format int32 */
  top?: number
  /** @format int32 */
  width?: number
}

export interface LolChatCidBody {
  cid?: string
}

export enum LolChatConfigReadinessEnum {
  NotReady = 'NotReady',
  Ready = 'Ready',
  Disabled = 'Disabled'
}

export interface LolChatConfigStatus {
  readiness?: LolChatConfigReadinessEnum
}

export enum LolChatConfigType {
  Public = 'public',
  Player = 'player'
}

export interface LolChatContentCookies {
  content_id?: string
  content_path?: string
  cookies?: LolChatcookie[]
}

export interface LolChatConversation {
  cid?: string
  mid?: string
  muted?: boolean
  type?: string
  /** @format int64 */
  unread_count?: number
}

export interface LolChatConversationJoinFederated {
  domain?: string
  hidden?: boolean
  id?: string
  password?: string
  targetRegion?: string
  type?: string
}

export interface LolChatConversationList {
  conversations?: LolChatConversation[]
}

export interface LolChatConversationMessageResource {
  body?: string
  fromId?: string
  fromPid?: string
  /** @format int64 */
  fromSummonerId?: number
  id?: string
  isHistorical?: boolean
  timestamp?: string
  type?: string
}

export interface LolChatConversationResource {
  gameName?: string
  gameTag?: string
  id?: string
  inviterId?: string
  isMuted?: boolean
  lastMessage?: LolChatConversationMessageResource
  name?: string
  password?: string
  pid?: string
  targetRegion?: string
  type?: string
  /** @format int64 */
  unreadMessageCount?: number
}

export interface LolChatConversationUpdate {
  cid?: string
  hidden?: boolean
  muted?: boolean
}

export interface LolChatDebugResource {
  /** @format int32 */
  asyncWaitInterval?: number
  enableChatFiltering?: boolean
  failAllChatLogin?: boolean
  failNextChatLogin?: boolean
  failNextChatLogout?: boolean
  failNextKeepAlive?: boolean
  isXMPPLoggingEnabled?: boolean
  /** @format int32 */
  keepAliveInterval?: number
  /** @format int32 */
  maxReconnectInterval?: number
  /** @format int32 */
  minReconnectInterval?: number
  silenceChatWhileInGame?: boolean
  triggerChatDisconnect?: boolean
}

export interface LolChatError {
  cid?: string
  class?: string
  code?: string
  id?: string
  pid?: string
  subtype?: string
  text?: string
  ts?: string
  type?: string
}

export interface LolChatErrorList {
  errors?: LolChatError[]
}

export interface LolChatErrorResource {
  /** @format int64 */
  code?: number
  from?: string
  /** @format int64 */
  id?: number
  message?: string
  text?: string
}

export interface LolChatFriend {
  displayGroup?: string
  game_name?: string
  game_tag?: string
  group?: string
  name?: string
  note?: string
  pid?: string
  puuid?: string
  region?: string
}

export interface LolChatFriendCountsResource {
  /** @format int32 */
  numFriends?: number
  /** @format int32 */
  numFriendsAvailable?: number
  /** @format int32 */
  numFriendsAway?: number
  /** @format int32 */
  numFriendsInChampSelect?: number
  /** @format int32 */
  numFriendsInGame?: number
  /** @format int32 */
  numFriendsInQueue?: number
  /** @format int32 */
  numFriendsMobile?: number
  /** @format int32 */
  numFriendsOnline?: number
}

export interface LolChatFriendGroup {
  collapsed?: boolean
  isMetaGroup?: boolean
  name?: string
}

export interface LolChatFriendGroupCreate {
  collapsed?: boolean
  name?: string
}

export interface LolChatFriendGroupList {
  groups?: LolChatFriendGroup[]
}

export interface LolChatFriendGroupOrder {
  groups?: string[]
}

export interface LolChatFriendGroupUpdate {
  collapsed?: boolean
  name?: string
  new_name?: string
}

export interface LolChatFriendList {
  friends?: LolChatFriend[]
}

export interface LolChatFriendRequest {
  game_name?: string
  game_tag?: string
  name?: string
  note?: string
  pid?: string
  puuid?: string
  region?: string
  subscription?: LolChatFriendSubscriptionType
}

export interface LolChatFriendRequestAdd {
  game_name?: string
  game_tag?: string
  name?: string
  note?: string
  pid?: string
  puuid?: string
  region?: string
}

export enum LolChatFriendRequestDirection {
  In = 'in',
  Out = 'out',
  Both = 'both'
}

export interface LolChatFriendRequestList {
  requests?: LolChatFriendRequest[]
}

export interface LolChatFriendRequestResource {
  direction?: LolChatFriendRequestDirection
  gameName?: string
  gameTag?: string
  /** @format int32 */
  icon?: number
  id?: string
  name?: string
  note?: string
  pid?: string
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolChatFriendResource {
  availability?: string
  /** @format int32 */
  displayGroupId?: number
  displayGroupName?: string
  gameName?: string
  gameTag?: string
  /** @format int32 */
  groupId?: number
  groupName?: string
  /** @format int32 */
  icon?: number
  id?: string
  isP2PConversationMuted?: boolean
  lastSeenOnlineTimestamp?: string
  lol?: Record<string, string>
  name?: string
  note?: string
  patchline?: string
  pid?: string
  platformId?: string
  product?: string
  productName?: string
  puuid?: string
  statusMessage?: string
  summary?: string
  /** @format int64 */
  summonerId?: number
  /** @format int64 */
  time?: number
}

export enum LolChatFriendSubscriptionType {
  PendingOut = 'pending_out',
  PendingIn = 'pending_in'
}

export interface LolChatGameDataChampionSummary {
  alias?: string
  /** @format int32 */
  id?: number
}

export interface LolChatGameflowGameData {
  /** @format int64 */
  gameId?: number
  playerChampionSelections?: LolChatChampSelection[]
  queue?: LolChatQueue
  teamOne?: LolChatTeamPlayerEntry[]
  teamTwo?: LolChatTeamPlayerEntry[]
}

export interface LolChatGameflowGameMap {
  /** @format int64 */
  id?: number
}

export enum LolChatGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolChatGameflowSession {
  gameData?: LolChatGameflowGameData
  map?: LolChatGameflowGameMap
  phase?: LolChatGameflowPhase
}

export interface LolChatGroupResource {
  collapsed?: boolean
  /** @format int32 */
  id?: number
  isLocalized?: boolean
  isMetaGroup?: boolean
  name?: string
  /** @format int32 */
  priority?: number
}

export interface LolChatIdBody {
  id?: string
}

export interface LolChatLcuSocialConfig {
  AggressiveScanning?: boolean
  ForceChatFilter?: boolean
  /** @format int64 */
  QueueJobGraceSeconds?: number
  ReplaceRichMessages?: boolean
  SilenceChatWhileInGame?: boolean
  allowGroupByGame?: boolean
  gameNameTaglineEnabled?: boolean
  platformToRegionMap?: Record<string, string>
}

export enum LolChatLeagueDivision {
  I = 'I',
  II = 'II',
  III = 'III',
  IV = 'IV',
  V = 'V',
  NA = 'NA'
}

export enum LolChatLeagueQueueType {
  NONE = 'NONE',
  RANKEDSOLO5X5 = 'RANKED_SOLO_5x5',
  RANKED_FLEX_SR = 'RANKED_FLEX_SR',
  RANKED_FLEX_TT = 'RANKED_FLEX_TT',
  RANKED_TFT = 'RANKED_TFT'
}

export enum LolChatLeagueTier {
  NONE = 'NONE',
  IRON = 'IRON',
  BRONZE = 'BRONZE',
  SILVER = 'SILVER',
  GOLD = 'GOLD',
  PLATINUM = 'PLATINUM',
  DIAMOND = 'DIAMOND',
  MASTER = 'MASTER',
  GRANDMASTER = 'GRANDMASTER',
  CHALLENGER = 'CHALLENGER'
}

export interface LolChatLobbyMember {
  /** @format int64 */
  id?: number
  isOwner?: boolean
}

export interface LolChatLobbyPlayerStatus {
  currentLobbyStatus?: LolChatLobbyStatus
  lastQueuedLobbyStatus?: LolChatLobbyStatus
}

export interface LolChatLobbyStatus {
  customSpectatorPolicy?: LolChatQueueCustomGameSpectatorPolicy
  isCustom?: boolean
  isLeader?: boolean
  isPracticeTool?: boolean
  /** @format int32 */
  queueId?: number
}

export interface LolChatMessage {
  body?: string
  cid?: string
  game_name?: string
  game_tag?: string
  id?: string
  mid?: string
  name?: string
  pid?: string
  read?: boolean
  time?: string
  type?: string
}

export interface LolChatMessageList {
  messages?: LolChatMessage[]
}

export interface LolChatMessagePost {
  cid?: string
  message?: string
  type?: LolChatMessageType
}

export interface LolChatMessageSend {
  message?: string
  type?: string
}

export enum LolChatMessageType {
  Chat = 'chat',
  Groupchat = 'groupchat',
  Dm = 'dm',
  System = 'system'
}

export interface LolChatMultiGamePresence {
  actor?: string
  details?: string
  game_name?: string
  game_tag?: string
  location?: string
  msg?: string
  name?: string
  patchline?: string
  pid?: string
  platform?: string
  private?: string
  privateJwt?: string
  product?: string
  puuid?: string
  region?: string
  resource?: string
  state?: LolChatAccountState
  summary?: string
  /** @format int64 */
  time?: number
}

export interface LolChatMultiGamePresenceList {
  presences?: LolChatMultiGamePresence[]
}

export interface LolChatMultiGamePresenceSharedPayload {
  actor?: string
  details?: string
  location?: string
  patchline?: string
  platform?: string
  product?: string
  /** @format int64 */
  time?: number
}

export interface LolChatMultiGamePresenceUpdate {
  msg?: string
  private?: string
  privateJwt?: string
  shared?: LolChatMultiGamePresenceSharedPayload
  sharedJwt?: string
  state?: LolChatAccountState
}

export interface LolChatMutedPlayerInfo {
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolChatNameBody {
  name?: string
}

export interface LolChatParticipant {
  cid?: string
  game_name?: string
  game_tag?: string
  muted?: boolean
  name?: string
  pid?: string
  puuid?: string
  region?: string
}

export interface LolChatParticipantList {
  participants?: LolChatParticipant[]
}

export interface LolChatPatchlineMetadata {
  content_cookies?: LolChatContentCookies[]
  content_paths?: Record<string, string>
  id?: string
  product_id?: string
}

export interface LolChatPidBody {
  pid?: string
}

export interface LolChatPlayerPreferences {
  data?: string
  hash?: string
  /** @format int64 */
  modified?: number
  type?: string
}

export interface LolChatPluginRegionLocaleChangedEvent {
  locale?: string
  region?: string
}

export interface LolChatPresenceProduct {
  product?: string
}

export interface LolChatProductMetadata {
  id?: string
  name?: string
  patchlines?: Record<string, LolChatPatchlineMetadata>
}

export interface LolChatProductMetadataMap {
  products?: Record<string, LolChatProductMetadata>
}

export interface LolChatQueue {
  gameMode?: string
  gameTypeConfig?: LolChatQueueGameTypeConfig
  /** @format int32 */
  id?: number
  type?: string
}

export enum LolChatQueueCustomGameSpectatorPolicy {
  NotAllowed = 'NotAllowed',
  LobbyAllowed = 'LobbyAllowed',
  FriendsAllowed = 'FriendsAllowed',
  AllAllowed = 'AllAllowed'
}

export interface LolChatQueueGameTypeConfig {
  /** @format int64 */
  id?: number
  name?: string
}

export interface LolChatRankedQueueStats {
  division?: LolChatLeagueDivision
  /** @format int32 */
  games?: number
  isProvisional?: boolean
  queueType?: LolChatLeagueQueueType
  tier?: LolChatLeagueTier
  /** @format int32 */
  wins?: number
}

export interface LolChatRankedStats {
  highestPreviousSeasonAchievedDivision?: LolChatLeagueDivision
  highestPreviousSeasonAchievedTier?: LolChatLeagueTier
  highestRankedEntry?: LolChatRankedQueueStats
  /** @format int32 */
  rankedRegaliaLevel?: number
}

export interface LolChatRsoAuthorization {
  /** @format int64 */
  currentAccountId?: number
  currentPlatformId?: string
  subject?: string
}

export interface LolChatSanitizeRequest {
  aggressiveScan?: boolean
  /** @format int32 */
  level?: number
  texts?: string[]
}

export interface LolChatSanitizeResponse {
  modified?: boolean
  texts?: string[]
}

export interface LolChatSanitizerStatus {
  locale?: string
  platformID?: string
  ready?: boolean
}

export interface LolChatSession {
  game_name?: string
  game_tag?: string
  loaded?: boolean
  name?: string
  pid?: string
  resource?: string
  state?: LolChatChatSessionState
}

export interface LolChatSessionResource {
  /** @format int32 */
  sessionExpire?: number
  sessionState?: LolChatSessionState
}

export enum LolChatSessionState {
  Initializing = 'initializing',
  Connected = 'connected',
  Loaded = 'loaded',
  Disconnected = 'disconnected',
  Shuttingdown = 'shuttingdown'
}

export interface LolChatSettingsResource {
  data?: Record<string, any>
}

export interface LolChatSpectateGameInfoResource {
  allowObserveMode?: string
  dropInSpectateGameId?: string
  gameQueueType?: string
  puuid?: string
}

export interface LolChatSummonerStatus {
  ready?: boolean
}

export interface LolChatTeamPlayerEntry {
  /** @format int64 */
  summonerId?: number
  summonerInternalName?: string
  summonerName?: string
}

export interface LolChatTranslateRequest {
  blocking?: boolean
  keys?: string[]
  locale?: string
  patchline?: string
  product_id?: string
}

export interface LolChatTranslateResponse {
  results?: LolChatTranslateResult[]
}

export interface LolChatTranslateResult {
  found?: boolean
  key?: string
  product_id?: string
  value?: string
}

export interface LolChatUserResource {
  availability?: string
  gameName?: string
  gameTag?: string
  /** @format int32 */
  icon?: number
  id?: string
  lastSeenOnlineTimestamp?: string
  lol?: Record<string, string>
  name?: string
  patchline?: string
  pid?: string
  platformId?: string
  product?: string
  productName?: string
  puuid?: string
  statusMessage?: string
  summary?: string
  /** @format int64 */
  summonerId?: number
  /** @format int64 */
  time?: number
}

export interface LolChatcookie {
  domain?: string
  /** @format int64 */
  expires?: number
  httponly?: boolean
  name?: string
  path?: string
  secure?: boolean
  url?: string
  value?: string
}

export interface LolClashBlockedPlayerResource {
  name?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolClashBracket {
  /** @format int64 */
  id?: number
  isComplete?: boolean
  matches?: BracketMatch[]
  /** @format int32 */
  period?: number
  rosters?: BracketRoster[]
  /** @format int32 */
  size?: number
  /** @format int64 */
  tournamentId?: number
  /** @format int32 */
  version?: number
}

export interface LolClashBracketReadyNotification {
  /** @format int64 */
  bracketId?: number
  /** @format int64 */
  tournamentId?: number
}

export interface LolClashBracketUpdateNotification {
  /** @format int64 */
  bracketId?: number
  /** @format int64 */
  currentMatchId?: number
  notifyReason?: LolClashRosterNotifyReason
  /** @format int64 */
  tournamentId?: number
}

export interface LolClashChangeIconRequest {
  /** @format int32 */
  iconColorId?: number
  /** @format int32 */
  iconId?: number
}

export interface LolClashChangeNameRequest {
  name?: string
}

export interface LolClashClashConfig {
  CheckPartiesRegistration?: boolean
  DisabledEvents?: string[]
  DisabledReason?: string
  EnabledState?: LolClashClashState
  /** @format int64 */
  EstimatedEnableTimeMillis?: number
  EventSendingEnabled?: boolean
  /** @format int32 */
  HonorLevelRequired?: number
  /** @format int32 */
  HonorRefreshRetrySeconds?: number
  IconConfig?: string
  IsPlaymodeRestrictionEnabled?: boolean
  /** @format int32 */
  MaxTimeBeforeLockinNotifySeconds?: number
  /** @format int32 */
  MinClashNotificationsSummonerLevel?: number
  /** @format int32 */
  MinClashSummonerLevel?: number
  /** @format int32 */
  RewardGrantRetryIntervalSeconds?: number
  Visibility?: LolClashClashVisibility
  /** @format int32 */
  VoiceEobQuitDelaySeconds?: number
  /** @format int32 */
  VoiceNoDelayAutoStartSeconds?: number
  /** @format int32 */
  VoiceRandomStartMaxSeconds?: number
  /** @format int32 */
  VoiceRandomStartMinSeconds?: number
  /** @format int32 */
  VoiceRetryCountLimit?: number
  /** @format int32 */
  VoiceRetryDelaySeconds?: number
}

export interface LolClashClashDisabledConfig {
  disabledReason?: string
  /** @format int64 */
  estimatedEnableTimeMillis?: number
}

export interface LolClashClashSettingCategory {
  simpleStateFlagIds?: string[]
}

export enum LolClashClashState {
  Disabled = 'Disabled',
  Enabled = 'Enabled'
}

export enum LolClashClashVisibility {
  Hidden = 'Hidden',
  Visible = 'Visible'
}

export interface LolClashClientFailedInvite {
  exception?: string
  /** @format int64 */
  playerId?: number
}

export interface LolClashClubsSummoner {
  displayName?: string
  /** @format int32 */
  profileIconId?: number
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolClashEogPlayerUpdateDTO {
  /** @format int32 */
  bid?: number
  /** @format int32 */
  bracketSize?: number
  earnedRewards?: ClashRewardDefinition[]
  /** @format int64 */
  gameId?: number
  /** @format int32 */
  lowestPosition?: number
  rewardProgress?: ClashRewardDefinition[]
  /** @format int32 */
  seasonVp?: number
  /** @format int32 */
  themeVp?: number
  /** @format int32 */
  tier?: number
  /** @format int64 */
  tournamentId?: number
  winner?: boolean
}

export interface LolClashFindPlayers {
  /** @format int32 */
  count?: number
  invitationId?: string
  /** @format int64 */
  memberId?: number
  /** @format int32 */
  page?: number
}

export interface LolClashFindTeams {
  /** @format int32 */
  count?: number
  /** @format int32 */
  page?: number
  /** @format int64 */
  tournamentId?: number
}

export enum LolClashFoundationError {
  CLASH_NOT_INITIALIZED = 'CLASH_NOT_INITIALIZED',
  CLASH_DISABLED = 'CLASH_DISABLED',
  DESERIALIZATION_FAILED = 'DESERIALIZATION_FAILED',
  GAMEFLOW_UNAVAILABLE = 'GAMEFLOW_UNAVAILABLE',
  LOL_INVENTORY_NOT_READY = 'LOL_INVENTORY_NOT_READY',
  INVALID_SIMPLE_STATE_FLAG = 'INVALID_SIMPLE_STATE_FLAG'
}

export interface LolClashGameflowAvailability {
  isAvailable?: boolean
}

export interface LolClashGameflowGameDodge {
  dodgeIds?: number[]
  state?: LolClashMatchmakingDodgeState
}

export interface LolClashGameflowPartiesRegistrationStatus {
  complete?: boolean
  errorCodes?: string[]
}

export enum LolClashGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolClashGameflowSession {
  phase?: LolClashGameflowPhase
}

export interface LolClashInviteSubRequest {
  /** @format int64 */
  replacedSummonerId?: number
  /** @format int64 */
  substituteSummonerId?: number
}

export enum LolClashKdaClassification {
  LOW = 'LOW',
  AVERAGE = 'AVERAGE',
  HIGH = 'HIGH'
}

export interface LolClashKickRequest {
  /** @format int64 */
  summonerId?: number
}

export interface LolClashLftState {
  lft?: boolean
  primaryPos?: string
  secondaryPos?: string
}

export interface LolClashLoginSession {
  state?: LolClashLoginSessionState
  /** @format int64 */
  summonerId?: number
}

export enum LolClashLoginSessionState {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolClashMatchmakingDodgeData {
  /** @format int64 */
  dodgerId?: number
  state?: LolClashMatchmakingDodgeState
}

export enum LolClashMatchmakingDodgeState {
  Invalid = 'Invalid',
  PartyDodged = 'PartyDodged',
  StrangerDodged = 'StrangerDodged',
  TournamentDodged = 'TournamentDodged'
}

export enum LolClashMatchmakingDodgeWarning {
  None = 'None',
  Warning = 'Warning',
  Penalty = 'Penalty'
}

export interface LolClashMatchmakingReadyCheckResource {
  declinerIds?: number[]
  dodgeWarning?: LolClashMatchmakingDodgeWarning
  playerResponse?: LolClashMatchmakingReadyCheckResponse
  state?: LolClashMatchmakingReadyCheckState
  /** @format float */
  timer?: number
}

export enum LolClashMatchmakingReadyCheckResponse {
  None = 'None',
  Accepted = 'Accepted',
  Declined = 'Declined'
}

export enum LolClashMatchmakingReadyCheckState {
  Invalid = 'Invalid',
  InProgress = 'InProgress',
  EveryoneReady = 'EveryoneReady',
  StrangerNotReady = 'StrangerNotReady',
  PartyNotReady = 'PartyNotReady',
  Error = 'Error'
}

export interface LolClashMatchmakingSearchResource {
  dodgeData?: LolClashMatchmakingDodgeData
  /** @format int32 */
  queueId?: number
  readyCheck?: LolClashMatchmakingReadyCheckResource
}

export interface LolClashMemberBanUnbanNotification {
  /** @format int64 */
  notifyPlayerId?: number
  notifyPuuid?: string
  notifyReason?: LolClashNotifyReason
  /** @format int64 */
  playerId?: number
  reason?: string
  tournaments?: MemberBanUnbanTournament[]
}

export interface LolClashNoShowPingDTO {
  /** @format int64 */
  dodgeTime?: number
  /** @format int64 */
  matchId?: number
  /** @format int64 */
  tournamentId?: number
}

export interface LolClashNoShowPingResponse {
  data?: string
  /** @format int64 */
  dodgeTime?: number
  /** @format int64 */
  matchId?: number
  /** @format int64 */
  tournamentId?: number
}

export interface LolClashNoShowPingResponseData {
  /** @format int64 */
  dodgeTime?: number
  gameflowState?: LolClashGameflowPhase
  isPlaymodeRestricted?: boolean
  /** @format int64 */
  loginTime?: number
  readyCheckInfo?: LolClashReadyCheckInfo
}

export enum LolClashNotifyReason {
  SUGGESTION = 'SUGGESTION',
  DECLINE_SUGGESTION = 'DECLINE_SUGGESTION',
  ACCEPT_SUGGESTION = 'ACCEPT_SUGGESTION',
  REVOKE_SUGGESTION = 'REVOKE_SUGGESTION',
  DECLINE_SELFJOIN = 'DECLINE_SELFJOIN',
  ACCEPT_SELFJOIN = 'ACCEPT_SELFJOIN',
  REVOKE_SELFJOIN = 'REVOKE_SELFJOIN',
  SELFJOIN = 'SELFJOIN',
  READY = 'READY',
  UNREADY = 'UNREADY',
  OWNER_CLOSE = 'OWNER_CLOSE',
  DISMISS = 'DISMISS',
  ROSTER_DELETE = 'ROSTER_DELETE',
  OWNER_TRANSFER = 'OWNER_TRANSFER',
  CHANGE_LOGO = 'CHANGE_LOGO',
  CHANGE_NAME = 'CHANGE_NAME',
  CHANGE_SHORTNAME = 'CHANGE_SHORTNAME',
  CHANGE_POSITION = 'CHANGE_POSITION',
  CHANGE_NAMETAGLOGO = 'CHANGE_NAMETAGLOGO',
  CHANGE_LFT = 'CHANGE_LFT',
  INVITE = 'INVITE',
  RESENT_INVITE = 'RESENT_INVITE',
  DECLINE_INVITE = 'DECLINE_INVITE',
  ACCEPT_INVITE = 'ACCEPT_INVITE',
  REVOKE_INVITE = 'REVOKE_INVITE',
  LEAVE = 'LEAVE',
  CAPTAIN_LEAVE = 'CAPTAIN_LEAVE',
  KICK = 'KICK',
  SET_TICKET = 'SET_TICKET',
  OFFER_TICKET = 'OFFER_TICKET',
  REVOKED_TICKET = 'REVOKED_TICKET',
  DECLINE_TICKET = 'DECLINE_TICKET',
  ACCEPT_TICKET = 'ACCEPT_TICKET',
  REWARD_GRANT_FAILED = 'REWARD_GRANT_FAILED',
  REWARD_GRANT_RETRY = 'REWARD_GRANT_RETRY',
  REVERTED_REGISTRATION = 'REVERTED_REGISTRATION',
  BAN = 'BAN',
  UNBAN = 'UNBAN',
  MEMBER_BAN = 'MEMBER_BAN',
  TEAMMATE_BAN = 'TEAMMATE_BAN',
  TEAMMATE_UNBAN = 'TEAMMATE_UNBAN'
}

export interface LolClashOfferTicketRequest {
  /** @format int32 */
  ticketAmount?: number
  ticketType?: TicketType
}

export interface LolClashPendingRosterNotification {
  notifyReason?: LolClashNotifyReason
  pendingRoster?: PendingRosterDTO
  /** @format int64 */
  sourcePlayerId?: number
  /** @format int64 */
  targetPlayerId?: number
}

export interface LolClashPlayerChatRoster {
  /** @format int64 */
  endTimeMs?: number
  /** @format int32 */
  iconColorId?: number
  /** @format int32 */
  iconId?: number
  invitationId?: string
  isRegistered?: boolean
  key?: string
  logoUrl?: string
  name?: string
  playerState?: LolClashPlayerState
  shortName?: string
  /** @format int64 */
  startTimeMs?: number
  /** @format int64 */
  tournamentId?: number
  tournamentState?: LolClashTournamentState
}

export interface LolClashPlayerData {
  isClashBanned?: boolean
  lft?: boolean
  primaryPos?: string
  secondaryPos?: string
  tickets?: Record<string, number>
  /** @format int32 */
  tier?: number
}

export interface LolClashPlayerNotification {
  backgroundUrl?: string
  created?: string
  critical?: boolean
  data?: Record<string, string>
  detailKey?: string
  dismissible?: boolean
  expires?: string
  iconUrl?: string
  /** @format int64 */
  id?: number
  source?: string
  state?: string
  titleKey?: string
  type?: string
}

export interface LolClashPlayerNotificationData {
  keySuffix?: string
  notification?: LolClashPlayerNotification
  notifyReason?: LolClashNotifyReason
  rosterNotifyReason?: LolClashRosterNotifyReason
  /** @format int64 */
  sourceSummonerId?: number
  /** @format int64 */
  targetSummonerId?: number
  tournamentNotifyReason?: LolClashTournamentNotifyReason
}

export interface LolClashPlayerRewards {
  /** @format int32 */
  seasonVp?: number
  themeVp?: LolClashThemeVp[]
}

export enum LolClashPlayerState {
  NO_ROSTER = 'NO_ROSTER',
  PENDING_ROSTER = 'PENDING_ROSTER',
  REGISTERED_ROSTER = 'REGISTERED_ROSTER',
  BRACKET_ROSTER = 'BRACKET_ROSTER',
  ELIMINATED = 'ELIMINATED'
}

export interface LolClashPlayerTournamentData {
  /** @format int64 */
  bracketId?: number
  isSub?: boolean
  rosterId?: string
  state?: LolClashPlayerState
}

export interface LolClashPlayerUpdateNotification {
  notifyReason?: LolClashNotifyReason
  player?: PlayerDTO
}

export interface LolClashPlaymodeRestrictedInfo {
  isRestricted?: boolean
  /** @format int64 */
  phaseId?: number
  presenceState?: LolClashPresenceState
  readyForVoice?: boolean
  rosterId?: string
  /** @format int64 */
  tournamentId?: number
}

export enum LolClashPresenceState {
  NONE = 'NONE',
  LOCKED_IN = 'LOCKED_IN',
  SCOUTING = 'SCOUTING'
}

export interface LolClashProfileInfo {
  /** @format int32 */
  honorLevel?: number
}

export interface LolClashQueue {
  areFreeChampionsAllowed?: boolean
  category?: LolClashQueueGameCategory
  description?: string
  detailedDescription?: string
  gameMode?: string
  gameTypeConfig?: LolClashQueueGameTypeConfig
  /** @format int32 */
  id?: number
  isRanked?: boolean
  isTeamBuilderManaged?: boolean
  isTeamOnly?: boolean
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  maxLevel?: number
  /** @format int32 */
  maxSummonerLevelForFirstWinOfTheDay?: number
  /** @format int32 */
  maximumParticipantListSize?: number
  /** @format int32 */
  minLevel?: number
  /** @format int32 */
  minimumParticipantListSize?: number
  name?: string
  /** @format int32 */
  numPlayersPerTeam?: number
  queueAvailability?: LolClashQueueAvailability
  queueRewards?: LolClashQueueReward
  shortName?: string
  spectatorEnabled?: boolean
  type?: string
}

export enum LolClashQueueAvailability {
  Available = 'Available',
  PlatformDisabled = 'PlatformDisabled',
  DoesntMeetRequirements = 'DoesntMeetRequirements'
}

export enum LolClashQueueGameCategory {
  None = 'None',
  Custom = 'Custom',
  PvP = 'PvP',
  VersusAi = 'VersusAi',
  Alpha = 'Alpha'
}

export interface LolClashQueueGameTypeConfig {
  advancedLearningQuests?: boolean
  allowTrades?: boolean
  banMode?: string
  /** @format int32 */
  banTimerDuration?: number
  battleBoost?: boolean
  crossTeamChampionPool?: boolean
  deathMatch?: boolean
  doNotRemove?: boolean
  duplicatePick?: boolean
  exclusivePick?: boolean
  /** @format int64 */
  id?: number
  learningQuests?: boolean
  /** @format int32 */
  mainPickTimerDuration?: number
  /** @format int32 */
  maxAllowableBans?: number
  name?: string
  onboardCoopBeginner?: boolean
  pickMode?: string
  /** @format int32 */
  postPickTimerDuration?: number
  reroll?: boolean
  teamChampionPool?: boolean
}

export interface LolClashQueueReward {
  isChampionPointsEnabled?: boolean
  isIpEnabled?: boolean
  isXpEnabled?: boolean
  partySizeIpRewards?: number[]
}

export interface LolClashRankedScoutingMember {
  championScoutingData?: LolClashRankedScoutingTopChampion[]
  /** @format int64 */
  playerId?: number
}

export interface LolClashRankedScoutingTopChampion {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  gameCount?: number
  kda?: string
  kdaClassification?: LolClashKdaClassification
  /** @format int32 */
  rank?: number
  /** @format int32 */
  winCount?: number
  /** @format int32 */
  winRate?: number
}

export interface LolClashReadyCheckInfo {
  acceptError?: string
  isAcceptSuccessful?: boolean
  /** @format int32 */
  queueId?: number
  readyCheckResource?: LolClashMatchmakingReadyCheckResource
  /** @format int64 */
  timestampLastClashGameflowDodge?: number
  /** @format int64 */
  timestampReceived?: number
  /** @format int64 */
  timestampResponseComplete?: number
}

export interface LolClashRegisteredRosterNotification {
  notifyReason?: LolClashRosterNotifyReason
  roster?: RosterDTO
}

export interface LolClashRoster {
  availableLogos?: RewardLogo[]
  /** @format int64 */
  captainSummonerId?: number
  /** @format int32 */
  currentBracketWins?: number
  highTierVariance?: boolean
  /** @format int32 */
  iconColorId?: number
  /** @format int32 */
  iconId?: number
  id?: string
  invitationId?: string
  isActiveInCurrentPhase?: boolean
  isClashBanned?: boolean
  isCurrentBracketComplete?: boolean
  isEliminated?: boolean
  isRegistered?: boolean
  lft?: boolean
  /** @format int32 */
  losses?: number
  members?: LolClashRosterMember[]
  name?: string
  /** @format int32 */
  numCompletedPeriods?: number
  phaseInfos?: LolClashRosterPhaseInfo[]
  /** @format int32 */
  points?: number
  shortName?: string
  suggestedInvites?: LolClashSuggestedInvite[]
  /** @format int32 */
  tier?: number
  /** @format int64 */
  tournamentId?: number
  /** @format int32 */
  wins?: number
  withdraw?: RosterWithdraw
}

export interface LolClashRosterDetails {
  /** @format int32 */
  iconColorId?: number
  /** @format int32 */
  iconId?: number
  name?: string
  shortName?: string
}

export interface LolClashRosterDynamicStateNotification {
  notifyReason?: LolClashRosterNotifyReason
  rosterDynamicState?: RosterDynamicStateDTO
  /** @format int64 */
  sourcePlayerId?: number
}

export interface LolClashRosterMatchAggregatedStats {
  /** @format int64 */
  durationMs?: number
  /** @format int64 */
  gameId?: number
  /** @format int32 */
  kills?: number
  loserBracket?: boolean
  /** @format int32 */
  opponentIconColorId?: number
  /** @format int32 */
  opponentIconId?: number
  /** @format int32 */
  opponentKills?: number
  opponentShortName?: string
  playerChampionIds?: Record<string, number>
  /** @format int32 */
  round?: number
  win?: boolean
}

export interface LolClashRosterMember {
  buyinType?: TicketType
  /** @format int32 */
  currentBuyin?: number
  incomingOffers?: LolClashTicketOffer[]
  inviteType?: InviteType
  /** @format int64 */
  inviterId?: number
  isSubForOtherTeam?: boolean
  isSubbedOut?: boolean
  isSubstitute?: boolean
  position?: Position
  /** @format int32 */
  previousBuyin?: number
  /** @format int64 */
  replacedSummonerId?: number
  state?: LolClashRosterMemberState
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  tier?: number
}

export enum LolClashRosterMemberState {
  DECLINED = 'DECLINED',
  PENDING = 'PENDING',
  NOT_READY = 'NOT_READY',
  FORCED_NOT_READY = 'FORCED_NOT_READY',
  READY = 'READY'
}

export enum LolClashRosterNotifyReason {
  ROSTER_SET_TICKET = 'ROSTER_SET_TICKET',
  ROSTER_OFFER_TICKET = 'ROSTER_OFFER_TICKET',
  ROSTER_ACCEPT_TICKET = 'ROSTER_ACCEPT_TICKET',
  ROSTER_DECLINE_TICKET = 'ROSTER_DECLINE_TICKET',
  ROSTER_REVOKED_TICKET = 'ROSTER_REVOKED_TICKET',
  BYE_AUTO_WIN = 'BYE_AUTO_WIN',
  BRACKET_READY = 'BRACKET_READY',
  CHANGE_POSITION = 'CHANGE_POSITION',
  EOG_PLAYER_UPDATE = 'EOG_PLAYER_UPDATE',
  REGISTERED = 'REGISTERED',
  RESTRICTION_AUTO_WIN = 'RESTRICTION_AUTO_WIN',
  PHASE_UNREADY = 'PHASE_UNREADY',
  PHASE_READY = 'PHASE_READY',
  PHASE_CHECKIN = 'PHASE_CHECKIN',
  PHASE_BACKOUT = 'PHASE_BACKOUT',
  PERIOD_CANCEL = 'PERIOD_CANCEL',
  PERIOD_SPLIT = 'PERIOD_SPLIT',
  GAME_COMPLETED = 'GAME_COMPLETED',
  GAME_SCHEDULED = 'GAME_SCHEDULED',
  GAME_STARTED = 'GAME_STARTED',
  GAME_STARTED_ERROR = 'GAME_STARTED_ERROR',
  GAME_END_ERROR = 'GAME_END_ERROR',
  QUEUE_DODGE = 'QUEUE_DODGE',
  OWNER_TRANSFER = 'OWNER_TRANSFER',
  SUB_INVITE = 'SUB_INVITE',
  SUB_ACCEPT = 'SUB_ACCEPT',
  SUB_DECLINE = 'SUB_DECLINE',
  SUB_REVOKE = 'SUB_REVOKE',
  SUB_SUGGEST = 'SUB_SUGGEST',
  SUB_ACCEPTSUGGEST = 'SUB_ACCEPTSUGGEST',
  SUB_DECLINESUGGEST = 'SUB_DECLINESUGGEST',
  SUB_RECLAIM = 'SUB_RECLAIM',
  SUB_LEAVE = 'SUB_LEAVE',
  MEMBER_SUBBED = 'MEMBER_SUBBED',
  MEMBER_SUB_REVOKE = 'MEMBER_SUB_REVOKE',
  MEMBER_SUB_RECLAIM = 'MEMBER_SUB_RECLAIM',
  VOTE_WITHDRAW_UPDATE = 'VOTE_WITHDRAW_UPDATE',
  VOTE_WITHDRAW_DISMISS = 'VOTE_WITHDRAW_DISMISS',
  WITHDRAW = 'WITHDRAW',
  ROUND_COMPLETE = 'ROUND_COMPLETE',
  NO_SHOW_PING = 'NO_SHOW_PING',
  TIER_CHANGED = 'TIER_CHANGED',
  BRACKET_ROSTER_REMOVED = 'BRACKET_ROSTER_REMOVED',
  BRACKET_ROSTER_REPLACED = 'BRACKET_ROSTER_REPLACED',
  CANNOT_FIND_MATCH = 'CANNOT_FIND_MATCH',
  BANNED_SMURF = 'BANNED_SMURF',
  BANNED_SMURF_TEAMMATE = 'BANNED_SMURF_TEAMMATE',
  BANNED_SMURF_OPPONENT = 'BANNED_SMURF_OPPONENT',
  TICKET_CHARGED = 'TICKET_CHARGED',
  TICKET_REFUNDED = 'TICKET_REFUNDED',
  TICKET_COULD_NOT_BE_CHARGED = 'TICKET_COULD_NOT_BE_CHARGED',
  SUB_INVITE_SELF = 'SUB_INVITE_SELF',
  GAME_START_RETRY = 'GAME_START_RETRY',
  GAME_START_RETRY_SUMMONERS = 'GAME_START_RETRY_SUMMONERS',
  GAME_START_RETRY_OPPONENT = 'GAME_START_RETRY_OPPONENT',
  GAME_START_FAILED = 'GAME_START_FAILED',
  GAME_START_FAILED_SUMMONERS = 'GAME_START_FAILED_SUMMONERS',
  GAME_START_FAILED_OPPONENT = 'GAME_START_FAILED_OPPONENT',
  GAME_RESCHEDULED = 'GAME_RESCHEDULED'
}

export interface LolClashRosterPeriodAggregatedStats {
  /** @format int32 */
  bracketSize?: number
  matchStats?: LolClashRosterMatchAggregatedStats[]
  /** @format int32 */
  period?: number
  playerBids?: Record<string, number>
  /** @format int64 */
  time?: number
}

export interface LolClashRosterPhaseInfo {
  /** @format int64 */
  checkinTime?: number
  isBracketComplete?: boolean
  /** @format int32 */
  period?: number
  /** @format int64 */
  phaseId?: number
}

export interface LolClashRosterPlayerAggregatedStats {
  rawStatsMax?: Record<string, number>
  rawStatsSum?: Record<string, number>
  sub?: boolean
}

export interface LolClashRosterPlayerNotification {
  notifyReason?: LolClashRosterNotifyReason
  playerNotificationDTO?: PlayerDTO
  roster?: RosterDTO
  /** @format int64 */
  sourcePlayerId?: number
}

export interface LolClashRosterStats {
  /** @format int64 */
  endTimeMs?: number
  periodStats?: LolClashRosterPeriodAggregatedStats[]
  playerStats?: Record<string, LolClashRosterPlayerAggregatedStats>
  /** @format int32 */
  rosterIconColorId?: number
  /** @format int32 */
  rosterIconId?: number
  /** @format int64 */
  rosterId?: number
  rosterName?: string
  rosterShortName?: string
  /** @format int64 */
  startTimeMs?: number
  /** @format int32 */
  tier?: number
  tournamentNameLocKey?: string
  tournamentNameLocKeySecondary?: string
  /** @format int32 */
  tournamentPeriods?: number
  /** @format int32 */
  tournamentThemeId?: number
}

export interface LolClashRosterWithdrawNotification {
  notifyReason?: LolClashRosterNotifyReason
  /** @format int64 */
  rosterId?: number
  /** @format int64 */
  sourcePlayerId?: number
  /** @format int64 */
  tournamentId?: number
  /** @format int32 */
  version?: number
  withdraw?: RosterWithdraw
}

export interface LolClashScoutingChampionMastery {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  championLevel?: number
  /** @format int32 */
  championPoints?: number
}

export interface LolClashScoutingChampions {
  /** @format int64 */
  playerId?: number
  topMasteries?: LolClashScoutingChampionMastery[]
  topSeasonChampions?: LolClashScoutingSeasonChampion[]
  /** @format int64 */
  totalMasteryScore?: number
}

export interface LolClashScoutingSeasonChampion {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  gameCount?: number
  kda?: string
  kdaClassification?: LolClashKdaClassification
  /** @format int32 */
  winCount?: number
  /** @format int32 */
  winRate?: number
}

export interface LolClashSetPositionRequest {
  position?: Position
}

export interface LolClashSetTicketRequest {
  /** @format int32 */
  ticketAmount?: number
  ticketType?: TicketType
}

export interface LolClashSettingCategory {
  data?: Record<string, any>
  /** @format int32 */
  schemaVersion?: number
}

export interface LolClashSimpleStateFlag {
  id?: string
  status?: LolClashSimpleStateStatus
}

export enum LolClashSimpleStateStatus {
  UNACKNOWLEDGED = 'UNACKNOWLEDGED',
  ACKNOWLEDGED = 'ACKNOWLEDGED'
}

export interface LolClashSuggestedInvite {
  /** @format int64 */
  suggesterSummonerId?: number
  /** @format int64 */
  summonerId?: number
}

export interface LolClashSuggestionInvite {
  inviteePlayers?: number[]
  /** @format int64 */
  inviterId?: number
}

export interface LolClashSuggestionInvitee {
  /** @format int64 */
  captainId?: number
  /** @format int64 */
  inviteeId?: number
}

export interface LolClashTeamOpenState {
  /** @format int64 */
  captainId?: number
  invitationId?: string
  openTeam?: boolean
}

export interface LolClashThemeVp {
  /** @format int32 */
  themeId?: number
  /** @format int32 */
  vp?: number
}

export interface LolClashThirdPartyApiPlayer {
  role?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolClashThirdPartyApiRoster {
  captain?: LolClashThirdPartyApiPlayer
  members?: LolClashThirdPartyApiPlayer[]
}

export interface LolClashTicketOffer {
  /** @format int32 */
  amount?: number
  isAccepted?: boolean
  /** @format int64 */
  summonerId?: number
  ticketType?: TicketType
}

export interface LolClashTournament {
  allowRosterCreation?: boolean
  /** @format int64 */
  bracketFormationInitDelayMs?: number
  /** @format int64 */
  bracketFormationIntervalMs?: number
  bracketSize?: string
  buyInOptions?: number[]
  buyInOptionsPremium?: number[]
  /** @format int64 */
  endTimeMs?: number
  /** @format int32 */
  entryFee?: number
  /** @format int64 */
  id?: number
  isHonorRestrictionEnabled?: boolean
  isRankedRestrictionEnabled?: boolean
  isSmsRestrictionEnabled?: boolean
  lastThemeOfSeason?: boolean
  lft?: boolean
  /** @format int32 */
  maxInvites?: number
  /** @format int32 */
  maxSubstitutes?: number
  /** @format int32 */
  maxSuggestionsPerPlayer?: number
  nameLocKey?: string
  nameLocKeySecondary?: string
  phases?: LolClashTournamentPhase[]
  /** @format int64 */
  resumeTime?: number
  rewardConfig?: ClashRewardConfigClient[]
  /** @format int64 */
  rosterCreateDeadline?: number
  /** @format int32 */
  rosterSize?: number
  /** @format int64 */
  scoutingDurationMs?: number
  /** @format int64 */
  startTimeMs?: number
  status?: TournamentStatusEnum
  /** @format int32 */
  themeId?: number
  tierConfigs?: TierConfig[]
}

export interface LolClashTournamentGameEnd {
  /** @format int64 */
  bracketId?: number
  oldBracket?: LolClashBracket
  /** @format int64 */
  tournamentId?: number
  tournamentNameLocKey?: string
  tournamentNameLocKeySecondary?: string
}

export interface LolClashTournamentHistoryAndWinners {
  tournamentHistory?: LolClashTournament[]
  tournamentWinners?: LolClashTournamentWinnerHistory
}

export enum LolClashTournamentNotifyReason {
  NEW_TOURNAMENT = 'NEW_TOURNAMENT',
  UPDATE_TOURNAMENT = 'UPDATE_TOURNAMENT',
  CANCEL_TOURNAMENT = 'CANCEL_TOURNAMENT',
  CANCEL_PERIOD = 'CANCEL_PERIOD',
  ADD_PHASE = 'ADD_PHASE',
  UPDATE_PHASE = 'UPDATE_PHASE',
  REVERT_PHASE = 'REVERT_PHASE',
  UPDATE_STATUS = 'UPDATE_STATUS'
}

export interface LolClashTournamentPhase {
  cancelled?: boolean
  capacityStatus?: CapacityEnum
  /** @format int64 */
  id?: number
  limitTiers?: number[]
  /** @format int64 */
  lockinStartTime?: number
  /** @format int32 */
  period?: number
  /** @format int64 */
  scoutingStartTime?: number
  /** @format int64 */
  tournamentId?: number
}

export interface LolClashTournamentPhaseProgressNotificationDTO {
  capacityStatus?: CapacityEnum
  /** @format int64 */
  phaseId?: number
  /** @format int64 */
  tournamentId?: number
}

export enum LolClashTournamentState {
  UPCOMING = 'UPCOMING',
  IDLE = 'IDLE',
  LOCK_IN = 'LOCK_IN',
  SCOUTING = 'SCOUTING',
  IN_GAME = 'IN_GAME',
  RESULTS = 'RESULTS'
}

export interface LolClashTournamentStateInfo {
  /** @format int64 */
  currentPhaseId?: number
  /** @format int64 */
  nextPhaseId?: number
  /** @format int64 */
  nextStateChangeTime?: number
  /** @format int32 */
  numRemainingPeriods?: number
  state?: LolClashTournamentState
  /** @format int64 */
  tournamentId?: number
}

export interface LolClashTournamentSummary {
  /** @format int64 */
  bracketId?: number
  rosterId?: string
  state?: LolClashTournamentState
  /** @format int64 */
  tournamentId?: number
}

export interface LolClashTournamentUpdatedNotification {
  /** @format int32 */
  currentRetry?: number
  /** @format int32 */
  maxRetry?: number
  missingPlayerIds?: number[]
  notifyReason?: LolClashRosterNotifyReason
  /** @format int64 */
  retrySeconds?: number
}

export interface LolClashTournamentUpdatedNotificationDTO {
  reason?: LolClashTournamentNotifyReason
  /** @format int64 */
  relevantPhaseId?: number
  tournament?: TournamentDTO
  /** @format int64 */
  tournamentId?: number
}

export interface LolClashTournamentWinnerHistory {
  /** @format int64 */
  tournamentId?: number
  winners?: LolClashTournamentWinnerInfo[]
}

export interface LolClashTournamentWinnerInfo {
  /** @format int64 */
  averageWinDuration?: number
  /** @format int64 */
  createTime?: number
  /** @format int32 */
  logo?: number
  /** @format int32 */
  logoColor?: number
  name?: string
  playerIds?: number[]
  /** @format int64 */
  rosterId?: number
  shortName?: string
  /** @format int32 */
  tier?: number
}

export interface LolClashUserResource {
  lol?: Record<string, string>
  /** @format int64 */
  summonerId?: number
}

export interface LolCollectionsAccountIdAndSummonerId {
  /** @format int64 */
  summonerId?: number
}

export interface LolCollectionsCollectionsChampionMastery {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  championLevel?: number
  /** @format int32 */
  championPoints?: number
  /** @format int32 */
  championPointsSinceLastLevel?: number
  /** @format int32 */
  championPointsUntilNextLevel?: number
  chestGranted?: boolean
  formattedChampionPoints?: string
  formattedMasteryGoal?: string
  highestGrade?: string
  /** @format int64 */
  lastPlayTime?: number
  /** @format int64 */
  playerId?: number
  /** @format int32 */
  tokensEarned?: number
}

export interface LolCollectionsCollectionsChestEligibility {
  /** @format int32 */
  earnableChests?: number
  /** @format int32 */
  maximumChests?: number
  /** @format int64 */
  nextChestRechargeTime?: number
}

export interface LolCollectionsCollectionsOwnership {
  freeToPlayReward?: boolean
  owned?: boolean
  rental?: LolCollectionsCollectionsRental
}

export interface LolCollectionsCollectionsRental {
  /** @format int64 */
  endDate?: number
  /** @format int64 */
  purchaseDate?: number
  rented?: boolean
  /** @format int32 */
  winCountRemaining?: number
}

export interface LolCollectionsCollectionsSummonerBackdrop {
  /** @format int64 */
  accountId?: number
  backdropImage?: string
  backdropMaskColor?: string
  backdropType?: LolCollectionsCollectionsSummonerBackdropType
  backdropVideo?: string
  /** @format int32 */
  championId?: number
  /** @format int32 */
  profileIconId?: number
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export enum LolCollectionsCollectionsSummonerBackdropType {
  Default = 'default',
  SummonerIcon = 'summoner-icon',
  HighestMastery = 'highest-mastery',
  SpecifiedSkin = 'specified-skin'
}

export interface LolCollectionsCollectionsSummonerSpells {
  spells?: number[]
  /** @format int64 */
  summonerId?: number
}

export interface LolCollectionsCollectionsTopChampionMasteries {
  masteries?: LolCollectionsCollectionsChampionMastery[]
  /** @format int64 */
  score?: number
  /** @format int64 */
  summonerId?: number
}

export interface LolCollectionsCollectionsWardSkin {
  description?: string
  /** @format int64 */
  id?: number
  name?: string
  ownership?: LolCollectionsCollectionsOwnership
  wardImagePath?: string
  wardShadowImagePath?: string
}

export interface LolCollectionsCollectionsWardSkinList {
  wardSkinList?: number[]
}

export interface LolCollectionsGameDataChampionMasteries {
  tree?: LolCollectionsGameDataChampionMasteryTree
}

export interface LolCollectionsGameDataChampionMasteryGroup {
  /** @format int32 */
  id?: number
  rows?: LolCollectionsGameDataChampionMasteryRow[]
}

export interface LolCollectionsGameDataChampionMasteryRow {
  masteries?: number[]
}

export interface LolCollectionsGameDataChampionMasteryTree {
  groups?: LolCollectionsGameDataChampionMasteryGroup[]
}

export interface LolCollectionsGameDataChampionQuestSkin {
  /** @format int32 */
  id?: number
  name?: string
  splashPath?: string
  splashVideoPath?: string
}

export interface LolCollectionsGameDataChampionSkin {
  /** @format int32 */
  id?: number
  isBase?: boolean
  name?: string
  questSkinInfo?: LolCollectionsGameDataQuestSkinInfo
  splashPath?: string
  splashVideoPath?: string
}

export interface LolCollectionsGameDataChampionSummary {
  /** @format int32 */
  id?: number
}

export interface LolCollectionsGameDataQuestSkinInfo {
  tiers?: LolCollectionsGameDataChampionQuestSkin[]
}

export interface LolCollectionsGameDataSplashMetadata {
  CalculatedColor?: string
  OverrideColor?: string
}

export interface LolCollectionsInventoryItem {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  ownershipType?: LolCollectionsItemOwnershipType
  purchaseDate?: string
  /** @format int64 */
  quantity?: number
  uuid?: string
}

export interface LolCollectionsInventoryItemDTO {
  entitlementId?: string
  entitlementTypeId?: string
  expirationDate?: string
  f2p?: boolean
  instanceId?: string
  instanceTypeId?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  loyalty?: boolean
  lsb?: boolean
  payload?: Record<string, any>
  purchaseDate?: string
  /** @format int64 */
  quantity?: number
  rental?: boolean
  usedInGameDate?: string
  /** @format int64 */
  wins?: number
}

export interface LolCollectionsInventoryItemWithPayload {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  ownershipType?: LolCollectionsItemOwnershipType
  payload?: Record<string, any>
  purchaseDate?: string
  /** @format int64 */
  quantity?: number
  uuid?: string
}

export enum LolCollectionsItemOwnershipType {
  OWNED = 'OWNED',
  RENTED = 'RENTED',
  LOYALTY = 'LOYALTY',
  F2P = 'F2P'
}

export interface LolCollectionsLcdsDynamicClientConfig {
  DisabledChampions?: Record<string, any>
}

export interface LolCollectionsLoginSession {
  connected?: boolean
  state?: LolCollectionsLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolCollectionsLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolCollectionsNumberFormattingBehavior {
  /** @format int32 */
  digitsForThousandsSeperator?: number
  trimTrailingZerosAfterDecimal?: boolean
  westernNumberGrouping?: boolean
}

export interface LolCollectionsNumberFormattingData {
  billionAbbreviation?: string
  decimalSeperator?: string
  hourAbbreviation?: string
  kilometersAbbreviation?: string
  metersAbbreviation?: string
  millionAbbreviation?: string
  minuteAbbreviation?: string
  numberFormattingBehavior?: LolCollectionsNumberFormattingBehavior
  oneHundredMillionAbbreviation?: string
  percentageFormat?: string
  secondAbbreviation?: string
  tenThousandAbbreviation?: string
  thousandAbbreviation?: string
  thousandSeperator?: string
  trillionAbbreviation?: string
}

export interface LolCollectionsPlayerNotification {
  backgroundUrl?: string
  critical?: boolean
  data?: Record<string, string>
  detailKey?: string
  iconUrl?: string
  /** @format int64 */
  id?: number
  source?: string
  state?: string
  titleKey?: string
  type?: string
}

export interface LolCollectionsSummoner {
  /** @format int64 */
  accountId?: number
  /** @format int32 */
  profileIconId?: number
  puuid?: string
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolCollectionsSummonerProfile {
  /** @format int32 */
  backgroundSkinId?: number
}

export interface LolCollectionsSummonerProfileUpdate {
  key?: string
  value?: Record<string, any>
}

export interface LolCollectionsTPVSaveResponseDTO {
  data?: string
}

export interface LolContentTargetingAccountIdAndSummonerId {
  /** @format int64 */
  summonerId?: number
}

export interface LolContentTargetingCollectionsChampionMastery {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  championLevel?: number
  /** @format int32 */
  championPoints?: number
  /** @format int64 */
  lastPlayTime?: number
  /** @format int64 */
  playerId?: number
}

export interface LolContentTargetingContentTargetingFilterResponse {
  filters?: string[]
}

export interface LolContentTargetingContentTargetingLocaleResponse {
  locale?: string
}

export interface LolContentTargetingGameflowGameData {
  /** @format int64 */
  gameId?: number
  queue?: LolContentTargetingQueue
}

export enum LolContentTargetingGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolContentTargetingGameflowSession {
  gameData?: LolContentTargetingGameflowGameData
  phase?: LolContentTargetingGameflowPhase
}

export interface LolContentTargetingGeoInfo {
  city?: string
  country?: string
  region?: string
}

export interface LolContentTargetingGeoInfoResponse {
  errorMessage?: string
  geoInfo?: LolContentTargetingGeoInfo
  isInitialized?: boolean
  isLatest?: boolean
  success?: boolean
}

export interface LolContentTargetingLoginSession {
  idToken?: string
  puuid?: string
  state?: LolContentTargetingLoginSessionState
  /** @format int64 */
  summonerId?: number
}

export enum LolContentTargetingLoginSessionState {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolContentTargetingMission {
  /** @format int64 */
  completedDate?: number
  id?: string
  internalName?: string
  status?: string
}

export interface LolContentTargetingPlatformConfig {
  ABTestFilterEnabled?: boolean
  /** @format int64 */
  ABTestFilterGroups?: number
  /** @format int64 */
  ABTestFilterSalt?: number
  /** @format int32 */
  AsynchronousEventHandlerSetupDelayInSeconds?: number
  Enabled?: boolean
  EntitlementsFilterEnabled?: boolean
  EntitlementsPrefix?: string
  LevelFilterEnabled?: boolean
  LocationFiltersEnabled?: boolean
  MainFilterEnabled?: boolean
  Mapping?: string
  /** @format int32 */
  MasteryFilterChampionLimit?: number
  /** @format int32 */
  MasteryFilterDaysSinceLastPlayed?: number
  MasteryFilterEnabled?: boolean
  /** @format int32 */
  MasteryFilterLevelThreshold?: number
  MissionsFilterEnabled?: boolean
  RankFilterEnabled?: boolean
  RankedFilterEnabled?: boolean
  SummonerIconFilterEnabled?: boolean
  TargetingAttributeStorageBaseUri?: string
  TargetingAttributeStorageEnabled?: boolean
  /** @format int32 */
  TasIngestionDelayInSeconds?: number
}

export interface LolContentTargetingQueue {
  category?: LolContentTargetingQueueGameCategory
  gameMode?: string
  /** @format int32 */
  id?: number
  /** @format int32 */
  mapId?: number
}

export enum LolContentTargetingQueueGameCategory {
  None = 'None',
  Custom = 'Custom',
  PvP = 'PvP',
  VersusAi = 'VersusAi',
  Alpha = 'Alpha'
}

export enum LolContentTargetingRankedDivision {
  NA = 'NA',
  I = 'I',
  II = 'II',
  III = 'III',
  IV = 'IV',
  V = 'V'
}

export enum LolContentTargetingRankedQueue {
  NONE = 'NONE',
  RANKEDSOLO5X5 = 'RANKED_SOLO_5x5',
  RANKED_FLEX_SR = 'RANKED_FLEX_SR',
  RANKED_FLEX_TT = 'RANKED_FLEX_TT',
  RANKED_TFT = 'RANKED_TFT'
}

export interface LolContentTargetingRankedQueueStats {
  division?: LolContentTargetingRankedDivision
  isProvisional?: boolean
  queueType?: LolContentTargetingRankedQueue
  tier?: LolContentTargetingRankedTier
}

export interface LolContentTargetingRankedStats {
  highestRankedEntry?: LolContentTargetingRankedQueueStats
  queues?: LolContentTargetingRankedQueueStats[]
}

export enum LolContentTargetingRankedTier {
  NONE = 'NONE',
  IRON = 'IRON',
  BRONZE = 'BRONZE',
  SILVER = 'SILVER',
  GOLD = 'GOLD',
  PLATINUM = 'PLATINUM',
  DIAMOND = 'DIAMOND',
  MASTER = 'MASTER',
  GRANDMASTER = 'GRANDMASTER',
  CHALLENGER = 'CHALLENGER'
}

export interface LolContentTargetingRegionLocale {
  locale?: string
}

export interface LolContentTargetingSettingsResource {
  data?: Record<string, any>
}

export interface LolContentTargetingSummoner {
  /** @format int32 */
  profileIconId?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolContentTargetingTargetingAttributes {
  result?: Record<string, Record<string, any>>
}

export interface LolContentTargetingToken {
  entitlements?: string[]
}

export interface LolCosmeticsAccountSettingsCategoryDataResource {
  typeToLastOpenedDate?: Record<string, number>
}

export interface LolCosmeticsCapOffer {
  active?: boolean
  createdDate?: string
  id?: string
  label?: string
  merchantId?: string
  payload?: LolCosmeticsCapOfferPayloadEntry[]
  productId?: string
  startDate?: string
  typeId?: string
}

export interface LolCosmeticsCapOfferPayloadEntry {
  fulfillmentTypeId?: string
  inventoryTypeUUID?: string
  itemInstanceId?: string
  itemPriceMap?: Record<string, number>
}

export interface LolCosmeticsCompanionsGroupViewModel {
  /** @format int32 */
  groupId?: number
  groupName?: string
  items?: LolCosmeticsCosmeticsCompanionViewModel[]
  /** @format int32 */
  numAvailable?: number
  /** @format int32 */
  numOwned?: number
}

export interface LolCosmeticsCompanionsGroupedViewModel {
  /** @format int32 */
  defaultItemId?: number
  groups?: LolCosmeticsCompanionsGroupViewModel[]
  selectedLoadoutItem?: LolCosmeticsCosmeticsCompanionViewModel
}

export interface LolCosmeticsCosmeticSettingsResource {
  data?: LolCosmeticsAccountSettingsCategoryDataResource
  /** @format int32 */
  schemaVersion?: number
}

export interface LolCosmeticsCosmeticsCompanion {
  color?: string
  contentId?: string
  description?: string
  f2p?: boolean
  /** @format int32 */
  groupId?: number
  /** @format int32 */
  itemId?: number
  /** @format int32 */
  level?: number
  loadoutsIcon?: string
  loyalty?: boolean
  name?: string
  owned?: boolean
  purchaseDate?: string
  /** @format int32 */
  rarityValue?: number
  selected?: boolean
  species?: string
  upgrades?: string[]
}

export interface LolCosmeticsCosmeticsCompanionViewModel {
  color?: string
  contentId?: string
  description?: string
  f2p?: boolean
  /** @format int32 */
  groupId?: number
  isRecentItem?: boolean
  /** @format int32 */
  itemId?: number
  /** @format int32 */
  level?: number
  loadoutsIcon?: string
  loyalty?: boolean
  name?: string
  offerData?: LolCosmeticsCapOffer
  owned?: boolean
  purchaseDate?: string
  /** @format int32 */
  rarityValue?: number
  selected?: boolean
  species?: string
  starShardsPrice?: LolCosmeticsCosmeticsOfferPrice
  upgrades?: LolCosmeticsCosmeticsCompanionViewModel[]
}

export interface LolCosmeticsCosmeticsOfferPrice {
  offerId?: string
  /** @format int32 */
  price?: number
}

export interface LolCosmeticsCosmeticsTFTDamageSkin {
  contentId?: string
  description?: string
  f2p?: boolean
  /** @format int32 */
  groupId?: number
  groupName?: string
  /** @format int32 */
  itemId?: number
  /** @format int32 */
  level?: number
  loadoutsIcon?: string
  loyalty?: boolean
  name?: string
  owned?: boolean
  purchaseDate?: string
  /** @format int32 */
  rarityValue?: number
  selected?: boolean
  upgrades?: string[]
}

export interface LolCosmeticsCosmeticsTFTDamageSkinViewModel {
  contentId?: string
  description?: string
  f2p?: boolean
  /** @format int32 */
  groupId?: number
  groupName?: string
  isRecentItem?: boolean
  /** @format int32 */
  itemId?: number
  /** @format int32 */
  level?: number
  loadoutsIcon?: string
  loyalty?: boolean
  name?: string
  owned?: boolean
  purchaseDate?: string
  /** @format int32 */
  rarityValue?: number
  selected?: boolean
  upgrades?: LolCosmeticsCosmeticsTFTDamageSkinViewModel[]
}

export interface LolCosmeticsCosmeticsTFTMapSkin {
  contentId?: string
  description?: string
  f2p?: boolean
  /** @format int32 */
  groupId?: number
  groupName?: string
  /** @format int32 */
  itemId?: number
  loadoutsIcon?: string
  loyalty?: boolean
  name?: string
  owned?: boolean
  purchaseDate?: string
  /** @format int32 */
  rarityValue?: number
  selected?: boolean
}

export interface LolCosmeticsCosmeticsTFTMapSkinViewModel {
  contentId?: string
  description?: string
  f2p?: boolean
  /** @format int32 */
  groupId?: number
  groupName?: string
  isRecentItem?: boolean
  /** @format int32 */
  itemId?: number
  loadoutsIcon?: string
  loyalty?: boolean
  name?: string
  owned?: boolean
  purchaseDate?: string
  /** @format int32 */
  rarityValue?: number
  selected?: boolean
}

export interface LolCosmeticsGameDataCompanion {
  TFTOnly?: boolean
  colorName?: string
  contentId?: string
  description?: string
  /** @format int32 */
  itemId?: number
  /** @format int32 */
  level?: number
  loadoutsIcon?: string
  name?: string
  /** @format int32 */
  rarityValue?: number
  /** @format int32 */
  speciesId?: number
  speciesName?: string
  upgrades?: string[]
}

export interface LolCosmeticsGameDataTFTDamageSkin {
  contentId?: string
  description?: string
  /** @format int32 */
  groupId?: number
  groupName?: string
  /** @format int32 */
  itemId?: number
  /** @format int32 */
  level?: number
  loadoutsIcon?: string
  name?: string
  /** @format int32 */
  rarityValue?: number
}

export interface LolCosmeticsGameDataTFTMapSkin {
  contentId?: string
  description?: string
  /** @format int32 */
  groupId?: number
  groupName?: string
  /** @format int32 */
  itemId?: number
  loadoutsIcon?: string
  name?: string
  /** @format int32 */
  rarityValue?: number
}

export interface LolCosmeticsLoadout {
  id?: string
  /** @format int32 */
  itemId?: number
  loadout?: Record<string, LolCosmeticsLoadoutItem>
  name?: string
  scope?: string
}

export interface LolCosmeticsLoadoutItem {
  contentId?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export interface LolCosmeticsLoadoutUpdateDto {
  loadout?: Record<string, LolCosmeticsLoadoutItem>
}

export interface LolCosmeticsTFTDamageSkinGroupViewModel {
  /** @format int32 */
  groupId?: number
  groupName?: string
  items?: LolCosmeticsCosmeticsTFTDamageSkinViewModel[]
  /** @format int32 */
  numAvailable?: number
  /** @format int32 */
  numOwned?: number
}

export interface LolCosmeticsTFTDamageSkinGroupedViewModel {
  /** @format int32 */
  defaultItemId?: number
  groups?: LolCosmeticsTFTDamageSkinGroupViewModel[]
  selectedLoadoutItem?: LolCosmeticsCosmeticsTFTDamageSkinViewModel
}

export interface LolCosmeticsTFTMapSkinGroupViewModel {
  /** @format int32 */
  groupId?: number
  groupName?: string
  items?: LolCosmeticsCosmeticsTFTMapSkinViewModel[]
  /** @format int32 */
  numAvailable?: number
  /** @format int32 */
  numOwned?: number
}

export interface LolCosmeticsTFTMapSkinGroupedViewModel {
  /** @format int32 */
  defaultItemId?: number
  groups?: LolCosmeticsTFTMapSkinGroupViewModel[]
  selectedLoadoutItem?: LolCosmeticsCosmeticsTFTMapSkinViewModel
}

export interface LolCosmeticsTFTSettingsDataResource {
  iconOverride?: string
}

export interface LolCosmeticsTFTSettingsResource {
  data?: LolCosmeticsTFTSettingsDataResource
  /** @format int32 */
  schemaVersion?: number
}

export interface LolCosmeticsUserResource {
  lol?: Record<string, string>
  /** @format int64 */
  summonerId?: number
}

export interface LolDiscordRpGameDataChampionSummary {
  alias?: string
  /** @format int32 */
  id?: number
  name?: string
}

export interface LolDiscordRpPartyPresenceData {
  /** @format int32 */
  maxPlayers?: number
  partyId?: string
  /** @format int32 */
  queueId?: number
  summoners?: number[]
}

export interface LolEmailVerificationAccessToken {
  /** @format int64 */
  expiry?: number
  token?: string
}

export interface LolEmailVerificationEmailUpdate {
  email?: string
  password?: string
}

export interface LolEmailVerificationEmailVerificationSession {
  email?: string
  emailVerified?: boolean
  fatalError?: boolean
}

export interface LolEmailVerificationRegionLocale {
  locale?: string
  region?: string
  webLanguage?: string
  webRegion?: string
}

export interface LolEmailVerificationRemoteEmailVerificationSession {
  email?: string
  emailVerified?: boolean
}

export interface LolEmailVerificationValidationStatus {
  emailStatus?: string
}

export interface LolEndOfGameChampionMasteryGrade {
  /** @format int32 */
  championId?: number
  grade?: string
  /** @format int64 */
  playerId?: number
}

export interface LolEndOfGameChampionMasteryMini {
  /** @format int32 */
  championId?: number
  /** @format int64 */
  championLevel?: number
  /** @format int64 */
  playerId?: number
}

export interface LolEndOfGameChampionMasteryUpdate {
  /** @format int64 */
  bonusPointsGained?: number
  /** @format int32 */
  championId?: number
  /** @format int64 */
  gameId?: number
  grade?: string
  hasLeveledUp?: boolean
  id?: string
  /** @format int64 */
  level?: number
  levelUpList?: LolEndOfGameChampionMasteryMini[]
  memberGrades?: LolEndOfGameChampionMasteryGrade[]
  /** @format int64 */
  playerId?: number
  /** @format int64 */
  pointsBeforeGame?: number
  /** @format int64 */
  pointsGained?: number
  /** @format int64 */
  pointsGainedIndividualContribution?: number
  /** @format int64 */
  pointsSinceLastLevelBeforeGame?: number
  /** @format int64 */
  pointsUntilNextLevelAfterGame?: number
  /** @format int64 */
  pointsUntilNextLevelBeforeGame?: number
  /** @format int64 */
  score?: number
}

export interface LolEndOfGameEndOfGamePlayer {
  botPlayer?: boolean
  /** @format int32 */
  championId?: number
  detectedTeamPosition?: string
  /** @format int32 */
  elo?: number
  /** @format int32 */
  eloChange?: number
  /** @format int64 */
  gameId?: number
  isReportingDisabled?: boolean
  items?: number[]
  leaver?: boolean
  /** @format int32 */
  leaves?: number
  /** @format int32 */
  level?: number
  /** @format int32 */
  losses?: number
  /** @format int32 */
  profileIconId?: number
  selectedPosition?: string
  /** @format int32 */
  skinIndex?: number
  skinName?: string
  /** @format int32 */
  spell1Id?: number
  /** @format int32 */
  spell2Id?: number
  stats?: Record<string, any>
  /** @format int64 */
  summonerId?: number
  summonerName?: string
  /** @format int32 */
  teamId?: number
  /** @format int64 */
  userId?: number
  /** @format int32 */
  wins?: number
}

export interface LolEndOfGameEndOfGamePlayerComplaintV2 {
  comment?: string
  /** @format int64 */
  gameId?: number
  offenses?: string
  /** @format int64 */
  reportedSummonerId?: number
}

export interface LolEndOfGameEndOfGamePlayerReport {
  comment?: string
  /** @format int64 */
  gameId?: number
  offense?: string
  reportedPuuid?: string
}

export interface LolEndOfGameEndOfGamePoints {
  /** @format int32 */
  pointChangeFromChampionsOwned?: number
  /** @format int32 */
  pointChangeFromGameplay?: number
  /** @format int32 */
  pointsUntilNextReroll?: number
  /** @format int32 */
  pointsUsed?: number
  /** @format int32 */
  previousPoints?: number
  /** @format int32 */
  rerollCount?: number
  /** @format int32 */
  totalPoints?: number
}

export interface LolEndOfGameEndOfGameStats {
  /** @format int64 */
  accountId?: number
  /** @format int32 */
  basePoints?: number
  /** @format int32 */
  battleBoostIpEarned?: number
  /** @format int32 */
  boostIpEarned?: number
  /** @format int32 */
  boostXpEarned?: number
  causedEarlySurrender?: boolean
  /** @format int32 */
  championId?: number
  /** @format int32 */
  coOpVsAiMinutesLeftToday?: number
  /** @format int32 */
  coOpVsAiMsecsUntilReset?: number
  /** @format int32 */
  completionBonusPoints?: number
  /** @format int64 */
  currentLevel?: number
  /** @format int32 */
  customMinutesLeftToday?: number
  /** @format int32 */
  customMsecsUntilReset?: number
  difficulty?: string
  earlySurrenderAccomplice?: boolean
  /** @format int32 */
  elo?: number
  /** @format int32 */
  eloChange?: number
  /** @format int32 */
  experienceEarned?: number
  /** @format int32 */
  experienceTotal?: number
  /** @format int32 */
  firstWinBonus?: number
  gameEndedInEarlySurrender?: boolean
  /** @format int64 */
  gameId?: number
  /** @format int32 */
  gameLength?: number
  gameMode?: string
  gameMutators?: string[]
  gameType?: string
  /** @format int32 */
  globalBoostXpEarned?: number
  imbalancedTeamsNoPoints?: boolean
  invalid?: boolean
  /** @format int32 */
  ipEarned?: number
  /** @format int32 */
  ipTotal?: number
  leveledUp?: boolean
  /** @format int32 */
  loyaltyBoostIpEarned?: number
  /** @format int32 */
  loyaltyBoostXpEarned?: number
  /** @format int32 */
  missionsXpEarned?: number
  myTeamStatus?: string
  newSpells?: number[]
  /** @format int64 */
  nextLevelXp?: number
  /** @format int32 */
  odinBonusIp?: number
  /** @format int32 */
  partyRewardsBonusIpEarned?: number
  pointsPenalties?: Record<string, any>
  /** @format int64 */
  preLevelUpExperienceTotal?: number
  /** @format int64 */
  preLevelUpNextLevelXp?: number
  /** @format int64 */
  previousLevel?: number
  /** @format int64 */
  previousXpTotal?: number
  /** @format int32 */
  queueBonusEarned?: number
  queueType?: string
  ranked?: boolean
  /** @format int64 */
  reportGameId?: number
  rerollData?: LolEndOfGameEndOfGamePoints
  roomName?: string
  roomPassword?: string
  /** @format int32 */
  rpEarned?: number
  sendStatsToTournamentProvider?: boolean
  /** @format int32 */
  skinId?: number
  /** @format int32 */
  skinIndex?: number
  /** @format int64 */
  summonerId?: number
  summonerName?: string
  /** @format int32 */
  talentPointsGained?: number
  teamBoost?: LolEndOfGameEndOfGameTeamBoost
  teamEarlySurrendered?: boolean
  teams?: LolEndOfGameEndOfGameTeam[]
  /** @format int32 */
  timeUntilNextFirstWinBonus?: number
  /** @format int64 */
  userId?: number
}

export interface LolEndOfGameEndOfGameTeam {
  championBans?: number[]
  fullId?: string
  isBottomTeam?: boolean
  isPlayerTeam?: boolean
  isWinningTeam?: boolean
  memberStatusString?: string
  name?: string
  players?: LolEndOfGameEndOfGamePlayer[]
  stats?: Record<string, any>
  tag?: string
  /** @format int32 */
  teamId?: number
}

export interface LolEndOfGameEndOfGameTeamBoost {
  availableSkins?: number[]
  /** @format int64 */
  ipReward?: number
  /** @format int64 */
  ipRewardForPurchaser?: number
  /** @format int64 */
  price?: number
  skinUnlockMode?: string
  summonerName?: string
  unlocked?: boolean
}

export interface LolEndOfGameGameClientEndOfGame {
  gameClientEOG?: LolEndOfGameGameClientEndOfGameStats
}

export interface LolEndOfGameGameClientEndOfGameStats {
  /** @format int64 */
  gameId?: number
  gameMode?: string
  isRanked?: boolean
  /** @format int32 */
  queueId?: number
  queueType?: string
  statsBlock?: Record<string, any>
}

export interface LolEndOfGameGameDataChampionSummary {
  alias?: string
  /** @format int32 */
  id?: number
  name?: string
  squarePortraitPath?: string
}

export interface LolEndOfGameGameDataCompanion {
  colorName?: string
  contentId?: string
  loadoutsIcon?: string
  speciesName?: string
}

export interface LolEndOfGameGameDataTftChampion {
  character_id?: string
  display_name?: string
  path?: string
  /** @format int32 */
  rarity?: number
  squareIconPath?: string
  traits?: LolEndOfGameGameDataTftTrait[]
}

export interface LolEndOfGameGameDataTftItem {
  /** @format int32 */
  id?: number
  loadoutsIcon?: string
  name?: string
}

export interface LolEndOfGameGameDataTftTrait {
  id?: string
  name?: string
}

export interface LolEndOfGameGameflowAvailability {
  state?: string
}

export interface LolEndOfGameGameflowClient {
  observerServerIp?: string
  observerServerPort?: number
  running?: boolean
}

export interface LolEndOfGameGameflowGameData {
  /** @format int64 */
  gameId?: number
  queue?: LolEndOfGameQueue
}

export enum LolEndOfGameGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolEndOfGameGameflowSession {
  gameClient?: LolEndOfGameGameflowClient
  gameData?: LolEndOfGameGameflowGameData
  phase?: LolEndOfGameGameflowPhase
}

export interface LolEndOfGameLobbyInvitation {
  state?: string
}

export interface LolEndOfGameLoginDataPacket {
  platformId?: string
  simpleMessages?: LolEndOfGameSimpleMessage[]
}

export interface LolEndOfGameLoginSession {
  /** @format int64 */
  accountId?: number
  state?: LolEndOfGameLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolEndOfGameLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolEndOfGameQueue {
  /** @format int32 */
  id?: number
  isRanked?: boolean
  type?: string
}

export enum LolEndOfGameReportRecipientMode {
  Legacy = 'Legacy',
  GameAgnostic = 'Game-Agnostic',
  Combined = 'Combined'
}

export interface LolEndOfGameRerollDataBagForClientV1 {
  /** @format int32 */
  maximumRerolls?: number
  /** @format int32 */
  pointCostOfReroll?: number
  /** @format int32 */
  pointsGainedLastGame?: number
  /** @format int32 */
  pointsUntilNextReroll?: number
  /** @format int32 */
  rerollCount?: number
  /** @format int32 */
  totalPoints?: number
}

export interface LolEndOfGameSimpleMessage {
  /** @format int64 */
  accountId?: number
  msgId?: string
  params?: string[]
  type?: string
}

export interface LolEndOfGameSummoner {
  puuid?: string
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
  /** @format int64 */
  xpSinceLastLevel?: number
  /** @format int64 */
  xpUntilNextLevel?: number
}

export interface LolEndOfGameTFTEndOfGameCompanionViewModel {
  colorName?: string
  icon?: string
  speciesName?: string
}

export interface LolEndOfGameTFTEndOfGameItemViewModel {
  icon?: string
  /** @format int32 */
  id?: number
  name?: string
}

export interface LolEndOfGameTFTEndOfGamePieceViewModel {
  icon?: string
  items?: LolEndOfGameTFTEndOfGameItemViewModel[]
  /** @format int32 */
  level?: number
  name?: string
  /** @format int32 */
  price?: number
  traits?: LolEndOfGameTFTEndOfGameTraitViewModel[]
}

export interface LolEndOfGameTFTEndOfGamePlayerViewModel {
  boardPieces?: LolEndOfGameTFTEndOfGamePieceViewModel[]
  companion?: LolEndOfGameTFTEndOfGameCompanionViewModel
  ffaStanding?: number
  health?: number
  /** @format int32 */
  iconId?: number
  isLocalPlayer?: boolean
  partnerGroupId?: number
  puuid?: string
  rank?: number
  /** @format int64 */
  summonerId?: number
  summonerName?: string
}

export interface LolEndOfGameTFTEndOfGameTraitViewModel {
  id?: string
  name?: string
}

export interface LolEndOfGameTFTEndOfGameViewModel {
  /** @format int64 */
  gameId?: number
  /** @format int32 */
  gameLength?: number
  isRanked?: boolean
  localPlayer?: LolEndOfGameTFTEndOfGamePlayerViewModel
  players?: LolEndOfGameTFTEndOfGamePlayerViewModel[]
  /** @format int32 */
  queueId?: number
  queueType?: string
}

export interface LolEsportStreamNotificationsESportStreamNotificationsConfig {
  /** @format int64 */
  beappFailureLongPollMinutes?: number
  notificationsAssetMagickURL?: string
  notificationsEnabled?: boolean
  /** @format int64 */
  notificationsLongPollMinutes?: number
  notificationsServiceEndpoint?: string
  notificationsServiceEndpointV2?: string
  /** @format int64 */
  notificationsShortPollMinutes?: number
  notificationsStreamGroupSlug?: string
  notificationsStreamURL?: string
  useServiceEndpointV2?: boolean
}

export interface LolEsportStreamNotificationsESportsAPIStreamgroups {
  content?: string
  /** @format int64 */
  id?: number
  live?: boolean
  slug?: string
  title?: string
}

export interface LolEsportStreamNotificationsESportsAPIStreamgroupsRoot {
  highlanderTournaments?: LolEsportStreamNotificationsEsportsAPIHighlanderTournaments[]
  streamgroups?: LolEsportStreamNotificationsESportsAPIStreamgroups[]
  teams?: LolEsportStreamNotificationsEsportsAPITeams[]
}

export interface LolEsportStreamNotificationsESportsLiveStreams {
  liveStreams?: LolEsportStreamNotificationsESportsStreams[]
}

export interface LolEsportStreamNotificationsESportsStreams {
  teamAAcronym?: string
  teamAGuid?: string
  /** @format int64 */
  teamAId?: number
  teamALogoUrl?: string
  teamAName?: string
  teamBAcronym?: string
  teamBGuid?: string
  /** @format int64 */
  teamBId?: number
  teamBLogoUrl?: string
  teamBName?: string
  title?: string
  tournamentDescription?: string
}

export interface LolEsportStreamNotificationsEsportsAPIHighlanderTournaments {
  brackets?: Record<string, LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsBrackets>
  description?: string
  id?: string
  rosters?: Record<string, LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsRosters>
  title?: string
}

export interface LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsBrackets {
  id?: string
  matches?: Record<string, LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsMatches>
}

export interface LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsMatches {
  id?: string
  input?: LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsRoster[]
}

export interface LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsRoster {
  roster?: string
}

export interface LolEsportStreamNotificationsEsportsAPIHighlanderTournamentsRosters {
  id?: string
  name?: string
  /** @format int64 */
  team?: number
}

export interface LolEsportStreamNotificationsEsportsAPITeams {
  acronym?: string
  guid?: string
  /** @format int64 */
  id?: number
  logoUrl?: string
  name?: string
  slug?: string
}

export enum LolEsportStreamNotificationsGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolEsportStreamNotificationsGameflowSession {
  phase?: LolEsportStreamNotificationsGameflowPhase
}

export interface LolEsportStreamNotificationsLiveMatch {
  id?: string
  streamGroup?: string
  teams?: LolEsportStreamNotificationsLiveMatchTeam[]
  title?: string
  tournamentDescription?: string
}

export interface LolEsportStreamNotificationsLiveMatchTeam {
  acronym?: string
  guid?: string
  logoUrl?: string
  name?: string
}

export interface LolEsportStreamNotificationsPlayerNotificationResource {
  backgroundUrl?: string
  critical?: boolean
  data?: Record<string, string>
  detailKey?: string
  expires?: string
  iconUrl?: string
  /** @format int64 */
  id?: number
  source?: string
  state?: string
  titleKey?: string
  type?: string
}

export interface LolFeaturedModesAccountIdAndSummonerId {
  /** @format int64 */
  summonerId?: number
}

export interface LolFeaturedModesCollectionsOwnership {
  freeToPlayReward?: boolean
  owned?: boolean
}

export interface LolFeaturedModesCollectionsSummonerIcon {
  /** @format int32 */
  iconId?: number
  ownership?: LolFeaturedModesCollectionsOwnership
}

export interface LolFeaturedModesEligibility {
  eligible?: boolean
  /** @format int32 */
  queueId?: number
  restrictions?: LolFeaturedModesEligibilityRestriction[]
}

export interface LolFeaturedModesEligibilityRestriction {
  /** @format int64 */
  expiredTimestamp?: number
  restrictionArgs?: Record<string, string>
  restrictionCode?: LolFeaturedModesEligibilityRestrictionCode
  summonerIds?: number[]
}

export enum LolFeaturedModesEligibilityRestrictionCode {
  QueueDisabled = 'QueueDisabled',
  QueueUnsupported = 'QueueUnsupported',
  PlayerLevelRestriction = 'PlayerLevelRestriction',
  PlayerTimedRestriction = 'PlayerTimedRestriction',
  PlayerBannedRestriction = 'PlayerBannedRestriction',
  PlayerAvailableChampionRestriction = 'PlayerAvailableChampionRestriction',
  TeamDivisionRestriction = 'TeamDivisionRestriction',
  TeamMaxSizeRestriction = 'TeamMaxSizeRestriction',
  TeamMinSizeRestriction = 'TeamMinSizeRestriction',
  PlayerBingeRestriction = 'PlayerBingeRestriction',
  PlayerDodgeRestriction = 'PlayerDodgeRestriction',
  PlayerInGameRestriction = 'PlayerInGameRestriction',
  PlayerLeaverBustedRestriction = 'PlayerLeaverBustedRestriction',
  PlayerLeaverQueueLockoutRestriction = 'PlayerLeaverQueueLockoutRestriction',
  PlayerLeaverTaintedWarningRestriction = 'PlayerLeaverTaintedWarningRestriction',
  PlayerMaxLevelRestriction = 'PlayerMaxLevelRestriction',
  PlayerMinLevelRestriction = 'PlayerMinLevelRestriction',
  PlayerMinorRestriction = 'PlayerMinorRestriction',
  PlayerRankedSuspensionRestriction = 'PlayerRankedSuspensionRestriction',
  TeamHighMMRMaxSizeRestriction = 'TeamHighMMRMaxSizeRestriction',
  TeamSizeRestriction = 'TeamSizeRestriction',
  PrerequisiteQueuesNotPlayedRestriction = 'PrerequisiteQueuesNotPlayedRestriction',
  GameVersionMismatch = 'GameVersionMismatch',
  GameVersionMissing = 'GameVersionMissing',
  GameVersionNotSupported = 'GameVersionNotSupported',
  QueueEntryNotEntitledRestriction = 'QueueEntryNotEntitledRestriction',
  UnknownRestriction = 'UnknownRestriction'
}

export interface LolFeaturedModesFeaturedModesConfig {
  /** @format int32 */
  MaxNotificationSaveDelayMinutes?: number
  NotificationsEnabled?: boolean
  /** @format int32 */
  QueueToggleNotificationMinutesThreshold?: number
}

export interface LolFeaturedModesGameflowAvailability {
  isAvailable?: boolean
  state?: LolFeaturedModesGameflowAvailabilityState
}

export enum LolFeaturedModesGameflowAvailabilityState {
  Available = 'Available',
  Initializing = 'Initializing',
  Patching = 'Patching',
  PlayerBanned = 'PlayerBanned',
  InGameFlow = 'InGameFlow',
  Configuration = 'Configuration'
}

export enum LolFeaturedModesGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolFeaturedModesGameflowSession {
  phase?: LolFeaturedModesGameflowPhase
}

export interface LolFeaturedModesLoginSession {
  state?: LolFeaturedModesLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolFeaturedModesLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolFeaturedModesMaps {
  assets?: Record<string, string>
  gameModeName?: string
  isRGM?: boolean
}

export interface LolFeaturedModesPlayerNotificationResource {
  backgroundUrl?: string
  critical?: boolean
  data?: Record<string, string>
  detailKey?: string
  expires?: string
  iconUrl?: string
  /** @format int64 */
  id?: number
  source?: string
  state?: string
  titleKey?: string
  type?: string
}

export interface LolFeaturedModesQueue {
  category?: LolFeaturedModesQueueGameCategory
  gameMode?: string
  /** @format int32 */
  id?: number
  /** @format int64 */
  lastToggledOffTime?: number
  /** @format int64 */
  lastToggledOnTime?: number
  /** @format int32 */
  mapId?: number
  name?: string
  queueAvailability?: LolFeaturedModesQueueAvailability
}

export enum LolFeaturedModesQueueAvailability {
  Available = 'Available',
  PlatformDisabled = 'PlatformDisabled',
  DoesntMeetRequirements = 'DoesntMeetRequirements'
}

export enum LolFeaturedModesQueueGameCategory {
  None = 'None',
  Custom = 'Custom',
  PvP = 'PvP',
  VersusAi = 'VersusAi',
  Alpha = 'Alpha'
}

export interface LolGameClientChatGameClientChatMessageResource {
  body?: string
  fromSummonerName?: string
}

export interface LolGameClientChatMutedPlayerInfo {
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolGameQueuesLoginDataPacket {
  gameTypeConfigs?: LolGameQueuesQueueGameTypeConfig[]
}

export interface LolGameQueuesLoginSession {
  /** @format int64 */
  accountId?: number
  connected?: boolean
  state?: LolGameQueuesLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolGameQueuesLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolGameQueuesPlatformConfigEnabledMap {
  /** @format int32 */
  gameMapId?: number
  /** @format int32 */
  minPlayers?: number
}

export interface LolGameQueuesQueue {
  allowablePremadeSizes?: number[]
  areFreeChampionsAllowed?: boolean
  assetMutator?: string
  category?: LolGameQueuesQueueGameCategory
  /** @format int32 */
  championsRequiredToPlay?: number
  description?: string
  detailedDescription?: string
  gameMode?: string
  gameTypeConfig?: LolGameQueuesQueueGameTypeConfig
  /** @format int32 */
  id?: number
  isRanked?: boolean
  isTeamBuilderManaged?: boolean
  isTeamOnly?: boolean
  /** @format int64 */
  lastToggledOffTime?: number
  /** @format int64 */
  lastToggledOnTime?: number
  /** @format int32 */
  mapId?: number
  maxDivisionForPremadeSize2?: string
  /** @format int32 */
  maxLevel?: number
  /** @format int32 */
  maxSummonerLevelForFirstWinOfTheDay?: number
  maxTierForPremadeSize2?: string
  /** @format int32 */
  maximumParticipantListSize?: number
  /** @format int32 */
  minLevel?: number
  /** @format int32 */
  minimumParticipantListSize?: number
  name?: string
  /** @format int32 */
  numPlayersPerTeam?: number
  queueAvailability?: LolGameQueuesQueueAvailability
  queueRewards?: LolGameQueuesQueueReward
  removalFromGameAllowed?: boolean
  /** @format int32 */
  removalFromGameDelayMinutes?: number
  shortName?: string
  showPositionSelector?: boolean
  spectatorEnabled?: boolean
  type?: string
}

export enum LolGameQueuesQueueAvailability {
  Available = 'Available',
  PlatformDisabled = 'PlatformDisabled',
  DoesntMeetRequirements = 'DoesntMeetRequirements'
}

export interface LolGameQueuesQueueCustomGame {
  gameServerRegions?: string[]
  queueAvailability?: LolGameQueuesQueueAvailability
  spectatorPolicies?: LolGameQueuesQueueCustomGameSpectatorPolicy[]
  /** @format int32 */
  spectatorSlotLimit?: number
  subcategories?: LolGameQueuesQueueCustomGameSubcategory[]
}

export enum LolGameQueuesQueueCustomGameSpectatorPolicy {
  NotAllowed = 'NotAllowed',
  LobbyAllowed = 'LobbyAllowed',
  FriendsAllowed = 'FriendsAllowed',
  AllAllowed = 'AllAllowed'
}

export interface LolGameQueuesQueueCustomGameSubcategory {
  customSpectatorPolicies?: LolGameQueuesQueueCustomGameSpectatorPolicy[]
  gameMode?: string
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  maxLevel?: number
  /** @format int32 */
  maxPlayerCount?: number
  /** @format int32 */
  maximumParticipantListSize?: number
  /** @format int32 */
  minLevel?: number
  /** @format int32 */
  minimumParticipantListSize?: number
  mutators?: LolGameQueuesQueueGameTypeConfig[]
  /** @format int32 */
  numPlayersPerTeam?: number
  queueAvailability?: LolGameQueuesQueueAvailability
}

export enum LolGameQueuesQueueGameCategory {
  None = 'None',
  Custom = 'Custom',
  PvP = 'PvP',
  VersusAi = 'VersusAi',
  Alpha = 'Alpha'
}

export interface LolGameQueuesQueueGameTypeConfig {
  advancedLearningQuests?: boolean
  allowTrades?: boolean
  banMode?: string
  /** @format int32 */
  banTimerDuration?: number
  battleBoost?: boolean
  crossTeamChampionPool?: boolean
  deathMatch?: boolean
  doNotRemove?: boolean
  duplicatePick?: boolean
  exclusivePick?: boolean
  gameModeOverride?: string
  /** @format int64 */
  id?: number
  learningQuests?: boolean
  /** @format int32 */
  mainPickTimerDuration?: number
  /** @format int32 */
  maxAllowableBans?: number
  name?: string
  /** @format int32 */
  numPlayersPerTeamOverride?: number
  onboardCoopBeginner?: boolean
  pickMode?: string
  /** @format int32 */
  postPickTimerDuration?: number
  reroll?: boolean
  teamChampionPool?: boolean
}

export interface LolGameQueuesQueueReward {
  isChampionPointsEnabled?: boolean
  isIpEnabled?: boolean
  isXpEnabled?: boolean
  partySizeIpRewards?: number[]
}

export interface LolGameQueuesQueueTranslation {
  description?: string
  detailedDescription?: string
  name?: string
  shortName?: string
}

export interface LolGameSettingsLoginSession {
  /** @format int64 */
  accountId?: number
  gasToken?: Record<string, any>
  state?: LolGameSettingsLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolGameSettingsLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolGameSettingsgamesettingsgameclient {
  running?: boolean
}

export interface LolGameSettingsgamesettingsgameflowsession {
  gameClient?: LolGameSettingsgamesettingsgameclient
}

export interface LolGameflowCrashReportingSettings {
  enabled?: boolean
  type?: string
}

export interface LolGameflowGameModeSpellList {
  spells?: number[]
}

export interface LolGameflowGameflowAvailability {
  isAvailable?: boolean
  state?: LolGameflowGameflowAvailabilityState
}

export enum LolGameflowGameflowAvailabilityState {
  Available = 'Available',
  Initializing = 'Initializing',
  Patching = 'Patching',
  PlayerBanned = 'PlayerBanned',
  InGameFlow = 'InGameFlow',
  Configuration = 'Configuration',
  EligibilityInfoMissing = 'EligibilityInfoMissing'
}

export interface LolGameflowGameflowGameClient {
  observerServerIp?: string
  observerServerPort?: number
  running?: boolean
  serverIp?: string
  serverPort?: number
  visible?: boolean
}

export interface LolGameflowGameflowGameData {
  /** @format int64 */
  gameId?: number
  gameName?: string
  isCustomGame?: boolean
  password?: string
  playerChampionSelections?: Record<string, any>[]
  queue?: LolGameflowQueue
  spectatorsAllowed?: boolean
  teamOne?: Record<string, any>[]
  teamTwo?: Record<string, any>[]
}

export interface LolGameflowGameflowGameDodge {
  dodgeIds?: number[]
  phase?: LolGameflowGameflowPhase
  state?: LolGameflowGameflowGameDodgeState
}

export enum LolGameflowGameflowGameDodgeState {
  Invalid = 'Invalid',
  PartyDodged = 'PartyDodged',
  StrangerDodged = 'StrangerDodged',
  TournamentDodged = 'TournamentDodged'
}

export interface LolGameflowGameflowGameMap {
  assets?: Record<string, any>
  categorizedContentBundles?: Record<string, any>
  description?: string
  gameMode?: string
  gameModeName?: string
  gameModeShortName?: string
  gameMutator?: string
  /** @format int64 */
  id?: number
  isRGM?: boolean
  mapStringId?: string
  name?: string
  perPositionDisallowedSummonerSpells?: Record<string, LolGameflowGameModeSpellList>
  perPositionRequiredSummonerSpells?: Record<string, LolGameflowGameModeSpellList>
  platformId?: string
  platformName?: string
  properties?: Record<string, any>
}

export enum LolGameflowGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolGameflowGameflowProcessInfo {
  /** @format int32 */
  pid?: number
  rawArgs?: string[]
}

export interface LolGameflowGameflowSession {
  gameClient?: LolGameflowGameflowGameClient
  gameData?: LolGameflowGameflowGameData
  gameDodge?: LolGameflowGameflowGameDodge
  map?: LolGameflowGameflowGameMap
  phase?: LolGameflowGameflowPhase
}

export enum LolGameflowGameflowWatchPhase {
  None = 'None',
  WatchStarted = 'WatchStarted',
  WatchInProgress = 'WatchInProgress',
  WatchFailedToLaunch = 'WatchFailedToLaunch'
}

export interface LolGameflowInstallPaths {
  gameExecutablePath?: string
  gameInstallRoot?: string
}

export interface LolGameflowLobbyStatus {
  allowedPlayAgain?: boolean
  customSpectatorPolicy?: LolGameflowQueueCustomGameSpectatorPolicy
  invitedSummonerIds?: number[]
  isCustom?: boolean
  isLeader?: boolean
  isPracticeTool?: boolean
  isSpectator?: boolean
  lobbyId?: string
  memberSummonerIds?: number[]
  /** @format int32 */
  queueId?: number
}

export interface LolGameflowLoginSession {
  /** @format int64 */
  accountId?: number
  connected?: boolean
  state?: LolGameflowLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolGameflowLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolGameflowPatcherProductState {
  action?: LolGameflowPatcherProductStateAction
  isCorrupted?: boolean
  isStopped?: boolean
  isUpToDate?: boolean
  isUpdateAvailable?: boolean
}

export enum LolGameflowPatcherProductStateAction {
  Idle = 'Idle',
  CheckingForUpdates = 'CheckingForUpdates',
  Patching = 'Patching',
  Repairing = 'Repairing',
  Migrating = 'Migrating'
}

export interface LolGameflowPlayerStatus {
  canInviteOthersAtEog?: boolean
  currentLobbyStatus?: LolGameflowLobbyStatus
  lastQueuedLobbyStatus?: LolGameflowLobbyStatus
}

export interface LolGameflowQueue {
  allowablePremadeSizes?: number[]
  areFreeChampionsAllowed?: boolean
  assetMutator?: string
  category?: LolGameflowQueueGameCategory
  /** @format int32 */
  championsRequiredToPlay?: number
  description?: string
  detailedDescription?: string
  gameMode?: string
  gameTypeConfig?: LolGameflowQueueGameTypeConfig
  /** @format int32 */
  id?: number
  isRanked?: boolean
  isTeamBuilderManaged?: boolean
  isTeamOnly?: boolean
  /** @format int64 */
  lastToggledOffTime?: number
  /** @format int64 */
  lastToggledOnTime?: number
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  maxLevel?: number
  /** @format int32 */
  maxSummonerLevelForFirstWinOfTheDay?: number
  /** @format int32 */
  maximumParticipantListSize?: number
  /** @format int32 */
  minLevel?: number
  /** @format int32 */
  minimumParticipantListSize?: number
  name?: string
  /** @format int32 */
  numPlayersPerTeam?: number
  queueAvailability?: LolGameflowQueueAvailability
  queueRewards?: LolGameflowQueueReward
  removalFromGameAllowed?: boolean
  /** @format int32 */
  removalFromGameDelayMinutes?: number
  shortName?: string
  showPositionSelector?: boolean
  spectatorEnabled?: boolean
  type?: string
}

export enum LolGameflowQueueAvailability {
  Available = 'Available',
  PlatformDisabled = 'PlatformDisabled',
  DoesntMeetRequirements = 'DoesntMeetRequirements'
}

export enum LolGameflowQueueCustomGameSpectatorPolicy {
  NotAllowed = 'NotAllowed',
  LobbyAllowed = 'LobbyAllowed',
  FriendsAllowed = 'FriendsAllowed',
  AllAllowed = 'AllAllowed'
}

export enum LolGameflowQueueGameCategory {
  None = 'None',
  Custom = 'Custom',
  PvP = 'PvP',
  VersusAi = 'VersusAi',
  Alpha = 'Alpha'
}

export interface LolGameflowQueueGameTypeConfig {
  advancedLearningQuests?: boolean
  allowTrades?: boolean
  banMode?: string
  /** @format int32 */
  banTimerDuration?: number
  battleBoost?: boolean
  crossTeamChampionPool?: boolean
  deathMatch?: boolean
  doNotRemove?: boolean
  duplicatePick?: boolean
  exclusivePick?: boolean
  /** @format int64 */
  id?: number
  learningQuests?: boolean
  /** @format int32 */
  mainPickTimerDuration?: number
  /** @format int32 */
  maxAllowableBans?: number
  name?: string
  onboardCoopBeginner?: boolean
  pickMode?: string
  /** @format int32 */
  postPickTimerDuration?: number
  reroll?: boolean
  teamChampionPool?: boolean
}

export interface LolGameflowQueueReward {
  isChampionPointsEnabled?: boolean
  isIpEnabled?: boolean
  isXpEnabled?: boolean
  partySizeIpRewards?: number[]
}

export interface LolGameflowRegionLocale {
  locale?: string
  region?: string
}

export interface LolGameflowRegistrationStatus {
  complete?: boolean
  errorCodes?: string[]
}

export interface LolGameflowReplaysSettingsData {
  'highlights-folder-path'?: string
}

export interface LolGameflowReplaysSettingsResource {
  data?: LolGameflowReplaysSettingsData
}

export interface LolGameflowSpectateGameInfoResource {
  allowObserveMode?: string
  dropInSpectateGameId?: string
  gameQueueType?: string
  puuid?: string
}

export interface LolGeoinfoGeoInfo {
  city?: string
  country?: string
  region?: string
}

export interface LolGeoinfoGeoInfoConfig {
  Enabled?: boolean
}

export interface LolGeoinfoGeoInfoResponse {
  errorMessage?: string
  geoInfo?: LolGeoinfoGeoInfo
  isInitialized?: boolean
  isLatest?: boolean
  success?: boolean
}

export interface LolGeoinfoLoginSession {
  /** @format int64 */
  accountId?: number
  state?: LolGeoinfoLoginSessionState
  /** @format int64 */
  summonerId?: number
}

export enum LolGeoinfoLoginSessionState {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolGeoinfoWhereAmIRequest {
  ipAddress?: string
}

export interface LolGeoinfoWhereAmIResponse {
  city?: string
  country?: string
  region?: string
}

export interface LolHeartbeatLoginSession {
  /** @format int64 */
  accountId?: number
  state?: LolHeartbeatLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolHeartbeatLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolHighlightsHighlight {
  /** @format int64 */
  fileSizeBytes?: number
  filepath?: string
  /** @format int64 */
  id?: number
  mtimeIso8601?: string
  /** @format int64 */
  mtimeMsUtc?: number
  name?: string
  url?: string
}

export interface LolHighlightsHighlightsConfig {
  invalidHighlightNameCharacters?: string
  isHighlightsEnabled?: boolean
}

export interface LolHighlightsHighlightsDynamicConfig {
  Enabled?: boolean
}

export interface LolHighlightsHighlightsSettingsData {
  'highlights-folder-path'?: string
}

export interface LolHighlightsHighlightsSettingsResource {
  data?: LolHighlightsHighlightsSettingsData
}

export interface LolHonorV2AccountIdAndSummonerId {
  /** @format int64 */
  accountId?: number
  /** @format int64 */
  summonerId?: number
}

export interface LolHonorV2ApiHonorPlayerServerRequest {
  /** @format int64 */
  gameId?: number
  honorCategory?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolHonorV2Ballot {
  eligiblePlayers?: LolHonorV2EligiblePlayer[]
  /** @format int64 */
  gameId?: number
}

export interface LolHonorV2DynamicHonorMessage {
  messageId?: string
  /** @format int32 */
  value?: number
}

export interface LolHonorV2EligiblePlayer {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  skinIndex?: number
  skinName?: string
  /** @format int64 */
  summonerId?: number
  summonerName?: string
}

export interface LolHonorV2EndOfGamePlayer {
  botPlayer?: boolean
  /** @format int32 */
  championId?: number
  /** @format int64 */
  gameId?: number
  isReportingDisabled?: boolean
  leaver?: boolean
  /** @format int32 */
  profileIconId?: number
  /** @format int32 */
  skinIndex?: number
  skinName?: string
  stats?: Record<string, any>
  /** @format int64 */
  summonerId?: number
  summonerName?: string
  /** @format int32 */
  teamId?: number
  /** @format int64 */
  userId?: number
  /** @format int32 */
  wins?: number
}

export interface LolHonorV2EndOfGameStats {
  /** @format int64 */
  accountId?: number
  /** @format int32 */
  championId?: number
  difficulty?: string
  gameEndedInEarlySurrender?: boolean
  /** @format int64 */
  gameId?: number
  /** @format int32 */
  gameLength?: number
  gameMode?: string
  gameMutators?: string[]
  gameType?: string
  imbalancedTeamsNoPoints?: boolean
  invalid?: boolean
  myTeamStatus?: string
  queueType?: string
  ranked?: boolean
  /** @format int64 */
  reportGameId?: number
  /** @format int64 */
  summonerId?: number
  summonerName?: string
  teams?: LolHonorV2EndOfGameTeam[]
}

export interface LolHonorV2EndOfGameTeam {
  championBans?: number[]
  fullId?: string
  isBottomTeam?: boolean
  isPlayerTeam?: boolean
  isWinningTeam?: boolean
  memberStatusString?: string
  name?: string
  players?: LolHonorV2EndOfGamePlayer[]
  stats?: Record<string, any>
  tag?: string
  /** @format int32 */
  teamId?: number
}

export interface LolHonorV2GameflowGameData {
  /** @format int64 */
  gameId?: number
  queue?: LolHonorV2Queue
}

export enum LolHonorV2GameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolHonorV2GameflowSession {
  gameData?: LolHonorV2GameflowGameData
  phase?: LolHonorV2GameflowPhase
}

export interface LolHonorV2Honor {
  honorCategory?: string
  voterRelationship?: string
}

export interface LolHonorV2HonorConfig {
  DayOneModalEnabled?: boolean
  Enabled?: boolean
  Honor2018Enabled?: boolean
  LedgeEndpointsEnabled?: boolean
  /** @format int32 */
  SecondsToVote?: number
}

export interface LolHonorV2HonorRecipient {
  /** @format int64 */
  gameId?: number
  honors?: LolHonorV2Honor[]
  /** @format int64 */
  summonerId?: number
}

export interface LolHonorV2MutualHonor {
  /** @format int64 */
  gameId?: number
  summoners?: LolHonorV2MutualHonorPlayer[]
}

export interface LolHonorV2MutualHonorPlayer {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  skinIndex?: number
  /** @format int64 */
  summonerId?: number
}

export interface LolHonorV2ProfileInfo {
  /** @format int32 */
  checkpoint?: number
  /** @format int32 */
  honorLevel?: number
  rewardsLocked?: boolean
}

export interface LolHonorV2Queue {
  gameMode?: string
  /** @format int32 */
  id?: number
  /** @format int32 */
  mapId?: number
  removalFromGameAllowed?: boolean
  /** @format int32 */
  removalFromGameDelayMinutes?: number
  type?: string
}

export interface LolHonorV2Reward {
  /** @format int32 */
  quantity?: number
  rewardType?: string
}

export interface LolHonorV2SequenceEvent {
  name?: string
  /** @format int32 */
  priority?: number
}

export interface LolHonorV2ServiceProxyHonorPlayerServerRequest {
  /** @format int64 */
  gameId?: number
  honorType?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolHonorV2ServiceProxyRetrieveProfileResponse {
  /** @format int32 */
  checkpoint?: number
  /** @format int32 */
  honorLevel?: number
  rewardsLocked?: boolean
}

export interface LolHonorV2VendedHonorChange {
  actionType?: string
  currentState?: LolHonorV2VendedHonorState
  dynamicHonorMessage?: LolHonorV2DynamicHonorMessage
  previousState?: LolHonorV2VendedHonorState
  reward?: LolHonorV2Reward
}

export interface LolHonorV2VendedHonorState {
  /** @format int32 */
  checkpoint?: number
  /** @format int32 */
  level?: number
  rewardsLocked?: boolean
}

export interface LolHonorV2VendedReward {
  dynamicHonorMessage?: LolHonorV2DynamicHonorMessage
  /** @format int32 */
  quantity?: number
  rewardType?: string
}

export interface LolHonorV2VoteCompletion {
  fullTeamVote?: boolean
  /** @format int64 */
  gameId?: number
}

export interface LolHovercardChatSession {
  sessionState?: string
}

export interface LolHovercardContentCookies {
  content_id?: string
  content_path?: string
  cookies?: LolHovercardcookie[]
}

export interface LolHovercardFriendResult {
  /** @format int64 */
  accountId?: number
  availability?: string
  gameName?: string
  gameTag?: string
  /** @format int32 */
  icon?: number
  id?: string
  lol?: Record<string, string>
  name?: string
  note?: string
  patchline?: string
  platformId?: string
  product?: string
  productName?: string
  puuid?: string
  /** @format int64 */
  score?: number
  statusMessage?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolHovercardHovercardUserInfo {
  /** @format int64 */
  accountId?: number
  availability?: string
  gameName?: string
  gameTag?: string
  /** @format int32 */
  icon?: number
  id?: string
  lol?: Record<string, string>
  /** @format int64 */
  masteryScore?: number
  name?: string
  note?: string
  partySummoners?: string[]
  patchline?: string
  platformId?: string
  product?: string
  productName?: string
  puuid?: string
  remotePlatform?: boolean
  remoteProduct?: boolean
  remoteProductBackdropUrl?: string
  remoteProductIconUrl?: string
  statusMessage?: string
  /** @format int32 */
  summonerIcon?: number
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolHovercardPartyInfo {
  summoners?: number[]
}

export interface LolHovercardPatchlineMetadata {
  content_cookies?: LolHovercardContentCookies[]
  content_paths?: Record<string, string>
  id?: string
  product_id?: string
}

export interface LolHovercardProductMetadata {
  id?: string
  name?: string
  patchlines?: Record<string, LolHovercardPatchlineMetadata>
}

export interface LolHovercardProductMetadataMap {
  products?: Record<string, LolHovercardProductMetadata>
}

export interface LolHovercardSummoner {
  /** @format int64 */
  accountId?: number
  displayName?: string
  puuid?: string
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolHovercardSummonerIdAndIcon {
  /** @format int32 */
  profileIconId?: number
}

export interface LolHovercardSummonerIdAndName {
  displayName?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolHovercardTopChampionMastery {
  /** @format int64 */
  score?: number
}

export interface LolHovercardcookie {
  name?: string
  value?: string
}

export interface LolInventoryAccessTokenResource {
  /** @format int64 */
  expiry?: number
  scopes?: string[]
  token?: string
}

export interface LolInventoryCatalogItem {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  itemInstanceId?: string
}

export interface LolInventoryClientCacheClearMessageDTO {
  clearAll?: boolean
  inventoryTypes?: string[]
  regions?: string[]
}

export interface LolInventoryCurrencyDTO {
  /** @format int32 */
  amount?: number
  subCurrencies?: Record<string, number>
}

export interface LolInventoryInventoryCacheEntry {
  /** @format int64 */
  expirationMS?: number
  /** @format int64 */
  issuedAtMS?: number
  /** @format int64 */
  receivedAtMS?: number
  signedInventoryJwt?: string
  valid?: boolean
}

export interface LolInventoryInventoryDTO {
  /** @format int64 */
  accountId?: number
  expires?: string
  items?: Record<string, Record<string, any>>
  itemsJwt?: string
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolInventoryInventoryItem {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  ownershipType?: LolInventoryItemOwnershipType
  purchaseDate?: string
  /** @format int64 */
  quantity?: number
  uuid?: string
}

export interface LolInventoryInventoryItemDTO {
  entitlementId?: string
  entitlementTypeId?: string
  expirationDate?: string
  f2p?: boolean
  instanceId?: string
  instanceTypeId?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  loyalty?: boolean
  lsb?: boolean
  payload?: Record<string, any>
  purchaseDate?: string
  /** @format int64 */
  quantity?: number
  rental?: boolean
  usedInGameDate?: string
  /** @format int64 */
  wins?: number
}

export interface LolInventoryInventoryItemWithPayload {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  ownershipType?: LolInventoryItemOwnershipType
  payload?: Record<string, any>
  purchaseDate?: string
  /** @format int64 */
  quantity?: number
  uuid?: string
}

export interface LolInventoryInventoryNotification {
  acknowledged?: boolean
  /** @format int64 */
  id?: number
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  type?: string
}

export interface LolInventoryInventoryResponseDTO {
  data?: LolInventoryInventoryDTO
}

export interface LolInventoryItemKey {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export enum LolInventoryItemOwnershipType {
  OWNED = 'OWNED',
  RENTED = 'RENTED',
  LOYALTY = 'LOYALTY',
  F2P = 'F2P'
}

export interface LolInventoryLoginSession {
  /** @format int64 */
  accountId?: number
  gasToken?: Record<string, any>
  idToken?: string
  puuid?: string
  state?: LolInventoryLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolInventoryLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolInventoryLoyaltyRewards {
  championIds?: number[]
  /** @format int32 */
  freeRewardedChampionsCount?: number
  /** @format int32 */
  freeRewardedSkinsCount?: number
  /** @format int32 */
  ipBoost?: number
  /** @format int32 */
  loyaltyTFTCompanionCount?: number
  /** @format int32 */
  loyaltyTFTMapSkinCount?: number
  skinIds?: number[]
  /** @format int32 */
  xpBoost?: number
}

export enum LolInventoryLoyaltyStatus {
  LEGACY = 'LEGACY',
  REWARDS_GRANT = 'REWARDS_GRANT',
  EXPIRY = 'EXPIRY',
  CHANGE = 'CHANGE',
  REVOKE = 'REVOKE',
  DISABLED = 'DISABLED'
}

export interface LolInventoryLoyaltyStatusNotification {
  rewards?: LolInventoryLoyaltyRewards
  status?: LolInventoryLoyaltyStatus
}

export interface LolInventoryRiotMessagingServiceMessage {
  payload?: string
  resource?: string
  service?: string
  /** @format int64 */
  timestamp?: number
  version?: string
}

export interface LolInventoryRmsEntitlementPayload {
  entitlementTypeId?: string
  itemId?: string
  itemTypeId?: string
  resourceOperation?: string
}

export interface LolInventoryRmsStoreEntitlementItem {
  inventoryType?: string
  itemId?: string
}

export interface LolInventoryRmsStoreEntitlementPayload {
  items?: LolInventoryRmsStoreEntitlementItem[]
  transactionId?: string
}

export type LolInventoryRmsWalletPayload = object

export interface LolInventorySimpleInventoryDTO {
  expires?: string
  items?: Record<string, Record<string, any>>
  itemsJwt?: string
}

export interface LolInventorySimpleInventoryResponseDTO {
  data?: LolInventorySimpleInventoryDTO
}

export interface LolInventorySummonerIcon {
  /** @format int32 */
  itemId?: number
}

export interface LolInventoryWallet {
  /** @format int64 */
  ip?: number
  /** @format int64 */
  rp?: number
}

export interface LolInventoryWalletCacheEntry {
  /** @format int64 */
  expirationMS?: number
  /** @format int64 */
  issuedAtMS?: number
  /** @format int64 */
  receivedAtMS?: number
  signedBalancesJwt?: string
  valid?: boolean
}

export interface LolInventoryWalletDTO {
  /** @format int64 */
  accountId?: number
  balances?: Record<string, number>
  balancesJwt?: string
  expires?: string
  puuid?: string
}

export interface LolInventoryWalletResponseDTO {
  data?: LolInventoryWalletDTO
}

export interface LolItemSetsGameDataChampion {
  alias?: string
}

export interface LolItemSetsItemSet {
  associatedChampions?: number[]
  associatedMaps?: number[]
  blocks?: LolItemSetsItemSetBlock[]
  map?: string
  mode?: string
  preferredItemSlots?: LolItemSetsPreferredItemSlot[]
  /** @format int32 */
  sortrank?: number
  startedFrom?: string
  title?: string
  type?: string
  uid?: string
}

export interface LolItemSetsItemSetBlock {
  hideIfSummonerSpell?: string
  items?: LolItemSetsItemSetItem[]
  showIfSummonerSpell?: string
  type?: string
}

export interface LolItemSetsItemSetItem {
  count?: number
  id?: string
}

export interface LolItemSetsItemSets {
  /** @format int64 */
  accountId?: number
  itemSets?: LolItemSetsItemSet[]
  /** @format int64 */
  timestamp?: number
}

export interface LolItemSetsLoginSession {
  /** @format int64 */
  accountId?: number
  state?: LolItemSetsLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolItemSetsLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolItemSetsNameCheckPayload {
  name?: string
  shard?: string
}

export interface LolItemSetsNameCheckResponse {
  errors?: string[]
}

export interface LolItemSetsPreferredItemSlot {
  id?: string
  preferredItemSlot?: number
}

export interface LolItemSetsValidateItemSetNameInput {
  name?: string
}

export interface LolItemSetsValidateItemSetNameResponse {
  nameCheckResponse?: LolItemSetsNameCheckResponse
  success?: boolean
}

export interface LolKickoutKickoutMessage {
  message?: string
}

export interface LolKrPlaytimeReminderPlaytimeReminder {
  /** @format int32 */
  hours?: number
}

export interface LolKrShutdownLawAllQueueShutdownStatus {
  isAllQueuesDisabled?: boolean
}

export interface LolKrShutdownLawAntiAddictionState {
  policyType?: LolKrShutdownLawPolicyType
}

export enum LolKrShutdownLawPolicyType {
  Shutdown = 'shutdown',
  PlayTime = 'playTime',
  WarningMessage = 'warningMessage',
  DisableMatchMaking = 'disableMatchMaking'
}

export interface LolKrShutdownLawQueueShutdownStatus {
  isDisabled?: boolean
}

export interface LolKrShutdownLawRatingScreenInfo {
  shown?: boolean
}

export interface LolKrShutdownLawShutdownLawNotification {
  type?: LolKrShutdownLawShutdownLawStatus
}

export enum LolKrShutdownLawShutdownLawStatus {
  NONE = 'NONE',
  WARNING = 'WARNING',
  CUT_OFF = 'CUT_OFF'
}

export interface LolLeagueSessionAntiAddictionTokenEnvelope {
  antiAddictionToken?: string
}

export interface LolLeagueSessionLeagueSessionRMSNotification {
  puuid?: string
  sessionId?: string
  /** @format int64 */
  sessionInitiatedAt?: number
  state?: string
}

export enum LolLeagueSessionLeagueSessionStatus {
  UNINITIALIZED = 'UNINITIALIZED',
  INITIALIZED = 'INITIALIZED',
  EXPIRED = 'EXPIRED',
  DUPLICATED = 'DUPLICATED',
  ANTI_ADDICTION_EXPIRED = 'ANTI_ADDICTION_EXPIRED'
}

export interface LolLeagueSessionLeagueSessionTokenEnvelope {
  logoutOnFailure?: boolean
  token?: string
}

export interface LolLeaverBusterAllSummonerData {
  summoner?: LolLeaverBusterSummoner
}

export interface LolLeaverBusterLeaverBusterNotificationResource {
  /** @format int64 */
  accountId?: number
  fromRms?: boolean
  /** @format int32 */
  id?: number
  msgId?: string
  /** @format int32 */
  punishedGamesRemaining?: number
  /** @format int64 */
  queueLockoutTimerExpiryUtcMillisDiff?: number
  type?: LolLeaverBusterLeaverBusterNotificationType
}

export enum LolLeaverBusterLeaverBusterNotificationType {
  Invalid = 'Invalid',
  TaintedWarning = 'TaintedWarning',
  PunishmentIncurred = 'PunishmentIncurred',
  PunishedGamesRemaining = 'PunishedGamesRemaining',
  Reforming = 'Reforming',
  PreLockoutWarning = 'PreLockoutWarning',
  OnLockoutWarning = 'OnLockoutWarning'
}

export interface LolLeaverBusterLoginDataPacket {
  allSummonerData?: LolLeaverBusterAllSummonerData
  simpleMessages?: LolLeaverBusterSimpleMessage[]
}

export interface LolLeaverBusterMatchmakingSearchErrorResource {
  errorType?: string
  /** @format int32 */
  id?: number
  message?: string
  /** @format int64 */
  penalizedSummonerId?: number
  /** @format double */
  penaltyTimeRemaining?: number
}

export interface LolLeaverBusterMatchmakingSearchResource {
  errors?: LolLeaverBusterMatchmakingSearchErrorResource[]
  /** @format int32 */
  queueId?: number
}

export interface LolLeaverBusterPlayerNotificationResource {
  backgroundUrl?: string
  created?: string
  critical?: boolean
  data?: Record<string, string>
  detailKey?: string
  expires?: string
  iconUrl?: string
  /** @format int64 */
  id?: number
  source?: string
  state?: string
  titleKey?: string
  type?: string
}

export interface LolLeaverBusterSimpleMessage {
  /** @format int64 */
  accountId?: number
  msgId?: string
  params?: string[]
  type?: string
}

export interface LolLeaverBusterSummoner {
  /** @format int64 */
  acctId?: number
  /** @format int64 */
  sumId?: number
}

export interface LolLicenseAgreementLicenseAgreement {
  id?: string
  licenseType?: LolLicenseAgreementLicenseAgreementType
  text?: string
}

export enum LolLicenseAgreementLicenseAgreementType {
  PrivacyNotice = 'PrivacyNotice',
  TermsOfUse = 'TermsOfUse'
}

export enum LolLicenseAgreementLicenseServeLocation {
  Preparing = 'Preparing',
  Local = 'Local',
  External = 'External'
}

export interface LolLicenseAgreementPluginRegionLocaleChangedEvent {
  locale?: string
  region?: string
}

export interface LolLoadoutsAccessTokenResource {
  /** @format int64 */
  expiry?: number
  scopes?: string[]
  token?: string
}

export interface LolLoadoutsCreateLoadoutDTO {
  /** @format int32 */
  itemId?: number
  loadout?: Record<string, LolLoadoutsItemKey>
  name?: string
  refreshTime?: string
  scope?: string
}

export interface LolLoadoutsCreateLoadoutRequestDTO {
  loadout?: LolLoadoutsCreateLoadoutDTO
  serviceToJwtsMap?: Record<string, Record<string, any>>
}

export interface LolLoadoutsCreateOrUpdateItemsRequest {
  /** @format int32 */
  id?: number
  inventoryJWTs?: string[]
  items?: Record<string, Record<string, any>>
}

export interface LolLoadoutsFrontendInventoryResponse {
  entitlements?: LolLoadoutsItemKey[]
}

export interface LolLoadoutsGameflowGameData {
  queue?: LolLoadoutsQueue
}

export enum LolLoadoutsGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolLoadoutsGameflowSession {
  gameData?: LolLoadoutsGameflowGameData
  phase?: LolLoadoutsGameflowPhase
}

export interface LolLoadoutsGetItemsRequest {
  /** @format int32 */
  id?: number
  inventoryJWTs?: string[]
  inventoryTypes?: string[]
}

export interface LolLoadoutsInventoryDTO {
  /** @format int64 */
  accountId?: number
  expires?: string
  items?: Record<string, Record<string, any>>
  itemsJwt?: string
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolLoadoutsInventoryItemDTO {
  entitlementId?: string
  entitlementTypeId?: string
  expirationDate?: string
  f2p?: boolean
  instanceId?: string
  instanceTypeId?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  lsb?: boolean
  purchaseDate?: string
  /** @format int64 */
  quantity?: number
  rental?: boolean
  usedInGameDate?: string
  /** @format int64 */
  wins?: number
}

export interface LolLoadoutsInventoryResponseDTO {
  data?: LolLoadoutsInventoryDTO
}

export interface LolLoadoutsItemKey {
  contentId?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export interface LolLoadoutsLoadout {
  /** @format int32 */
  id?: number
  items?: Record<string, Record<string, any>>
  name?: string
}

export interface LolLoadoutsLoadoutRequestDTOBase {
  serviceToJwtsMap?: Record<string, Record<string, any>>
}

export interface LolLoadoutsLoginSession {
  /** @format int64 */
  accountId?: number
  gasToken?: Record<string, any>
  idToken?: string
  puuid?: string
  state?: LolLoadoutsLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolLoadoutsLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolLoadoutsQueue {
  isTeamBuilderManaged?: boolean
}

export interface LolLoadoutsScopedLoadout {
  id?: string
  /** @format int32 */
  itemId?: number
  loadout?: Record<string, LolLoadoutsItemKey>
  name?: string
  refreshTime?: string
  scope?: string
}

export interface LolLoadoutsSignGCORequestDTO {
  loadout?: Record<string, LolLoadoutsItemKey>
  serviceToJwtsMap?: Record<string, Record<string, any>>
}

export interface LolLoadoutsUpdateLoadoutDTO {
  id?: string
  loadout?: Record<string, LolLoadoutsItemKey>
  name?: string
}

export interface LolLoadoutsUpdateLoadoutRequestDTO {
  loadout?: LolLoadoutsUpdateLoadoutDTO
  serviceToJwtsMap?: Record<string, Record<string, any>>
}

export interface LolLobbyAccountIdAndSummonerId {
  /** @format int64 */
  accountId?: number
  /** @format int64 */
  summonerId?: number
}

export interface LolLobbyAmbassadorMessage {
  errorCode?: string
  /** @format int32 */
  httpStatus?: number
  implementationDetails?: string
  message?: string
  payload?: Record<string, any>
}

export interface LolLobbyAutoFillQueueDto {
  autoFillEligible?: boolean
  autoFillProtectedForPromos?: boolean
  autoFillProtectedForStreaking?: boolean
  /** @format int32 */
  queueId?: number
}

export interface LolLobbyBotParticipantDto {
  /** @format int32 */
  botSkillLevel?: number
  /** @format int32 */
  championId?: number
  team?: string
}

export interface LolLobbyChampionSkinSelection {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  skinId?: number
}

export interface LolLobbyChatBlockedPlayerResource {
  name?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolLobbyChatFriend {
  lol?: Record<string, string>
  /** @format int64 */
  summonerId?: number
}

export interface LolLobbyChatFriendCounts {
  /** @format int32 */
  numFriends?: number
  /** @format int32 */
  numFriendsAvailable?: number
  /** @format int32 */
  numFriendsAway?: number
  /** @format int32 */
  numFriendsInChampSelect?: number
  /** @format int32 */
  numFriendsInGame?: number
  /** @format int32 */
  numFriendsInQueue?: number
  /** @format int32 */
  numFriendsMobile?: number
  /** @format int32 */
  numFriendsOnline?: number
}

export interface LolLobbyCollectionsChampion {
  active?: boolean
  botEnabled?: boolean
  /** @format int32 */
  id?: number
  name?: string
}

export interface LolLobbyCollectionsChampionMinimal {
  active?: boolean
  disabledQueues?: string[]
  freeToPlay?: boolean
  /** @format int32 */
  id?: number
  ownership?: LolLobbyCollectionsOwnership
}

export interface LolLobbyCollectionsOwnership {
  freeToPlayReward?: boolean
  owned?: boolean
  rental?: LolLobbyCollectionsRental
}

export type LolLobbyCollectionsRental = object

export interface LolLobbyCustomEligibilityDto {
  eligible?: boolean
  restrictions?: LolLobbyGatekeeperRestrictionDto[]
}

export interface LolLobbyCustomGameDto {
  allowSpectators?: string
  gameType?: string
  lobbyName?: string
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  maxNumPlayers?: number
  ownerPuuid?: string
  partyId?: string
  privateGame?: boolean
  /** @format int32 */
  spectatorCount?: number
  /** @format int32 */
  team1Count?: number
  /** @format int32 */
  team2Count?: number
}

export interface LolLobbyCustomGameSettingsDto {
  /** @format int64 */
  gameId?: number
  lobbyName?: string
  lobbyPassword?: string
}

export interface LolLobbyCustomJoinOptionsDto {
  lobbyPassword?: string
  team?: string
}

export interface LolLobbyEligibility {
  eligible?: boolean
  /** @format int32 */
  queueId?: number
  restrictions?: LolLobbyEligibilityRestriction[]
}

export interface LolLobbyEligibilityRestriction {
  /** @format int64 */
  expiredTimestamp?: number
  restrictionArgs?: Record<string, string>
  restrictionCode?: LolLobbyEligibilityRestrictionCode
  summonerIds?: number[]
  summonerIdsString?: string
}

export enum LolLobbyEligibilityRestrictionCode {
  QueueDisabled = 'QueueDisabled',
  QueueUnsupported = 'QueueUnsupported',
  PlayerLevelRestriction = 'PlayerLevelRestriction',
  PlayerTimedRestriction = 'PlayerTimedRestriction',
  PlayerBannedRestriction = 'PlayerBannedRestriction',
  PlayerAvailableChampionRestriction = 'PlayerAvailableChampionRestriction',
  TeamDivisionRestriction = 'TeamDivisionRestriction',
  TeamMaxSizeRestriction = 'TeamMaxSizeRestriction',
  TeamMinSizeRestriction = 'TeamMinSizeRestriction',
  PlayerBingeRestriction = 'PlayerBingeRestriction',
  PlayerDodgeRestriction = 'PlayerDodgeRestriction',
  PlayerInGameRestriction = 'PlayerInGameRestriction',
  PlayerLeaverBustedRestriction = 'PlayerLeaverBustedRestriction',
  PlayerLeaverQueueLockoutRestriction = 'PlayerLeaverQueueLockoutRestriction',
  PlayerLeaverTaintedWarningRestriction = 'PlayerLeaverTaintedWarningRestriction',
  PlayerMaxLevelRestriction = 'PlayerMaxLevelRestriction',
  PlayerMinLevelRestriction = 'PlayerMinLevelRestriction',
  PlayerMinorRestriction = 'PlayerMinorRestriction',
  PlayerTimePlayedRestriction = 'PlayerTimePlayedRestriction',
  PlayerRankSoloOnlyRestriction = 'PlayerRankSoloOnlyRestriction',
  PlayerRankedSuspensionRestriction = 'PlayerRankedSuspensionRestriction',
  TeamHighMMRMaxSizeRestriction = 'TeamHighMMRMaxSizeRestriction',
  TeamSizeRestriction = 'TeamSizeRestriction',
  PrerequisiteQueuesNotPlayedRestriction = 'PrerequisiteQueuesNotPlayedRestriction',
  GameVersionMismatch = 'GameVersionMismatch',
  GameVersionMissing = 'GameVersionMissing',
  GameVersionNotSupported = 'GameVersionNotSupported',
  QueueEntryNotEntitledRestriction = 'QueueEntryNotEntitledRestriction',
  UnknownRestriction = 'UnknownRestriction',
  BanInfoNotAvailable = 'BanInfoNotAvailable',
  MinorInfoNotAvailable = 'MinorInfoNotAvailable',
  SummonerInfoNotAvailable = 'SummonerInfoNotAvailable',
  LeaguesInfoNotAvailable = 'LeaguesInfoNotAvailable',
  InventoryChampsInfoNotAvailable = 'InventoryChampsInfoNotAvailable',
  InventoryQueuesInfoNotAvailable = 'InventoryQueuesInfoNotAvailable',
  MmrStandardDeviationTooLarge = 'MmrStandardDeviationTooLarge'
}

export interface LolLobbyFriendAvailabilityAnalytics {
  eventData?: Record<string, any>
  /** @format int64 */
  eventTimestamp?: number
  eventType?: string
  /** @format int32 */
  numFriends?: number
  /** @format int32 */
  numFriendsAvailable?: number
  /** @format int32 */
  numFriendsAway?: number
  /** @format int32 */
  numFriendsInChampSelect?: number
  /** @format int32 */
  numFriendsInGame?: number
  /** @format int32 */
  numFriendsInQueue?: number
  /** @format int32 */
  numFriendsMobile?: number
  /** @format int32 */
  numFriendsOnline?: number
  partyType?: string
  platformId?: string
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolLobbyGameDataChampionSummary {
  alias?: string
  /** @format int32 */
  id?: number
}

export interface LolLobbyGameModeDto {
  allowSpectators?: string
  botDifficulty?: string
  customsSettings?: LolLobbyCustomGameSettingsDto
  gameCustomization?: Record<string, string>
  gameType?: string
  /** @format int64 */
  gameTypeConfigId?: number
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  maxPartySize?: number
  /** @format int32 */
  maxTeamSize?: number
  /** @format int32 */
  queueId?: number
}

export interface LolLobbyGameflowGameClient {
  running?: boolean
}

export interface LolLobbyGameflowGameData {
  queue?: LolLobbyQueue
}

export interface LolLobbyGameflowGameDodge {
  dodgeIds?: number[]
  phase?: LolLobbyGameflowPhase
  state?: LolLobbyMatchmakingDodgeState
}

export enum LolLobbyGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolLobbyGameflowSampleDto {
  /** @format double */
  intervalSecs?: number
  /** @format double */
  probability?: number
  state?: string
  tags?: LolLobbyGameflowSampleTag[]
}

export enum LolLobbyGameflowSampleTag {
  Unregistered = 'Unregistered',
  GameVersionMissing = 'GameVersionMissing',
  UserInfoTokenMissing = 'UserInfoTokenMissing',
  SummonerTokenMissing = 'SummonerTokenMissing',
  RankedTokenMissing = 'RankedTokenMissing',
  InventoryTokenMissing = 'InventoryTokenMissing'
}

export interface LolLobbyGameflowSession {
  gameClient?: LolLobbyGameflowGameClient
  gameData?: LolLobbyGameflowGameData
  gameDodge?: LolLobbyGameflowGameDodge
  phase?: LolLobbyGameflowPhase
}

export interface LolLobbyGatekeeperRestrictionDto {
  /** @format int64 */
  accountId?: number
  details?: Record<string, string>
  payload?: string
  puuid?: string
  /** @format int32 */
  queueId?: number
  reason?: string
  /** @format int64 */
  remainingMillis?: number
}

export interface LolLobbyInventoryCacheEntry {
  /** @format int64 */
  expirationMS?: number
  signedInventoryJwt?: string
  valid?: boolean
}

export interface LolLobbyInventoryItem {
  /** @format int32 */
  itemId?: number
}

export enum LolLobbyInvitationType {
  Invalid = 'invalid',
  Lobby = 'lobby',
  Party = 'party'
}

export interface LolLobbyJoinPartyAnalytics {
  eventData?: Record<string, any>
  /** @format int64 */
  eventTimestamp?: number
  eventType?: string
  gameMode?: string
  /** @format int32 */
  numFriendsOnline?: number
  /** @format int32 */
  numOpenFriends?: number
  /** @format int32 */
  numOpenParties?: number
  /** @format int32 */
  numOtherInvites?: number
  /** @format int32 */
  numPartyInvites?: number
  /** @format int32 */
  numTotalInvites?: number
  partyId?: string
  /** @format int32 */
  partySize?: number
  platformId?: string
}

export interface LolLobbyLcdsDynamicClientConfig {
  PartyRewards?: LolLobbyLcdsPartyRewardsConfig
}

export interface LolLobbyLcdsGameMetaData {
  /** @format int64 */
  gameId?: number
  /** @format int32 */
  mapId?: number
}

export interface LolLobbyLcdsPartyRewardsConfig {
  Enabled?: boolean
}

export interface LolLobbyLobby {
  allowablePremadeSizes?: number[]
  autoFillEligible?: boolean
  autoFillProtectedForPromos?: boolean
  autoFillProtectedForStreaking?: boolean
  canStartMatchmaking?: boolean
  chatRoomId?: string
  chatRoomKey?: string
  customGameLobby?: LolLobbyLobbyCustomGameLobby
  gameMode?: string
  invitationId?: string
  invitations?: LolLobbyLobbyInvitation[]
  isCustom?: boolean
  isTeamBuilderManaged?: boolean
  localMember?: LolLobbyLobbyMember
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  maximumParticipantListSize?: number
  members?: LolLobbyLobbyMember[]
  premadeSizeAllowed?: boolean
  queueAvailability?: LolLobbyQueueAvailability
  /** @format int32 */
  queueId?: number
  removalReason?: LolLobbyLobbyRemovedFromGameReason
  requiredPositionCoverageMet?: boolean
  showPositionExcluder?: boolean
  showPositionSelector?: boolean
  specifiablePositionPreferences?: string[]
  wasKicked?: boolean
}

export interface LolLobbyLobbyBotChampion {
  active?: boolean
  botDifficulties?: LolLobbyLobbyBotDifficulty[]
  /** @format int32 */
  id?: number
  name?: string
}

export enum LolLobbyLobbyBotDifficulty {
  NONE = 'NONE',
  EASY = 'EASY',
  MEDIUM = 'MEDIUM',
  HARD = 'HARD',
  UBER = 'UBER',
  TUTORIAL = 'TUTORIAL',
  INTRO = 'INTRO'
}

export interface LolLobbyLobbyBotParams {
  botDifficulty?: LolLobbyLobbyBotDifficulty
  /** @format int32 */
  championId?: number
  teamId?: string
}

export interface LolLobbyLobbyChangeGameDto {
  customGameLobby?: LolLobbyLobbyCustomGameLobby
  gameCustomization?: Record<string, string>
  isCustom?: boolean
  /** @format int32 */
  queueId?: number
}

export interface LolLobbyLobbyChangeQueue {
  customGameLobby?: LolLobbyLobbyCustomGameLobby
  isCustom?: boolean
  /** @format int32 */
  queueId?: number
}

export interface LolLobbyLobbyCustomChampSelectStartResponse {
  failedPlayers?: LolLobbyLobbyCustomFailedPlayer[]
  success?: boolean
}

export interface LolLobbyLobbyCustomFailedPlayer {
  reason?: string
  /** @format int64 */
  summonerId?: number
  summonerName?: string
}

export interface LolLobbyLobbyCustomGame {
  /** @format int32 */
  filledPlayerSlots?: number
  /** @format int32 */
  filledSpectatorSlots?: number
  gameType?: string
  hasPassword?: boolean
  /** @format int64 */
  id?: number
  lobbyName?: string
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  maxPlayerSlots?: number
  /** @format int64 */
  maxSpectatorSlots?: number
  ownerSummonerName?: string
  partyId?: string
  passbackUrl?: string
  spectatorPolicy?: string
}

export interface LolLobbyLobbyCustomGameConfiguration {
  gameMode?: string
  gameServerRegion?: string
  gameTypeConfig?: LolLobbyQueueGameTypeConfig
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  maxPlayerCount?: number
  mutators?: LolLobbyQueueGameTypeConfig
  spectatorPolicy?: LolLobbyQueueCustomGameSpectatorPolicy
  /** @format int32 */
  teamSize?: number
  tournamentGameMode?: string
  tournamentPassbackDataPacket?: string
  tournamentPassbackUrl?: string
}

export interface LolLobbyLobbyCustomGameLobby {
  configuration?: LolLobbyLobbyCustomGameConfiguration
  /** @format int64 */
  gameId?: number
  lobbyName?: string
  lobbyPassword?: string
  practiceGameRewardsDisabledReasons?: string[]
  spectators?: LolLobbyLobbyMember[]
  teamOne?: LolLobbyLobbyMember[]
  teamTwo?: LolLobbyLobbyMember[]
}

export interface LolLobbyLobbyCustomJoinParameters {
  asSpectator?: boolean
  password?: string
}

export interface LolLobbyLobbyDto {
  canStartActivity?: boolean
  chatRoomId?: string
  chatRoomKey?: string
  gameConfig?: LolLobbyLobbyGameConfigDto
  invitations?: LolLobbyLobbyInvitationDto[]
  localMember?: LolLobbyLobbyParticipantDto
  members?: LolLobbyLobbyParticipantDto[]
  partyId?: string
  partyType?: string
  restrictions?: LolLobbyEligibilityRestriction[]
  warnings?: LolLobbyEligibilityRestriction[]
}

export interface LolLobbyLobbyGameConfigDto {
  allowablePremadeSizes?: number[]
  customLobbyName?: string
  customMutatorName?: string
  customRewardsDisabledReasons?: string[]
  customSpectatorPolicy?: LolLobbyQueueCustomGameSpectatorPolicy
  customSpectators?: LolLobbyLobbyParticipantDto[]
  customTeam100?: LolLobbyLobbyParticipantDto[]
  customTeam200?: LolLobbyLobbyParticipantDto[]
  gameMode?: string
  isCustom?: boolean
  isLobbyFull?: boolean
  isTeamBuilderManaged?: boolean
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  maxHumanPlayers?: number
  /** @format int32 */
  maxLobbySize?: number
  /** @format int32 */
  maxTeamSize?: number
  pickType?: string
  premadeSizeAllowed?: boolean
  /** @format int32 */
  queueId?: number
  showPositionSelector?: boolean
}

export interface LolLobbyLobbyInvitation {
  eligibility?: LolLobbyEligibility
  errorType?: string
  /** @format int64 */
  fromSummonerId?: number
  fromSummonerName?: string
  id?: string
  invitationMetaData?: Record<string, any>
  state?: LolLobbyLobbyInvitationState
  timestamp?: string
  /** @format int64 */
  toSummonerId?: number
  toSummonerName?: string
}

export interface LolLobbyLobbyInvitationDto {
  invitationId?: string
  invitationType?: LolLobbyInvitationType
  state?: LolLobbyLobbyInvitationState
  timestamp?: string
  /** @format int64 */
  toSummonerId?: number
  toSummonerName?: string
}

export enum LolLobbyLobbyInvitationState {
  Requested = 'Requested',
  Pending = 'Pending',
  Accepted = 'Accepted',
  Joined = 'Joined',
  Declined = 'Declined',
  Kicked = 'Kicked',
  OnHold = 'OnHold',
  Error = 'Error'
}

export interface LolLobbyLobbyLastQueuedLobby {
  canPlayAgain?: boolean
  members?: LolLobbyLobbyLastQueuedMember[]
  /** @format int32 */
  queueId?: number
  wasOwner?: boolean
}

export interface LolLobbyLobbyLastQueuedMember {
  /** @format int64 */
  id?: number
}

export interface LolLobbyLobbyMatchmakingLowPriorityDataResource {
  bustedLeaverAccessToken?: string
  penalizedSummonerIds?: number[]
  /** @format double */
  penaltyTime?: number
  /** @format double */
  penaltyTimeRemaining?: number
  reason?: string
}

export interface LolLobbyLobbyMatchmakingSearchErrorResource {
  errorType?: string
  /** @format int32 */
  id?: number
  message?: string
  /** @format int64 */
  penalizedSummonerId?: number
  /** @format double */
  penaltyTimeRemaining?: number
}

export interface LolLobbyLobbyMatchmakingSearchResource {
  errors?: LolLobbyLobbyMatchmakingSearchErrorResource[]
  lowPriorityData?: LolLobbyLobbyMatchmakingLowPriorityDataResource
  searchState?: LolLobbyLobbyMatchmakingSearchState
}

export enum LolLobbyLobbyMatchmakingSearchState {
  Invalid = 'Invalid',
  AbandonedLowPriorityQueue = 'AbandonedLowPriorityQueue',
  Canceled = 'Canceled',
  Searching = 'Searching',
  Found = 'Found',
  Error = 'Error',
  ServiceError = 'ServiceError',
  ServiceShutdown = 'ServiceShutdown'
}

export interface LolLobbyLobbyMember {
  autoFillEligible?: boolean
  autoFillProtectedForPromos?: boolean
  autoFillProtectedForSoloing?: boolean
  autoFillProtectedForStreaking?: boolean
  /** @format int32 */
  botChampionId?: number
  botDifficulty?: LolLobbyLobbyBotDifficulty
  canInviteOthers?: boolean
  excludedPositionPreference?: string
  /** @format int64 */
  id?: number
  isBot?: boolean
  isOwner?: boolean
  isSpectator?: boolean
  positionPreferences?: LolLobbyLobbyPositionPreferences
  showPositionExcluder?: boolean
  summonerInternalName?: string
}

export interface LolLobbyLobbyNotification {
  notificationId?: string
  notificationReason?: string
  summonerIds?: number[]
  /** @format int64 */
  timestamp?: number
}

export interface LolLobbyLobbyParticipantDto {
  allowedChangeActivity?: boolean
  allowedInviteOthers?: boolean
  allowedKickOthers?: boolean
  allowedStartActivity?: boolean
  allowedToggleInvite?: boolean
  autoFillEligible?: boolean
  autoFillProtectedForPromos?: boolean
  autoFillProtectedForSoloing?: boolean
  autoFillProtectedForStreaking?: boolean
  /** @format int32 */
  botChampionId?: number
  botDifficulty?: LolLobbyLobbyBotDifficulty
  botId?: string
  firstPositionPreference?: string
  isBot?: boolean
  isLeader?: boolean
  isSpectator?: boolean
  puuid?: string
  ready?: boolean
  secondPositionPreference?: string
  showGhostedBanner?: boolean
  /** @format int32 */
  summonerIconId?: number
  /** @format int64 */
  summonerId?: number
  summonerInternalName?: string
  /** @format int32 */
  summonerLevel?: number
  summonerName?: string
  /** @format int32 */
  teamId?: number
}

export enum LolLobbyLobbyPartyRewardType {
  Ip = 'Ip',
  Icon = 'Icon',
  None = 'None'
}

export interface LolLobbyLobbyPartyRewards {
  isCustom?: boolean
  isEnabled?: boolean
  partyRewards?: LolLobbyPartyReward[]
  /** @format int32 */
  queueId?: number
}

export interface LolLobbyLobbyPositionPreferences {
  firstPreference?: string
  secondPreference?: string
}

export enum LolLobbyLobbyRemovedFromGameReason {
  None = 'None',
  Kicked = 'Kicked',
  Disbanded = 'Disbanded',
  Left = 'Left',
  ServiceError = 'ServiceError',
  Other = 'Other',
  Timeout = 'Timeout',
  GameStartError = 'GameStartError',
  ServiceShutdown = 'ServiceShutdown'
}

export interface LolLobbyLobbyStatus {
  allowedPlayAgain?: boolean
  customSpectatorPolicy?: LolLobbyQueueCustomGameSpectatorPolicy
  invitedSummonerIds?: number[]
  isCustom?: boolean
  isLeader?: boolean
  isPracticeTool?: boolean
  isSpectator?: boolean
  lobbyId?: string
  memberSummonerIds?: number[]
  /** @format int32 */
  queueId?: number
}

export interface LolLobbyLobbyTimer {
  /** @format int64 */
  countdown?: number
  enabled?: boolean
}

export interface LolLobbyLoginSession {
  /** @format int64 */
  accountId?: number
  connected?: boolean
  gasToken?: Record<string, any>
  idToken?: string
  puuid?: string
  state?: LolLobbyLoginSessionStates
  /** @format int64 */
  summonerId?: number
  userAuthToken?: string
  username?: string
}

export enum LolLobbyLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export enum LolLobbyMatchmakingDodgeState {
  Invalid = 'Invalid',
  PartyDodged = 'PartyDodged',
  StrangerDodged = 'StrangerDodged'
}

export interface LolLobbyOpenPartyToggleAnalytics {
  /** @format int64 */
  elapsedTime?: number
  /** @format int64 */
  endTimestamp?: number
  endTransition?: string
  eventData?: Record<string, any>
  /** @format int64 */
  eventTimestamp?: number
  eventType?: string
  finalState?: string
  gameMode?: string
  initialState?: string
  /** @format int32 */
  numOfToggles?: number
  partyId?: string
  platformId?: string
  playerId?: string
  /** @format int64 */
  startTimestamp?: number
  startTransition?: string
}

export interface LolLobbyPartiesInvitationAnalytics {
  eventData?: Record<string, any>
  /** @format int64 */
  eventTimestamp?: number
  eventType?: string
  partyId?: string
  platformId?: string
  players?: LolLobbyPartiesInvitationPlayerAnalytics[]
}

export interface LolLobbyPartiesInvitationPlayerAnalytics {
  puuid?: string
  role?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolLobbyPartyChatDto {
  jid?: string
  multiUserChatJWT?: string
}

export interface LolLobbyPartyDto {
  activeRestrictions?: LolLobbyQueueRestrictionDto
  activityLocked?: boolean
  /** @format int64 */
  activityResumeUtcMillis?: number
  /** @format int64 */
  activityStartedUtcMillis?: number
  botParticipants?: LolLobbyBotParticipantDto[]
  chat?: LolLobbyPartyChatDto
  /** @format int64 */
  eligibilityHash?: number
  eligibilityRestrictions?: LolLobbyGatekeeperRestrictionDto[]
  eligibilityWarnings?: LolLobbyGatekeeperRestrictionDto[]
  gameMode?: LolLobbyGameModeDto
  /** @format int32 */
  maxPartySize?: number
  partyId?: string
  partyType?: string
  platformId?: string
  players?: LolLobbyPartyMemberDto[]
  /** @format int64 */
  version?: number
}

export enum LolLobbyPartyEogStatusCategory {
  KLeft = 'kLeft',
  KPlayAgain = 'kPlayAgain',
  KOnEog = 'kOnEog'
}

export interface LolLobbyPartyInviteAnalytics {
  eventData?: Record<string, any>
  /** @format int64 */
  eventTimestamp?: number
  eventType?: string
  /** @format int64 */
  fromSummonerId?: number
  gameMode?: string
  partyId?: string
  partyType?: string
  platformId?: string
  /** @format int64 */
  toSummonerId?: number
}

export interface LolLobbyPartyMemberDto {
  /** @format int64 */
  accountId?: number
  canInvite?: boolean
  gameMode?: LolLobbyGameModeDto
  /** @format int64 */
  inviteTimestamp?: number
  /** @format int64 */
  invitedBySummonerId?: number
  metadata?: LolLobbyPartyMemberMetadataDto
  partyId?: string
  /** @format int64 */
  partyVersion?: number
  platformId?: string
  puuid?: string
  ready?: boolean
  role?: LolLobbyPartyMemberRoleEnum
  /** @format int64 */
  summonerId?: number
  team?: string
}

export interface LolLobbyPartyMemberMetadataDto {
  /** @format int32 */
  championSelection?: number
  positionPref?: string[]
  properties?: Record<string, any>
  /** @format int32 */
  skinSelection?: number
}

export enum LolLobbyPartyMemberRoleEnum {
  LEADER = 'LEADER',
  MEMBER = 'MEMBER',
  INVITED = 'INVITED',
  HOLD = 'HOLD',
  KICKED = 'KICKED',
  DECLINED = 'DECLINED',
  NONE = 'NONE'
}

export interface LolLobbyPartyNotificationEnvelopeDto {
  player?: LolLobbyPlayerDto
  queueRestriction?: LolLobbyQueueRestrictionDto
}

export interface LolLobbyPartyPresenceData {
  /** @format int32 */
  maxPlayers?: number
  partyId?: string
  /** @format int32 */
  queueId?: number
  summoners?: number[]
}

export interface LolLobbyPartyQueueEligibilityDto {
  availableQueueIds?: number[]
  partyRestrictions?: LolLobbyGatekeeperRestrictionDto[]
}

export interface LolLobbyPartyReward {
  /** @format int32 */
  premadeSize?: number
  type?: LolLobbyLobbyPartyRewardType
  value?: string
}

export interface LolLobbyPartyStatusDto {
  eogPlayers?: string[]
  leftPlayers?: string[]
  /** @format int32 */
  partySize?: number
  readyPlayers?: string[]
}

export interface LolLobbyPlayerCollectionDto {
  players?: LolLobbyPlayerDto[]
}

export interface LolLobbyPlayerDto {
  /** @format int64 */
  accountId?: number
  /** @format int64 */
  createdAt?: number
  currentParty?: LolLobbyPartyDto
  /** @format int64 */
  eligibilityHash?: number
  parties?: LolLobbyPartyMemberDto[]
  platformId?: string
  puuid?: string
  registration?: LolLobbyRegistrationCredentials
  /** @format int64 */
  serverUtcMillis?: number
  /** @format int64 */
  summonerId?: number
  /** @format int64 */
  version?: number
}

export interface LolLobbyPlayerStatus {
  canInviteOthersAtEog?: boolean
  currentLobbyStatus?: LolLobbyLobbyStatus
  lastQueuedLobbyStatus?: LolLobbyLobbyStatus
}

export enum LolLobbyPlayerUpdateType {
  None = 'None',
  Direct = 'Direct',
  ServiceProxy = 'ServiceProxy',
  RMS = 'RMS'
}

export interface LolLobbyPremadeMemberDto {
  displayName?: string
  partyId?: string
  puuid?: string
  role?: LolLobbyPartyMemberRoleEnum
  /** @format int64 */
  summonerId?: number
}

export interface LolLobbyPremadePartyDto {
  commsEnabled?: boolean
  partyId?: string
  players?: Record<string, LolLobbyPremadeMemberDto>
}

export interface LolLobbyPremadeRelationshipAnalytics {
  eventData?: Record<string, any>
  /** @format int64 */
  eventTimestamp?: number
  eventType?: string
  friendPlayers?: string[]
  platformId?: string
  premadePlayers?: string[]
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolLobbyQueue {
  allowablePremadeSizes?: number[]
  areFreeChampionsAllowed?: boolean
  assetMutator?: string
  category?: LolLobbyQueueGameCategory
  /** @format int32 */
  championsRequiredToPlay?: number
  description?: string
  detailedDescription?: string
  gameMode?: string
  gameTypeConfig?: LolLobbyQueueGameTypeConfig
  /** @format int32 */
  id?: number
  isRanked?: boolean
  isTeamBuilderManaged?: boolean
  isTeamOnly?: boolean
  /** @format int64 */
  lastToggledOffTime?: number
  /** @format int64 */
  lastToggledOnTime?: number
  /** @format int32 */
  mapId?: number
  maxDivisionForPremadeSize2?: string
  /** @format int32 */
  maxLevel?: number
  /** @format int32 */
  maxSummonerLevelForFirstWinOfTheDay?: number
  maxTierForPremadeSize2?: string
  /** @format int32 */
  maximumParticipantListSize?: number
  /** @format int32 */
  minLevel?: number
  /** @format int32 */
  minimumParticipantListSize?: number
  name?: string
  /** @format int32 */
  numPlayersPerTeam?: number
  queueAvailability?: LolLobbyQueueAvailability
  queueRewards?: LolLobbyQueueReward
  removalFromGameAllowed?: boolean
  /** @format int32 */
  removalFromGameDelayMinutes?: number
  shortName?: string
  showPositionSelector?: boolean
  spectatorEnabled?: boolean
  type?: string
}

export enum LolLobbyQueueAvailability {
  Available = 'Available',
  PlatformDisabled = 'PlatformDisabled',
  DoesntMeetRequirements = 'DoesntMeetRequirements'
}

export interface LolLobbyQueueCustomGame {
  queueAvailability?: LolLobbyQueueAvailability
}

export enum LolLobbyQueueCustomGameSpectatorPolicy {
  NotAllowed = 'NotAllowed',
  LobbyAllowed = 'LobbyAllowed',
  FriendsAllowed = 'FriendsAllowed',
  AllAllowed = 'AllAllowed'
}

export enum LolLobbyQueueGameCategory {
  None = 'None',
  Custom = 'Custom',
  PvP = 'PvP',
  VersusAi = 'VersusAi',
  Alpha = 'Alpha'
}

export interface LolLobbyQueueGameTypeConfig {
  advancedLearningQuests?: boolean
  allowTrades?: boolean
  banMode?: string
  /** @format int32 */
  banTimerDuration?: number
  battleBoost?: boolean
  crossTeamChampionPool?: boolean
  deathMatch?: boolean
  doNotRemove?: boolean
  duplicatePick?: boolean
  exclusivePick?: boolean
  gameModeOverride?: string
  /** @format int64 */
  id?: number
  learningQuests?: boolean
  /** @format int32 */
  mainPickTimerDuration?: number
  /** @format int32 */
  maxAllowableBans?: number
  name?: string
  /** @format int32 */
  numPlayersPerTeamOverride?: number
  onboardCoopBeginner?: boolean
  pickMode?: string
  /** @format int32 */
  postPickTimerDuration?: number
  reroll?: boolean
  teamChampionPool?: boolean
}

export interface LolLobbyQueueRestrictionDto {
  gatekeeperRestrictions?: LolLobbyGatekeeperRestrictionDto[]
}

export interface LolLobbyQueueReward {
  isChampionPointsEnabled?: boolean
  isIpEnabled?: boolean
  isXpEnabled?: boolean
  partySizeIpRewards?: number[]
}

export interface LolLobbyRankedPositionInfoDTO {
  queue?: string
  rank?: string
  tier?: string
}

export interface LolLobbyRankedStatsUnsignedDTO {
  highestPreviousSeasonEndRank?: string
  highestPreviousSeasonEndTier?: string
  jwt?: string
  queues?: LolLobbyRankedPositionInfoDTO[]
}

export interface LolLobbyReadyDto {
  ready?: boolean
}

export interface LolLobbyReceivedInvitationDto {
  canAcceptInvitation?: boolean
  /** @format int64 */
  fromSummonerId?: number
  fromSummonerName?: string
  gameConfig?: LolLobbyReceivedInvitationGameConfigDto
  invitationId?: string
  invitationType?: LolLobbyInvitationType
  restrictions?: LolLobbyEligibilityRestriction[]
  state?: LolLobbyLobbyInvitationState
  timestamp?: string
}

export interface LolLobbyReceivedInvitationGameConfigDto {
  gameMode?: string
  inviteGameType?: string
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  queueId?: number
}

export interface LolLobbyRegistrationCredentials {
  gameClientVersion?: string
  inventoryToken?: string
  inventoryTokens?: string[]
  rankedOverviewToken?: string
  simpleInventoryToken?: string
  summonerToken?: string
  userInfoToken?: string
}

export interface LolLobbyRegistrationStatus {
  complete?: boolean
  errorCodes?: string[]
}

export interface LolLobbyRiotMessagingServiceMessage {
  payload?: string
  resource?: string
  service?: string
  /** @format int64 */
  timestamp?: number
  version?: string
}

export interface LolLobbyServiceProxyPayload {
  body?: string
  method?: string
  url?: string
}

export interface LolLobbySummoner {
  /** @format int64 */
  accountId?: number
  displayName?: string
  internalName?: string
  /** @format int32 */
  profileIconId?: number
  puuid?: string
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolLobbyTeamBuilderActionV1 {
  /** @format int32 */
  actionId?: number
  /** @format int32 */
  actorCellId?: number
  /** @format int32 */
  championId?: number
  completed?: boolean
  /** @format int64 */
  duration?: number
  type?: string
}

export interface LolLobbyTeamBuilderAfkCheckStateV1 {
  additionalInventoryTypes?: string[]
  afkReady?: boolean
  compressAfkCheckPayload?: boolean
  inventoryDraft?: LolLobbyTeamBuilderTbdInventory
  /** @format int32 */
  maxAfkMillis?: number
  multiUserChatJWT?: string
  /** @format int32 */
  remainingAfkMillis?: number
}

export interface LolLobbyTeamBuilderBackwardsTransitionInfoV1 {
  backwardsTransitionReason?: string
  initiatorSummonerIds?: number[]
}

export interface LolLobbyTeamBuilderCellV1 {
  assignedPosition?: string
  /** @format int32 */
  cellId?: number
  /** @format int32 */
  championId?: number
  /** @format int32 */
  championPickIntent?: number
  entitledFeatureType?: string
  /** @format int32 */
  skinId?: number
  /** @format int32 */
  spell1Id?: number
  /** @format int32 */
  spell2Id?: number
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  teamId?: number
}

export interface LolLobbyTeamBuilderCellsV1 {
  alliedTeam?: LolLobbyTeamBuilderCellV1[]
  enemyTeam?: LolLobbyTeamBuilderCellV1[]
}

export interface LolLobbyTeamBuilderCeremonyV1 {
  /** @format int64 */
  duration?: number
  name?: string
}

export interface LolLobbyTeamBuilderChampSelectAction {
  /** @format int64 */
  actorCellId?: number
  /** @format int32 */
  championId?: number
  completed?: boolean
  /** @format int64 */
  id?: number
  isAllyAction?: boolean
  isInProgress?: boolean
  type?: string
}

export interface LolLobbyTeamBuilderChampSelectChatRoomDetails {
  chatRoomName?: string
  chatRoomPassword?: string
}

export interface LolLobbyTeamBuilderChampSelectDevPanelData {
  /** @format int64 */
  counter?: number
  /** @format int64 */
  dtoIndex?: number
  /** @format int32 */
  queueId?: number
  /** @format int64 */
  teamIdSuffix?: number
}

export interface LolLobbyTeamBuilderChampSelectMySelection {
  /** @format int32 */
  selectedSkinId?: number
  /** @format int64 */
  spell1Id?: number
  /** @format int64 */
  spell2Id?: number
  /** @format int64 */
  wardSkinId?: number
}

export interface LolLobbyTeamBuilderChampSelectPlayerSelection {
  assignedPosition?: string
  /** @format int64 */
  cellId?: number
  /** @format int32 */
  championId?: number
  /** @format int32 */
  championPickIntent?: number
  entitledFeatureType?: string
  playerType?: string
  /** @format int32 */
  selectedSkinId?: number
  /** @format int64 */
  spell1Id?: number
  /** @format int64 */
  spell2Id?: number
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  team?: number
  /** @format int64 */
  wardSkinId?: number
}

export interface LolLobbyTeamBuilderChampSelectReport {
  categories?: string[]
  comment?: string
  location?: string
  match_token?: string
  offender_puuid?: string
}

export interface LolLobbyTeamBuilderChampSelectReportV2 {
  categories?: string[]
  comment?: string
  location?: string
  offenderId?: string
  token?: string
  tokenType?: string
}

export interface LolLobbyTeamBuilderChampSelectSession {
  actions?: Record<string, any>[]
  allowBattleBoost?: boolean
  allowDuplicatePicks?: boolean
  allowLockedEvents?: boolean
  allowRerolling?: boolean
  allowSkinSelection?: boolean
  benchChampionIds?: number[]
  benchEnabled?: boolean
  /** @format int32 */
  boostableSkinCount?: number
  chatDetails?: LolLobbyTeamBuilderChampSelectChatRoomDetails
  /** @format int64 */
  counter?: number
  entitledFeatureState?: LolLobbyTeamBuilderEntitledFeatureState
  /** @format int64 */
  gameId?: number
  hasSimultaneousBans?: boolean
  hasSimultaneousPicks?: boolean
  isSpectating?: boolean
  /** @format int64 */
  localPlayerCellId?: number
  /** @format int32 */
  lockedEventIndex?: number
  myTeam?: LolLobbyTeamBuilderChampSelectPlayerSelection[]
  /** @format int64 */
  recoveryCounter?: number
  /** @format int32 */
  rerollsRemaining?: number
  skipChampionSelect?: boolean
  theirTeam?: LolLobbyTeamBuilderChampSelectPlayerSelection[]
  timer?: LolLobbyTeamBuilderChampSelectTimer
  trades?: LolLobbyTeamBuilderChampSelectTradeContract[]
}

export interface LolLobbyTeamBuilderChampSelectTimer {
  /** @format int64 */
  adjustedTimeLeftInPhase?: number
  /** @format int64 */
  internalNowInEpochMs?: number
  isInfinite?: boolean
  phase?: string
  /** @format int64 */
  totalTimeInPhase?: number
}

export interface LolLobbyTeamBuilderChampSelectTradeContract {
  /** @format int64 */
  cellId?: number
  /** @format int64 */
  id?: number
  state?: LolLobbyTeamBuilderChampSelectTradeState
}

export enum LolLobbyTeamBuilderChampSelectTradeState {
  AVAILABLE = 'AVAILABLE',
  BUSY = 'BUSY',
  INVALID = 'INVALID',
  RECEIVED = 'RECEIVED',
  SENT = 'SENT'
}

export interface LolLobbyTeamBuilderChampionBenchStateV1 {
  benchEnabled?: boolean
  championIds?: number[]
}

export interface LolLobbyTeamBuilderChampionSelectPreferences {
  skins?: Record<string, number>
  spells?: Record<string, Record<string, any>>
}

export interface LolLobbyTeamBuilderChampionSelectStateV1 {
  actionSetList?: Record<string, any>[]
  allowDuplicatePicks?: boolean
  allowOptingOutOfBanning?: boolean
  allowSkinSelection?: boolean
  battleBoostState?: LolLobbyTeamBuilderTeamBuilderBoostInfo
  cells?: LolLobbyTeamBuilderCellsV1
  ceremoniesByActionSetIndex?: Record<string, Record<string, any>>
  championBenchState?: LolLobbyTeamBuilderChampionBenchStateV1
  /** @format int32 */
  currentActionSetIndex?: number
  /** @format int64 */
  currentTimeRemainingMillis?: number
  /** @format int64 */
  currentTotalTimeMillis?: number
  entitledFeatureState?: LolLobbyTeamBuilderEntitledFeatureStateV1
  inventoryDraft?: LolLobbyTeamBuilderTbdInventory
  isSpectating?: boolean
  lcuSkipsSendingLoadoutsGco?: boolean
  /** @format int32 */
  localPlayerCellId?: number
  lockedEventsState?: LolLobbyTeamBuilderLockedEventsStateV1
  pickIntentClearedReason?: string
  rerollState?: LolLobbyTeamBuilderRerollStateV1
  skipChampionSelect?: boolean
  subphase?: string
  teamChatRoomId?: string
  teamId?: string
  trades?: LolLobbyTeamBuilderTradeV1[]
}

export interface LolLobbyTeamBuilderCountdownTimer {
  /** @format int32 */
  counter?: number
  phaseName?: string
  /** @format int64 */
  timer?: number
}

export interface LolLobbyTeamBuilderEntitledFeatureState {
  /** @format int32 */
  additionalRerolls?: number
  unlockedSkinIds?: number[]
}

export interface LolLobbyTeamBuilderEntitledFeatureStateV1 {
  /** @format int32 */
  additionalRerolls?: number
  unlockedSkinsState?: LolLobbyTeamBuilderUnlockedSkinsStateV1
}

export interface LolLobbyTeamBuilderGameModeSpellList {
  spells?: number[]
}

export interface LolLobbyTeamBuilderGameflowGameClient {
  running?: boolean
}

export interface LolLobbyTeamBuilderGameflowGameMap {
  perPositionDisallowedSummonerSpells?: Record<string, LolLobbyTeamBuilderGameModeSpellList>
  perPositionRequiredSummonerSpells?: Record<string, LolLobbyTeamBuilderGameModeSpellList>
}

export interface LolLobbyTeamBuilderGameflowSession {
  gameClient?: LolLobbyTeamBuilderGameflowGameClient
  map?: LolLobbyTeamBuilderGameflowGameMap
}

export interface LolLobbyTeamBuilderGatekeeperRestricted {
  gatekeeperRestrictions?: LolLobbyTeamBuilderGatekeeperRestriction[]
}

export interface LolLobbyTeamBuilderGatekeeperRestriction {
  payload?: string
  /** @format int32 */
  queueId?: number
  reason?: string
  /** @format int32 */
  remainingMillis?: number
  /** @format int64 */
  summonerId?: number
}

export interface LolLobbyTeamBuilderLeaverBusterAbandoned {
  abandonerName?: string
}

export interface LolLobbyTeamBuilderLobby {
  allowablePremadeSizes?: number[]
  autoFillEligible?: boolean
  autoFillProtectedForPromos?: boolean
  autoFillProtectedForStreaking?: boolean
  canStartMatchmaking?: boolean
  chatRoomId?: string
  chatRoomKey?: string
  invitationId?: string
  invitations?: LolLobbyTeamBuilderLobbyInvitation[]
  isTeamBuilderManaged?: boolean
  localMember?: LolLobbyTeamBuilderLobbyMember
  members?: LolLobbyTeamBuilderLobbyMember[]
  premadeSizeAllowed?: boolean
  /** @format int32 */
  queueId?: number
  removalReason?: LolLobbyTeamBuilderLobbyRemovedFromGameReason
  requiredPositionCoverageMet?: boolean
  showPositionExcluder?: boolean
  showPositionSelector?: boolean
  specifiablePositionPreferences?: string[]
  wasKicked?: boolean
}

export interface LolLobbyTeamBuilderLobbyCountdownTimer {
  /** @format int32 */
  counter?: number
  phaseName?: string
  /** @format int64 */
  timer?: number
}

export interface LolLobbyTeamBuilderLobbyInvitation {
  invitationMetaData?: Record<string, any>
}

export interface LolLobbyTeamBuilderLobbyMember {
  autoFillEligible?: boolean
  autoFillProtectedForPromos?: boolean
  autoFillProtectedForSoloing?: boolean
  autoFillProtectedForStreaking?: boolean
  canInviteOthers?: boolean
  excludedPositionPreference?: string
  /** @format int64 */
  id?: number
  isOwner?: boolean
  positionPreferences?: LolLobbyTeamBuilderLobbyPositionPreferences
  showPositionExcluder?: boolean
}

export interface LolLobbyTeamBuilderLobbyPositionPreferences {
  firstPreference?: string
  secondPreference?: string
}

export interface LolLobbyTeamBuilderLobbyPositionPreferencesV2 {
  excludedPreference?: string
  firstPreference?: string
  secondPreference?: string
}

export enum LolLobbyTeamBuilderLobbyRemovedFromGameReason {
  None = 'None',
  Kicked = 'Kicked',
  Disbanded = 'Disbanded',
  Left = 'Left',
  ServiceError = 'ServiceError',
  Other = 'Other',
  Timeout = 'Timeout',
  GameStartError = 'GameStartError',
  ServiceShutdown = 'ServiceShutdown'
}

export interface LolLobbyTeamBuilderLockedEventsStateV1 {
  allowLockedEvents?: boolean
  /** @format int32 */
  lockedEventIndex?: number
}

export interface LolLobbyTeamBuilderLoginSession {
  /** @format int64 */
  accountId?: number
  connected?: boolean
  state?: LolLobbyTeamBuilderLoginSessionState
  /** @format int64 */
  summonerId?: number
}

export enum LolLobbyTeamBuilderLoginSessionState {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolLobbyTeamBuilderMatchmakingDodgeData {
  /** @format int64 */
  dodgerId?: number
  state?: LolLobbyTeamBuilderMatchmakingDodgeState
}

export enum LolLobbyTeamBuilderMatchmakingDodgeState {
  Invalid = 'Invalid',
  PartyDodged = 'PartyDodged',
  StrangerDodged = 'StrangerDodged',
  TournamentDodged = 'TournamentDodged'
}

export enum LolLobbyTeamBuilderMatchmakingDodgeWarning {
  None = 'None',
  Warning = 'Warning',
  Penalty = 'Penalty'
}

export interface LolLobbyTeamBuilderMatchmakingLowPriorityData {
  bustedLeaverAccessToken?: string
  penalizedSummonerIds?: number[]
  /** @format double */
  penaltyTime?: number
  /** @format double */
  penaltyTimeRemaining?: number
}

export interface LolLobbyTeamBuilderMatchmakingReadyCheckResource {
  declinerIds?: number[]
  dodgeWarning?: LolLobbyTeamBuilderMatchmakingDodgeWarning
  playerResponse?: LolLobbyTeamBuilderMatchmakingReadyCheckResponse
  state?: LolLobbyTeamBuilderMatchmakingReadyCheckState
  /** @format float */
  timer?: number
}

export enum LolLobbyTeamBuilderMatchmakingReadyCheckResponse {
  None = 'None',
  Accepted = 'Accepted',
  Declined = 'Declined'
}

export enum LolLobbyTeamBuilderMatchmakingReadyCheckState {
  Invalid = 'Invalid',
  InProgress = 'InProgress',
  EveryoneReady = 'EveryoneReady',
  StrangerNotReady = 'StrangerNotReady',
  PartyNotReady = 'PartyNotReady',
  Error = 'Error'
}

export interface LolLobbyTeamBuilderMatchmakingSearch {
  searchState?: LolLobbyTeamBuilderMatchmakingSearchState
}

export interface LolLobbyTeamBuilderMatchmakingSearchErrorResource {
  errorType?: string
  /** @format int32 */
  id?: number
  message?: string
  /** @format int64 */
  penalizedSummonerId?: number
  /** @format double */
  penaltyTimeRemaining?: number
}

export interface LolLobbyTeamBuilderMatchmakingSearchResource {
  dodgeData?: LolLobbyTeamBuilderMatchmakingDodgeData
  errors?: LolLobbyTeamBuilderMatchmakingSearchErrorResource[]
  /** @format float */
  estimatedQueueTime?: number
  isCurrentlyInQueue?: boolean
  lobbyId?: string
  lowPriorityData?: LolLobbyTeamBuilderMatchmakingLowPriorityData
  /** @format int32 */
  queueId?: number
  readyCheck?: LolLobbyTeamBuilderMatchmakingReadyCheckResource
  searchState?: LolLobbyTeamBuilderMatchmakingSearchState
  /** @format float */
  timeInQueue?: number
}

export enum LolLobbyTeamBuilderMatchmakingSearchState {
  Invalid = 'Invalid',
  AbandonedLowPriorityQueue = 'AbandonedLowPriorityQueue',
  Canceled = 'Canceled',
  Searching = 'Searching',
  Found = 'Found',
  Error = 'Error',
  ServiceError = 'ServiceError',
  ServiceShutdown = 'ServiceShutdown'
}

export interface LolLobbyTeamBuilderQueue {
  allowablePremadeSizes?: number[]
  areFreeChampionsAllowed?: boolean
  assetMutator?: string
  category?: LolLobbyTeamBuilderQueueGameCategory
  /** @format int32 */
  championsRequiredToPlay?: number
  description?: string
  detailedDescription?: string
  gameMode?: string
  gameTypeConfig?: LolLobbyTeamBuilderQueueGameTypeConfig
  /** @format int32 */
  id?: number
  isRanked?: boolean
  isTeamBuilderManaged?: boolean
  isTeamOnly?: boolean
  /** @format int64 */
  lastToggledOffTime?: number
  /** @format int64 */
  lastToggledOnTime?: number
  /** @format int32 */
  mapId?: number
  /** @format int32 */
  maxLevel?: number
  /** @format int32 */
  maxSummonerLevelForFirstWinOfTheDay?: number
  /** @format int32 */
  maximumParticipantListSize?: number
  /** @format int32 */
  minLevel?: number
  /** @format int32 */
  minimumParticipantListSize?: number
  name?: string
  /** @format int32 */
  numPlayersPerTeam?: number
  queueAvailability?: LolLobbyTeamBuilderQueueAvailability
  queueRewards?: LolLobbyTeamBuilderQueueReward
  removalFromGameAllowed?: boolean
  /** @format int32 */
  removalFromGameDelayMinutes?: number
  shortName?: string
  showPositionSelector?: boolean
  spectatorEnabled?: boolean
  type?: string
}

export enum LolLobbyTeamBuilderQueueAvailability {
  Available = 'Available',
  PlatformDisabled = 'PlatformDisabled',
  DoesntMeetRequirements = 'DoesntMeetRequirements'
}

export enum LolLobbyTeamBuilderQueueGameCategory {
  None = 'None',
  Custom = 'Custom',
  PvP = 'PvP',
  VersusAi = 'VersusAi',
  Alpha = 'Alpha'
}

export interface LolLobbyTeamBuilderQueueGameTypeConfig {
  advancedLearningQuests?: boolean
  allowTrades?: boolean
  banMode?: string
  /** @format int32 */
  banTimerDuration?: number
  battleBoost?: boolean
  crossTeamChampionPool?: boolean
  deathMatch?: boolean
  doNotRemove?: boolean
  duplicatePick?: boolean
  exclusivePick?: boolean
  /** @format int64 */
  id?: number
  learningQuests?: boolean
  /** @format int32 */
  mainPickTimerDuration?: number
  /** @format int32 */
  maxAllowableBans?: number
  name?: string
  onboardCoopBeginner?: boolean
  pickMode?: string
  /** @format int32 */
  postPickTimerDuration?: number
  reroll?: boolean
  teamChampionPool?: boolean
}

export interface LolLobbyTeamBuilderQueueReward {
  isChampionPointsEnabled?: boolean
  isIpEnabled?: boolean
  isXpEnabled?: boolean
  partySizeIpRewards?: number[]
}

export interface LolLobbyTeamBuilderRerollStateV1 {
  allowRerolling?: boolean
  /** @format int32 */
  rerollsRemaining?: number
}

export interface LolLobbyTeamBuilderSettingCategoryResource {
  data?: LolLobbyTeamBuilderChampionSelectPreferences
  /** @format int32 */
  schemaVersion?: number
}

export interface LolLobbyTeamBuilderTBDMatchmakingState {
  backwardsTransitionReason?: string
  /** @format int64 */
  estimatedMatchmakingTimeMillis?: number
  /** @format int64 */
  timeInMatchmakingMillis?: number
}

export interface LolLobbyTeamBuilderTbLobbyStateResource {
  afkCheckState?: LolLobbyTeamBuilderAfkCheckStateV1
  championSelectState?: LolLobbyTeamBuilderChampionSelectStateV1
  /** @format int32 */
  counter?: number
  /** @format int64 */
  gameId?: number
  matchmakingState?: LolLobbyTeamBuilderTBDMatchmakingState
  phaseName?: string
  /** @format int32 */
  queueId?: number
  /** @format int32 */
  recoveryCounter?: number
}

export interface LolLobbyTeamBuilderTbRemovedFromServiceNotification {
  backwardsTransitionInfo?: LolLobbyTeamBuilderBackwardsTransitionInfoV1
  reason?: string
}

export interface LolLobbyTeamBuilderTbdInventory {
  allChampionIds?: number[]
  disabledChampionIds?: number[]
  initialSpellIds?: number[]
  lastSelectedSkinIdByChampionId?: Record<string, number>
  skinIds?: number[]
  spellIds?: number[]
}

export interface LolLobbyTeamBuilderTeamBoost {
  availableSkins?: number[]
  /** @format int64 */
  ipReward?: number
  /** @format int64 */
  ipRewardForPurchaser?: number
  /** @format int64 */
  price?: number
  skinUnlockMode?: string
  /** @format int64 */
  summonerId?: number
  unlocked?: boolean
}

export interface LolLobbyTeamBuilderTeamBuilderBoostInfo {
  /** @format int64 */
  activatorCellId?: number
  allowBattleBoost?: boolean
  battleBoostActivated?: boolean
  /** @format int32 */
  boostableSkinCount?: number
  /** @format int64 */
  cost?: number
  unlockedSkinIds?: number[]
}

export interface LolLobbyTeamBuilderTeambuilderLeagueEdgeResponse {
  payload?: LolLobbyTeamBuilderTbLobbyStateResource
  status?: string
}

export interface LolLobbyTeamBuilderTradeV1 {
  /** @format int32 */
  cellId?: number
  /** @format int32 */
  id?: number
  state?: string
}

export interface LolLobbyTeamBuilderUnlockedSkinsStateV1 {
  unlockedSkinIds?: number[]
}

export interface LolLobbyUserInfoToken {
  userInfo?: string
}

export interface LolLobbyUserResource {
  lol?: Record<string, string>
  /** @format int64 */
  summonerId?: number
}

export interface LolLoginAccessToken {
  /** @format int64 */
  expiry?: number
  scopes?: string[]
  token?: string
}

export interface LolLoginAccountStateResource {
  state?: LolLoginAccountStateType
}

export enum LolLoginAccountStateType {
  CREATING = 'CREATING',
  ENABLED = 'ENABLED',
  TRANSFERRING_OUT = 'TRANSFERRING_OUT',
  TRANSFERRING_IN = 'TRANSFERRING_IN',
  TRANSFERRED_OUT = 'TRANSFERRED_OUT',
  GENERATING = 'GENERATING'
}

export interface LolLoginAuthorization {
  /** @format int64 */
  currentAccountId?: number
  currentPlatformId?: string
  subject?: string
}

export enum LolLoginConfigReadinessEnum {
  NotReady = 'NotReady',
  Ready = 'Ready',
  Disabled = 'Disabled'
}

export interface LolLoginConfigStatus {
  readiness?: LolLoginConfigReadinessEnum
}

export enum LolLoginConfigType {
  Public = 'public',
  Player = 'player'
}

export interface LolLoginCrashReportingEnvironment {
  environment?: string
  userId?: string
  userName?: string
}

export interface LolLoginIdToken {
  /** @format int64 */
  expiry?: number
  token?: string
}

export interface LolLoginLcdsResponse {
  body?: Record<string, any>
  typeName?: string
}

export interface LolLoginLcdsServiceProxyResponse {
  compressedPayload?: boolean
  messageId?: string
  methodName?: string
  payload?: string
  serviceName?: string
  status?: string
}

export enum LolLoginLeagueSessionStatus {
  UNINITIALIZED = 'UNINITIALIZED',
  INITIALIZED = 'INITIALIZED',
  EXPIRED = 'EXPIRED',
  DUPLICATED = 'DUPLICATED',
  ANTI_ADDICTION_EXPIRED = 'ANTI_ADDICTION_EXPIRED'
}

export interface LolLoginLeagueSessionTokenEnvelope {
  logoutOnFailure?: boolean
  token?: string
}

export enum LolLoginLoginConnectionMode {
  Preparing = 'Preparing',
  Legacy = 'Legacy',
  Partner = 'Partner',
  RiotClient = 'RiotClient'
}

export interface LolLoginLoginConnectionState {
  isPartnerRiotClient?: boolean
  isUsingDeveloperAuthToken?: boolean
  mode?: LolLoginLoginConnectionMode
}

export interface LolLoginLoginError {
  description?: string
  id?: string
  messageId?: string
}

export interface LolLoginLoginQueue {
  /** @format int64 */
  approximateWaitTimeSeconds?: number
  /** @format int64 */
  estimatedPositionInQueue?: number
  isPositionCapped?: boolean
}

export interface LolLoginLoginSession {
  /** @format int64 */
  accountId?: number
  connected?: boolean
  error?: LolLoginLoginError
  gasToken?: Record<string, any>
  idToken?: string
  isInLoginQueue?: boolean
  isNewPlayer?: boolean
  puuid?: string
  state?: LolLoginLoginSessionStates
  /** @format int64 */
  summonerId?: number
  userAuthToken?: string
  username?: string
}

export enum LolLoginLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolLoginLoginSessionWallet {
  /** @format int64 */
  ip?: number
  /** @format int64 */
  rp?: number
}

export interface LolLoginPlatformGeneratedCredentials {
  gasToken?: Record<string, any>
  password?: string
  username?: string
}

export interface LolLoginRSOConfigReadyState {
  ready?: boolean
}

export interface LolLoginRSOPlayerCredentials {
  password?: string
  platformId?: string
  username?: string
}

export interface LolLoginSummonerCreatedResource {
  /** @format int64 */
  summonerId?: number
}

export interface LolLoginSummonerSessionResource {
  displayName?: string
  isNewPlayer?: boolean
  /** @format int64 */
  summonerId?: number
}

export interface LolLoginUsernameAndPassword {
  password?: string
  username?: string
}

export interface LolLootAccountIdAndSummonerId {
  /** @format int64 */
  summonerId?: number
}

export interface LolLootCollectionsChampionMinimal {
  /** @format int32 */
  id?: number
  ownership?: LolLootCollectionsOwnership
}

export interface LolLootCollectionsChampionSkinMinimal {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  id?: number
  name?: string
  ownership?: LolLootCollectionsOwnership
  splashPath?: string
  tilePath?: string
}

export interface LolLootCollectionsEmote {
  /** @format int64 */
  itemId?: number
  ownershipType?: LolLootInventoryOwnership
}

export interface LolLootCollectionsOwnership {
  freeToPlayReward?: boolean
  owned?: boolean
  rental?: LolLootCollectionsRental
}

export interface LolLootCollectionsRental {
  rented?: boolean
}

export interface LolLootCollectionsStatstone {
  /** @format int64 */
  itemId?: number
  ownershipType?: LolLootInventoryOwnership
}

export interface LolLootCollectionsSummonerIcon {
  /** @format int32 */
  itemId?: number
}

export interface LolLootCollectionsWardSkin {
  /** @format int64 */
  id?: number
  name?: string
  ownership?: LolLootCollectionsOwnership
  wardImagePath?: string
  wardShadowImagePath?: string
}

export interface LolLootContextMenu {
  actionType?: string
  enabled?: boolean
  /** @format int32 */
  essenceQuantity?: number
  essenceType?: string
  name?: string
  recipeContextMenuAction?: string
  recipeDescription?: string
  requiredOthers?: string
  /** @format int32 */
  requiredOthersCount?: number
  requiredOthersName?: string
  requiredTokens?: string
}

export interface LolLootCounter {
  direction?: string
  groupId?: string
  id?: string
  name?: string
  /** @format int64 */
  startValue?: number
}

export interface LolLootCounterInstance {
  counterId?: string
  /** @format int64 */
  counterValue?: number
  groupId?: string
  ownerId?: string
  productId?: string
}

export interface LolLootCurrencyConfiguration {
  currenciesUsingCapWallets?: string[]
}

export interface LolLootEntityInstance {
  counters?: LolLootCounterInstance[]
  groupId?: string
  milestones?: LolLootMilestoneInstance[]
}

export interface LolLootGameDataSummonerEmote {
  description?: string
  /** @format int64 */
  id?: number
  inventoryIcon?: string
  name?: string
}

export interface LolLootGameDataSummonerIcon {
  /** @format int32 */
  id?: number
  imagePath?: string
}

export enum LolLootGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolLootGameflowSession {
  phase?: LolLootGameflowPhase
}

export enum LolLootGrantStatus {
  PENDING_FULFILLMENT = 'PENDING_FULFILLMENT',
  PENDING_SELECTION = 'PENDING_SELECTION',
  FULFILLED = 'FULFILLED',
  FAILED = 'FAILED'
}

export interface LolLootGrantorDescription {
  appName?: string
  entityId?: string
}

export interface LolLootGroup {
  counters?: LolLootCounter[]
  id?: string
  milestones?: LolLootMilestone[]
  name?: string
  productId?: string
  repeat?: LolLootRepeat
}

export enum LolLootInventoryOwnership {
  OWNED = 'OWNED',
  RENTED = 'RENTED',
  F2P = 'F2P'
}

export enum LolLootItemOwnershipStatus {
  NONE = 'NONE',
  FREE = 'FREE',
  RENTAL = 'RENTAL',
  OWNED = 'OWNED'
}

export interface LolLootLedgerConfigGdsResource {
  counters?: LolLootMilestonesLedgerCounterGdsResource[]
  id?: string
  milestones?: LolLootLedgerConfigMilestoneGdsResource[]
  name?: string
  repeat?: LolLootMilestonesLedgerConfigRepeatGdsResource
}

export interface LolLootLedgerConfigMilestoneGdsResource {
  counter?: LolLootMilestonesLedgerCounterGdsResource
  id?: string
  name?: string
  properties?: LolLootLedgerConfigMilestonePropertiesGdsResource[]
  /** @format int64 */
  triggerValue?: number
}

export interface LolLootLedgerConfigMilestonePropertiesGdsResource {
  description?: string
  id?: string
  name?: string
  rewardStrategy?: string
  rewards?: LolLootLedgerConfigMilestoneRewardGdsResource[]
}

export interface LolLootLedgerConfigMilestoneRewardGdsResource {
  id?: string
  legacyLootItem?: string
  lootItemToGrant?: LolLootMilestoneLootItemRewardGdsResource
  /** @format int32 */
  quantity?: number
  rewardType?: string
}

export interface LolLootLoginDataPacket {
  simpleMessages?: LolLootLoginSimpleMessage[]
}

export interface LolLootLoginSession {
  /** @format int64 */
  accountId?: number
  state?: LolLootLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolLootLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolLootLoginSimpleMessage {
  /** @format int64 */
  accountId?: number
  msgId?: string
  params?: string[]
  type?: string
}

export interface LolLootLootBundleContentGdsResource {
  localizedDescription?: string
}

export interface LolLootLootBundleGdsResource {
  contents?: LolLootLootBundleContentGdsResource[]
  description?: string
  descriptionLong?: string
  id?: string
  image?: string
}

export interface LolLootLootDataGdsResource {
  LootBundles?: LolLootLootBundleGdsResource[]
  LootItems?: LolLootLootItemGdsResource[]
  LootRecipes?: LolLootLootRecipeGdsResource[]
  LootTables?: LolLootLootTableGdsResource[]
}

export interface LolLootLootDescription {
  childLootTableNames?: string[]
  childrenDescriptions?: LolLootLootDescription[]
  imagePath?: string
  localizedDescription?: string
  localizedDescriptionLong?: string
  lootName?: string
}

export interface LolLootLootDropTableEntryGdsResource {
  localizedDescription?: string
  lootId?: string
}

export interface LolLootLootGrantNotification {
  /** @format int64 */
  accountId?: number
  /** @format int32 */
  championId?: number
  /** @format int64 */
  gameId?: number
  /** @format int64 */
  id?: number
  lootName?: string
  messageKey?: string
  msgId?: string
  playerGrade?: string
  /** @format int64 */
  playerId?: number
}

export interface LolLootLootItem {
  asset?: string
  displayCategories?: string
  /** @format int64 */
  expiryTime?: number
  lootName?: string
  rarity?: string
  /** @format int32 */
  rentalGames?: number
  /** @format int64 */
  rentalSeconds?: number
  /** @format int32 */
  storeItemId?: number
  tags?: string
  type?: string
  upgradeLootName?: string
  /** @format int32 */
  value?: number
}

export interface LolLootLootItemGdsResource {
  autoRedeem?: boolean
  description?: string
  endDate?: string
  id?: string
  image?: string
  /** @format int32 */
  lifetimeMax?: number
  /** @format int32 */
  mappedStoreId?: number
  name?: string
  rarity?: LolLootLootRarity
  recipeMenuActive?: boolean
  recipeMenuSubtitle?: string
  recipeMenuTitle?: string
  startDate?: string
  type?: LolLootLootType
}

export interface LolLootLootMilestone {
  id?: string
  rewards?: LolLootLootMilestoneReward[]
  /** @format int64 */
  threshold?: number
}

export enum LolLootLootMilestoneClaimStatus {
  NOT_STARTED = 'NOT_STARTED',
  IN_PROGRESS = 'IN_PROGRESS',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED'
}

export interface LolLootLootMilestoneRepeat {
  /** @format float */
  multiplier?: number
  /** @format int32 */
  repeatCount?: number
  /** @format int32 */
  repeatScope?: number
}

export interface LolLootLootMilestoneReward {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  itemInstanceId?: string
  lootItem?: LolLootPlayerLoot
  /** @format int32 */
  quantity?: number
  rewardGroupId?: string
  rewardType?: string
}

export interface LolLootLootMilestones {
  active?: boolean
  endDate?: string
  errorCachingMilestoneSet?: boolean
  id?: string
  ledgerConfigId?: string
  lootItems?: string[]
  milestones?: LolLootLootMilestone[]
  recipes?: string[]
  repeat?: LolLootLootMilestoneRepeat
  startDate?: string
  storeGroupTitle?: string
}

export interface LolLootLootMilestonesClaimResponse {
  claimedMilestones?: string[]
  lootMilestoneSetId?: string
  status?: LolLootLootMilestoneClaimStatus
}

export interface LolLootLootMilestonesCounter {
  /** @format int64 */
  completedLoops?: number
  /** @format int64 */
  counterValue?: number
  lootMilestonesId?: string
  readyToClaimMilestones?: string[]
}

export interface LolLootLootMilestonesDataGdsResource {
  endDate?: string
  id?: string
  ledgerConfig?: LolLootLedgerConfigGdsResource
  recipes?: LolLootMilestonesRecipeGdsResource[]
  startDate?: string
  storeGroupTitle?: string
}

export interface LolLootLootOddsResponse {
  children?: LolLootLootOddsResponse[]
  /** @format double */
  dropRate?: number
  label?: string
  lootId?: string
  /** @format int32 */
  lootOrder?: number
  parentId?: string
  /** @format int32 */
  quantity?: number
}

export interface LolLootLootOutputGdsResource {
  localizedDescription?: string
  lootId?: string
}

export enum LolLootLootRarity {
  Default = 'Default',
  Epic = 'Epic',
  Legendary = 'Legendary',
  Mythic = 'Mythic',
  Ultimate = 'Ultimate'
}

export interface LolLootLootRecipeGdsResource {
  contextMenuText?: string
  description?: string
  hasVisibleLootOdds?: boolean
  id?: string
  imagePath?: string
  introVideoPath?: string
  loopVideoPath?: string
  outputs?: LolLootLootOutputGdsResource[]
  outroVideoPath?: string
  requirementText?: string
}

export interface LolLootLootTableGdsResource {
  description?: string
  descriptionLong?: string
  dropChance?: LolLootLootDropTableEntryGdsResource[]
  id?: string
  image?: string
}

export enum LolLootLootType {
  Chest = 'Chest',
  Currency = 'Currency',
  Material = 'Material',
  WardSkin = 'WardSkin',
  Skin = 'Skin',
  SkinRental = 'Skin_Rental',
  SummonerIcon = 'SummonerIcon',
  Companion = 'Companion',
  Egg = 'Egg',
  EggColor = 'Egg_Color',
  Statstone = 'Statstone',
  StatstoneShard = 'Statstone_Shard',
  Boost = 'Boost',
  SkinBorder = 'SkinBorder',
  TFTMapSkin = 'TFT_Map_Skin',
  TFTDamageSkin = 'TFT_Damage_Skin'
}

export interface LolLootMilestone {
  counterId?: string
  groupId?: string
  id?: string
  name?: string
  properties?: Record<string, string>
  /** @format int64 */
  triggerValue?: number
}

export interface LolLootMilestoneInstance {
  counterId?: string
  groupId?: string
  milestoneId?: string
  ownerId?: string
  productId?: string
  /** @format int32 */
  repeatSequence?: number
  /** @format int64 */
  triggerValue?: number
  triggered?: boolean
}

export interface LolLootMilestoneLootItemRewardGdsResource {
  internalName?: string
}

export interface LolLootMilestonesLedgerConfigRepeatGdsResource {
  name?: LolLootMilestonesLedgerGroupRepeatGdsResource
}

export interface LolLootMilestonesLedgerCounterGdsResource {
  direction?: string
  id?: string
  name?: string
  /** @format int32 */
  startValue?: number
}

export interface LolLootMilestonesLedgerGroupRepeatGdsResource {
  /** @format int32 */
  Count?: number
  /** @format float */
  Multiplier?: number
  /** @format int32 */
  Scope?: number
}

export interface LolLootMilestonesRecipeGdsResource {
  name?: string
}

export interface LolLootPlayerLoot {
  asset?: string
  /** @format int32 */
  count?: number
  disenchantLootName?: string
  /** @format int32 */
  disenchantValue?: number
  displayCategories?: string
  /** @format int64 */
  expiryTime?: number
  isNew?: boolean
  isRental?: boolean
  itemDesc?: string
  itemStatus?: LolLootItemOwnershipStatus
  localizedDescription?: string
  localizedName?: string
  localizedRecipeSubtitle?: string
  localizedRecipeTitle?: string
  lootId?: string
  lootName?: string
  parentItemStatus?: LolLootItemOwnershipStatus
  /** @format int32 */
  parentStoreItemId?: number
  rarity?: string
  redeemableStatus?: LolLootRedeemableStatus
  refId?: string
  /** @format int32 */
  rentalGames?: number
  /** @format int64 */
  rentalSeconds?: number
  shadowPath?: string
  splashPath?: string
  /** @format int32 */
  storeItemId?: number
  tags?: string
  tilePath?: string
  type?: string
  upgradeEssenceName?: string
  /** @format int32 */
  upgradeEssenceValue?: number
  upgradeLootName?: string
  /** @format int32 */
  value?: number
}

export interface LolLootPlayerLootDelta {
  /** @format int32 */
  deltaCount?: number
  playerLoot?: LolLootPlayerLoot
}

export interface LolLootPlayerLootMap {
  playerLoot?: Record<string, LolLootPlayerLoot>
  /** @format int64 */
  version?: number
}

export interface LolLootPlayerLootNotification {
  acknowledged?: boolean
  /** @format int32 */
  count?: number
  id?: string
}

export interface LolLootPlayerLootUpdate {
  added?: LolLootPlayerLootDelta[]
  redeemed?: LolLootPlayerLootDelta[]
  removed?: LolLootPlayerLootDelta[]
}

export interface LolLootRMSPayload {
  affinities?: string[]
  productId?: string
}

export interface LolLootRecipeMenuConfig {
  alwaysShowLootIds?: string[]
  enabled?: boolean
  lootItemsUsingBreakoutRecipeMenu?: string[]
}

export interface LolLootRecipeMetadata {
  bonusDescriptions?: LolLootLootDescription[]
  guaranteedDescriptions?: LolLootLootDescription[]
  tooltipsDisabled?: boolean
}

export interface LolLootRecipeOutput {
  lootName?: string
  /** @format int32 */
  quantity?: number
}

export interface LolLootRecipeSlot {
  lootIds?: string[]
  /** @format int32 */
  quantity?: number
  /** @format int32 */
  slotNumber?: number
  tags?: string
}

export interface LolLootRecipeWithMilestones {
  contextMenuText?: string
  crafterName?: string
  description?: string
  displayCategories?: string
  imagePath?: string
  introVideoPath?: string
  loopVideoPath?: string
  lootMilestoneIds?: string[]
  metadata?: LolLootRecipeMetadata
  outputs?: LolLootRecipeOutput[]
  outroVideoPath?: string
  recipeName?: string
  requirementText?: string
  slots?: LolLootRecipeSlot[]
  type?: string
}

export enum LolLootRedeemableStatus {
  UNKNOWN = 'UNKNOWN',
  REDEEMABLE = 'REDEEMABLE',
  REDEEMABLE_RENTAL = 'REDEEMABLE_RENTAL',
  NOT_REDEEMABLE = 'NOT_REDEEMABLE',
  NOT_REDEEMABLE_RENTAL = 'NOT_REDEEMABLE_RENTAL',
  ALREADY_OWNED = 'ALREADY_OWNED',
  ALREADY_RENTED = 'ALREADY_RENTED',
  CHAMPION_NOT_OWNED = 'CHAMPION_NOT_OWNED',
  SKIN_NOT_OWNED = 'SKIN_NOT_OWNED'
}

export interface LolLootRegionLocale {
  locale?: string
  region?: string
}

export interface LolLootRepeat {
  /** @format int32 */
  count?: number
  /** @format float */
  multiplier?: number
  /** @format int32 */
  scope?: number
}

export interface LolLootRequestDTOSelectionRequestDTO {
  data?: LolLootSelectionRequestDTO
  metadata?: LolLootRequestMetadataDTO
}

export interface LolLootRequestMetadataDTO {
  transactionId?: string
}

export interface LolLootResponseDTOSvcRewardGrant {
  data?: LolLootSvcRewardGrant
  metadata?: LolLootResponseMetadataDTO
}

export interface LolLootResponseDTOVectorSvcRewardGrant {
  data?: LolLootSvcRewardGrant[]
  metadata?: LolLootResponseMetadataDTO
}

export interface LolLootResponseDTOVectorSvcRewardGroup {
  data?: LolLootSvcRewardGroup[]
  metadata?: LolLootResponseMetadataDTO
}

export type LolLootResponseMetadataDTO = object

export interface LolLootReward {
  fulfillmentSource?: string
  id?: string
  itemId?: string
  itemType?: string
  localizations?: Record<string, string>
  media?: Record<string, string>
  /** @format int32 */
  quantity?: number
}

export interface LolLootRewardGrant {
  info?: LolLootSvcRewardGrant
  rewardGroup?: LolLootSvcRewardGroup
}

export enum LolLootRewardStatus {
  PENDING = 'PENDING',
  FULFILLED = 'FULFILLED',
  FAILED = 'FAILED'
}

export enum LolLootRewardStrategy {
  ALL = 'ALL',
  RANDOM = 'RANDOM',
  SELECTION = 'SELECTION'
}

export interface LolLootRewardsConfig {
  Enabled?: boolean
}

export interface LolLootSelectionRequestDTO {
  rewardGroupId?: string
  selections?: string[]
}

export interface LolLootSelectionStrategyConfig {
  /** @format int32 */
  maxSelectionsAllowed?: number
  /** @format int32 */
  minSelectionsAllowed?: number
}

export interface LolLootSummoner {
  /** @format int32 */
  summonerLevel?: number
}

export interface LolLootSvcRewardGrant {
  grantElements?: LolLootSvcRewardGrantElement[]
  granteeId?: string
  grantorDescription?: LolLootGrantorDescription
  id?: string
  rewardGroupId?: string
  selectedIds?: string[]
  status?: LolLootGrantStatus
  viewed?: boolean
}

export interface LolLootSvcRewardGrantElement {
  elementId?: string
  fulfillmentSource?: string
  itemId?: string
  itemType?: string
  localizations?: Record<string, string>
  media?: Record<string, string>
  /** @format int32 */
  quantity?: number
  status?: LolLootRewardStatus
}

export interface LolLootSvcRewardGroup {
  active?: boolean
  childRewardGroupIds?: string[]
  id?: string
  internalName?: string
  localizations?: Record<string, string>
  media?: Record<string, string>
  productId?: string
  rewardStrategy?: LolLootRewardStrategy
  rewards?: LolLootReward[]
  selectionStrategyConfig?: LolLootSelectionStrategyConfig
  types?: string[]
}

export interface LolLootVerboseLootOddsResponse {
  chanceToContain?: LolLootLootOddsResponse[]
  checksOwnership?: boolean
  guaranteedToContain?: LolLootLootOddsResponse[]
  hasPityRules?: boolean
  lootItem?: LolLootPlayerLoot
  recipeName?: string
}

export interface LolLoyaltyAccessToken {
  token?: string
}

export interface LolLoyaltyGlobalRewards {
  allChampions?: boolean
}

export interface LolLoyaltyInventoryDTO {
  items?: Record<string, Record<string, any>>
}

export interface LolLoyaltyInventoryItemDTO {
  inventoryType?: string
  loyalty?: boolean
}

export interface LolLoyaltyInventoryResponseDTO {
  data?: LolLoyaltyInventoryDTO
}

export interface LolLoyaltyLoginSession {
  /** @format int64 */
  accountId?: number
  puuid?: string
  state?: LolLoyaltyLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolLoyaltyLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolLoyaltyLoyaltyRewards {
  championIds?: number[]
  /** @format int32 */
  freeRewardedChampionsCount?: number
  /** @format int32 */
  freeRewardedSkinsCount?: number
  global?: LolLoyaltyGlobalRewards
  /** @format int32 */
  ipBoost?: number
  /** @format int32 */
  loyaltyTFTCompanionCount?: number
  /** @format int32 */
  loyaltyTFTMapSkinCount?: number
  skinIds?: number[]
  /** @format int32 */
  xpBoost?: number
}

export enum LolLoyaltyLoyaltyStatus {
  LEGACY = 'LEGACY',
  REWARDS_GRANT = 'REWARDS_GRANT',
  EXPIRY = 'EXPIRY',
  CHANGE = 'CHANGE',
  REVOKE = 'REVOKE',
  DISABLED = 'DISABLED'
}

export interface LolLoyaltyLoyaltyStatusNotification {
  rewards?: LolLoyaltyLoyaltyRewards
  status?: LolLoyaltyLoyaltyStatus
}

export interface LolLoyaltyRiotMessagingServiceMessage {
  payload?: string
  resource?: string
  service?: string
  /** @format int64 */
  timestamp?: number
  version?: string
}

export interface LolLoyaltyRmsEntitlementPayload {
  entitlementTypeId?: string
  itemId?: string
  itemTypeId?: string
  resourceOperation?: string
}

export interface LolMapsGameModeSpellList {
  spells?: number[]
}

export interface LolMapsMaps {
  assets?: Record<string, string>
  categorizedContentBundles?: Record<string, any>
  description?: string
  gameMode?: string
  gameModeDescription?: string
  gameModeName?: string
  gameModeShortName?: string
  gameMutator?: string
  /** @format int64 */
  id?: number
  isDefault?: boolean
  isRGM?: boolean
  locStrings?: Record<string, string>
  mapStringId?: string
  name?: string
  perPositionDisallowedSummonerSpells?: Record<string, LolMapsGameModeSpellList>
  perPositionRequiredSummonerSpells?: Record<string, LolMapsGameModeSpellList>
  platformId?: string
  platformName?: string
  properties?: Record<string, any>
  tutorialCards?: LolMapsTutorialCard[]
}

export interface LolMapsTutorialCard {
  description?: string
  footer?: string
  header?: string
  imagePath?: string
}

export interface LolMatchHistoryAcsEndPoint {
  url?: string
}

export interface LolMatchHistoryAcsPlayer {
  /** @format int64 */
  accountId?: number
  platformId?: string
}

export interface LolMatchHistoryGAMHSMatchHistoryData {
  json?: Record<string, any>
  metadata?: LolMatchHistoryGAMHSMatchHistoryMetadata
}

export interface LolMatchHistoryGAMHSMatchHistoryList {
  active_puuid?: string
  games?: LolMatchHistoryGAMHSMatchHistoryData[]
}

export interface LolMatchHistoryGAMHSMatchHistoryMetadata {
  data_version?: number
  info_type?: string
  match_id?: string
  participants?: string[]
  private?: boolean
  product?: string
  tags?: string[]
  /** @format int64 */
  timestamp?: number
}

export interface LolMatchHistoryLoginSession {
  /** @format int64 */
  accountId?: number
  gasToken?: Record<string, any>
  idToken?: string
  state?: LolMatchHistoryLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolMatchHistoryLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolMatchHistoryMHSummoner {
  /** @format int64 */
  accountId?: number
  displayName?: string
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolMatchHistoryMatchHistoryEvent {
  assistingParticipantIds?: number[]
  buildingType?: string
  itemId?: number
  killerId?: number
  laneType?: string
  monsterSubType?: string
  monsterType?: string
  participantId?: number
  position?: LolMatchHistoryMatchHistoryPosition
  skillSlot?: number
  teamId?: number
  /** @format int64 */
  timestamp?: number
  towerType?: string
  type?: string
  victimId?: number
}

export interface LolMatchHistoryMatchHistoryGame {
  /** @format int64 */
  gameCreation?: number
  gameCreationDate?: string
  /** @format int32 */
  gameDuration?: number
  /** @format int64 */
  gameId?: number
  gameMode?: string
  gameType?: string
  gameVersion?: string
  mapId?: number
  participantIdentities?: LolMatchHistoryMatchHistoryParticipantIdentities[]
  participants?: LolMatchHistoryMatchHistoryParticipant[]
  platformId?: string
  /** @format int32 */
  queueId?: number
  seasonId?: number
  teams?: LolMatchHistoryMatchHistoryTeam[]
}

export interface LolMatchHistoryMatchHistoryGameList {
  gameBeginDate?: string
  /** @format int64 */
  gameCount?: number
  gameEndDate?: string
  /** @format int64 */
  gameIndexBegin?: number
  /** @format int64 */
  gameIndexEnd?: number
  games?: LolMatchHistoryMatchHistoryGame[]
}

export interface LolMatchHistoryMatchHistoryList {
  /** @format int64 */
  accountId?: number
  games?: LolMatchHistoryMatchHistoryGameList
  platformId?: string
}

export interface LolMatchHistoryMatchHistoryParticipant {
  /** @format int32 */
  championId?: number
  highestAchievedSeasonTier?: string
  participantId?: number
  spell1Id?: number
  spell2Id?: number
  stats?: LolMatchHistoryMatchHistoryParticipantStatistics
  teamId?: number
  timeline?: LolMatchHistoryMatchHistoryTimeline
}

export interface LolMatchHistoryMatchHistoryParticipantFrame {
  /** @format int32 */
  currentGold?: number
  dominionScore?: number
  jungleMinionsKilled?: number
  level?: number
  minionsKilled?: number
  participantId?: number
  position?: LolMatchHistoryMatchHistoryPosition
  teamScore?: number
  /** @format int32 */
  totalGold?: number
  /** @format int32 */
  xp?: number
}

export interface LolMatchHistoryMatchHistoryParticipantIdentities {
  participantId?: number
  player?: LolMatchHistoryMatchHistoryParticipantIdentityPlayer
}

export interface LolMatchHistoryMatchHistoryParticipantIdentityPlayer {
  /** @format int64 */
  accountId?: number
  /** @format int64 */
  currentAccountId?: number
  currentPlatformId?: string
  matchHistoryUri?: string
  platformId?: string
  /** @format int32 */
  profileIcon?: number
  /** @format int64 */
  summonerId?: number
  summonerName?: string
}

export interface LolMatchHistoryMatchHistoryParticipantStatistics {
  /** @format int64 */
  assists?: number
  causedEarlySurrender?: boolean
  /** @format int64 */
  champLevel?: number
  /** @format int64 */
  combatPlayerScore?: number
  /** @format int64 */
  damageDealtToObjectives?: number
  /** @format int64 */
  damageDealtToTurrets?: number
  /** @format int64 */
  damageSelfMitigated?: number
  /** @format int64 */
  deaths?: number
  /** @format int64 */
  doubleKills?: number
  earlySurrenderAccomplice?: boolean
  firstBloodAssist?: boolean
  firstBloodKill?: boolean
  firstInhibitorAssist?: boolean
  firstInhibitorKill?: boolean
  firstTowerAssist?: boolean
  firstTowerKill?: boolean
  gameEndedInEarlySurrender?: boolean
  gameEndedInSurrender?: boolean
  /** @format int64 */
  goldEarned?: number
  /** @format int64 */
  goldSpent?: number
  /** @format int64 */
  inhibitorKills?: number
  item0?: number
  item1?: number
  item2?: number
  item3?: number
  item4?: number
  item5?: number
  item6?: number
  /** @format int64 */
  killingSprees?: number
  /** @format int64 */
  kills?: number
  /** @format int64 */
  largestCriticalStrike?: number
  /** @format int64 */
  largestKillingSpree?: number
  /** @format int64 */
  largestMultiKill?: number
  /** @format int64 */
  longestTimeSpentLiving?: number
  /** @format int64 */
  magicDamageDealt?: number
  /** @format int64 */
  magicDamageDealtToChampions?: number
  /** @format int64 */
  magicalDamageTaken?: number
  /** @format int64 */
  neutralMinionsKilled?: number
  /** @format int64 */
  neutralMinionsKilledEnemyJungle?: number
  /** @format int64 */
  neutralMinionsKilledTeamJungle?: number
  /** @format int64 */
  objectivePlayerScore?: number
  participantId?: number
  /** @format int64 */
  pentaKills?: number
  /** @format int64 */
  perk0?: number
  /** @format int64 */
  perk0Var1?: number
  /** @format int64 */
  perk0Var2?: number
  /** @format int64 */
  perk0Var3?: number
  /** @format int64 */
  perk1?: number
  /** @format int64 */
  perk1Var1?: number
  /** @format int64 */
  perk1Var2?: number
  /** @format int64 */
  perk1Var3?: number
  /** @format int64 */
  perk2?: number
  /** @format int64 */
  perk2Var1?: number
  /** @format int64 */
  perk2Var2?: number
  /** @format int64 */
  perk2Var3?: number
  /** @format int64 */
  perk3?: number
  /** @format int64 */
  perk3Var1?: number
  /** @format int64 */
  perk3Var2?: number
  /** @format int64 */
  perk3Var3?: number
  /** @format int64 */
  perk4?: number
  /** @format int64 */
  perk4Var1?: number
  /** @format int64 */
  perk4Var2?: number
  /** @format int64 */
  perk4Var3?: number
  /** @format int64 */
  perk5?: number
  /** @format int64 */
  perk5Var1?: number
  /** @format int64 */
  perk5Var2?: number
  /** @format int64 */
  perk5Var3?: number
  /** @format int64 */
  perkPrimaryStyle?: number
  /** @format int64 */
  perkSubStyle?: number
  /** @format int64 */
  physicalDamageDealt?: number
  /** @format int64 */
  physicalDamageDealtToChampions?: number
  /** @format int64 */
  physicalDamageTaken?: number
  /** @format int64 */
  playerScore0?: number
  /** @format int64 */
  playerScore1?: number
  /** @format int64 */
  playerScore2?: number
  /** @format int64 */
  playerScore3?: number
  /** @format int64 */
  playerScore4?: number
  /** @format int64 */
  playerScore5?: number
  /** @format int64 */
  playerScore6?: number
  /** @format int64 */
  playerScore7?: number
  /** @format int64 */
  playerScore8?: number
  /** @format int64 */
  playerScore9?: number
  /** @format int64 */
  quadraKills?: number
  /** @format int64 */
  sightWardsBoughtInGame?: number
  teamEarlySurrendered?: boolean
  /** @format int64 */
  timeCCingOthers?: number
  /** @format int64 */
  totalDamageDealt?: number
  /** @format int64 */
  totalDamageDealtToChampions?: number
  /** @format int64 */
  totalDamageTaken?: number
  /** @format int64 */
  totalHeal?: number
  /** @format int64 */
  totalMinionsKilled?: number
  /** @format int64 */
  totalPlayerScore?: number
  /** @format int64 */
  totalScoreRank?: number
  /** @format int64 */
  totalTimeCrowdControlDealt?: number
  /** @format int64 */
  totalUnitsHealed?: number
  /** @format int64 */
  tripleKills?: number
  /** @format int64 */
  trueDamageDealt?: number
  /** @format int64 */
  trueDamageDealtToChampions?: number
  /** @format int64 */
  trueDamageTaken?: number
  /** @format int64 */
  turretKills?: number
  /** @format int64 */
  unrealKills?: number
  /** @format int64 */
  visionScore?: number
  /** @format int64 */
  visionWardsBoughtInGame?: number
  /** @format int64 */
  wardsKilled?: number
  /** @format int64 */
  wardsPlaced?: number
  win?: boolean
}

export interface LolMatchHistoryMatchHistoryPlayerChampMasteryDelta {
  grade?: string
}

export interface LolMatchHistoryMatchHistoryPlayerDelta {
  deltas?: LolMatchHistoryMatchHistoryPlayerGameDelta[]
  /** @format int64 */
  originalAccountId?: number
  originalPlatformId?: string
}

export interface LolMatchHistoryMatchHistoryPlayerGameDelta {
  champMastery?: LolMatchHistoryMatchHistoryPlayerChampMasteryDelta
  /** @format int64 */
  gameId?: number
  gamePlatformId?: string
  leagueDelta?: LolMatchHistoryMatchHistoryPlayerLeagueDelta
  platformDelta?: LolMatchHistoryMatchHistoryPlayerPlatformDelta
}

export interface LolMatchHistoryMatchHistoryPlayerLeagueDelta {
  /** @format int64 */
  leaguePointDelta?: number
  miniSeriesProgress?: string[]
  reason?: string
  /** @format int64 */
  timestamp?: number
}

export interface LolMatchHistoryMatchHistoryPlayerPlatformDelta {
  compensationModeEnabled?: boolean
  /** @format int64 */
  ipDelta?: number
  /** @format int64 */
  timestamp?: number
  /** @format int64 */
  xpDelta?: number
}

export interface LolMatchHistoryMatchHistoryPosition {
  x?: number
  y?: number
}

export interface LolMatchHistoryMatchHistoryTeam {
  bans?: LolMatchHistoryMatchHistoryTeamBan[]
  /** @format int32 */
  baronKills?: number
  /** @format int32 */
  dominionVictoryScore?: number
  /** @format int32 */
  dragonKills?: number
  firstBaron?: boolean
  firstBlood?: boolean
  firstDargon?: boolean
  firstInhibitor?: boolean
  firstTower?: boolean
  /** @format int32 */
  inhibitorKills?: number
  /** @format int32 */
  riftHeraldKills?: number
  teamId?: number
  /** @format int32 */
  towerKills?: number
  /** @format int32 */
  vilemawKills?: number
  win?: string
}

export interface LolMatchHistoryMatchHistoryTeamBan {
  /** @format int32 */
  championId?: number
  pickTurn?: number
}

export interface LolMatchHistoryMatchHistoryTimeline {
  creepsPerMinDeltas?: Record<string, number>
  csDiffPerMinDeltas?: Record<string, number>
  damageTakenDiffPerMinDeltas?: Record<string, number>
  damageTakenPerMinDeltas?: Record<string, number>
  goldPerMinDeltas?: Record<string, number>
  lane?: string
  participantId?: number
  role?: string
  xpDiffPerMinDeltas?: Record<string, number>
  xpPerMinDeltas?: Record<string, number>
}

export interface LolMatchHistoryMatchHistoryTimelineFrame {
  events?: LolMatchHistoryMatchHistoryEvent[]
  participantFrames?: Record<string, LolMatchHistoryMatchHistoryParticipantFrame>
  /** @format int64 */
  timestamp?: number
}

export interface LolMatchHistoryMatchHistoryTimelineFrames {
  frames?: LolMatchHistoryMatchHistoryTimelineFrame[]
}

export interface LolMatchHistoryRecentlyPlayedSummoner {
  /** @format int64 */
  championId?: number
  gameCreationDate?: string
  /** @format int64 */
  gameId?: number
  puuid?: string
  /** @format int64 */
  summonerId?: number
  summonerName?: string
  /** @format int64 */
  teamId?: number
}

export interface LolMatchHistorySummoner {
  displayName?: string
  puuid?: string
}

export interface LolMatchmakingGameflowGameData {
  queue?: LolMatchmakingGameflowQueue
}

export interface LolMatchmakingGameflowGameDodge {
  dodgeIds?: number[]
  state?: LolMatchmakingMatchmakingDodgeState
}

export interface LolMatchmakingGameflowGameTypeConfig {
  reroll?: boolean
}

export enum LolMatchmakingGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolMatchmakingGameflowQueue {
  gameTypeConfig?: LolMatchmakingGameflowGameTypeConfig
}

export interface LolMatchmakingGameflowSession {
  gameData?: LolMatchmakingGameflowGameData
  gameDodge?: LolMatchmakingGameflowGameDodge
  phase?: LolMatchmakingGameflowPhase
}

export interface LolMatchmakingLobbyStatus {
  allowedPlayAgain?: boolean
  customSpectatorPolicy?: LolMatchmakingQueueCustomGameSpectatorPolicy
  isCustom?: boolean
  isLeader?: boolean
  isSpectator?: boolean
  lobbyId?: string
  memberSummonerIds?: number[]
  /** @format int32 */
  queueId?: number
}

export interface LolMatchmakingLoginSession {
  /** @format int64 */
  accountId?: number
  connected?: boolean
  state?: LolMatchmakingLoginSessionState
  /** @format int64 */
  summonerId?: number
}

export enum LolMatchmakingLoginSessionState {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolMatchmakingMatchmakingDodgeData {
  /** @format int64 */
  dodgerId?: number
  state?: LolMatchmakingMatchmakingDodgeState
}

export enum LolMatchmakingMatchmakingDodgeState {
  Invalid = 'Invalid',
  PartyDodged = 'PartyDodged',
  StrangerDodged = 'StrangerDodged',
  TournamentDodged = 'TournamentDodged'
}

export enum LolMatchmakingMatchmakingDodgeWarning {
  None = 'None',
  Warning = 'Warning',
  Penalty = 'Penalty'
}

export interface LolMatchmakingMatchmakingLowPriorityData {
  bustedLeaverAccessToken?: string
  penalizedSummonerIds?: number[]
  /** @format double */
  penaltyTime?: number
  /** @format double */
  penaltyTimeRemaining?: number
  reason?: string
}

export interface LolMatchmakingMatchmakingReadyCheckResource {
  declinerIds?: number[]
  dodgeWarning?: LolMatchmakingMatchmakingDodgeWarning
  playerResponse?: LolMatchmakingMatchmakingReadyCheckResponse
  state?: LolMatchmakingMatchmakingReadyCheckState
  suppressUx?: boolean
  /** @format float */
  timer?: number
}

export enum LolMatchmakingMatchmakingReadyCheckResponse {
  None = 'None',
  Accepted = 'Accepted',
  Declined = 'Declined'
}

export enum LolMatchmakingMatchmakingReadyCheckState {
  Invalid = 'Invalid',
  InProgress = 'InProgress',
  EveryoneReady = 'EveryoneReady',
  StrangerNotReady = 'StrangerNotReady',
  PartyNotReady = 'PartyNotReady',
  Error = 'Error'
}

export interface LolMatchmakingMatchmakingSearchErrorResource {
  errorType?: string
  /** @format int32 */
  id?: number
  message?: string
  /** @format int64 */
  penalizedSummonerId?: number
  /** @format double */
  penaltyTimeRemaining?: number
}

export interface LolMatchmakingMatchmakingSearchResource {
  dodgeData?: LolMatchmakingMatchmakingDodgeData
  errors?: LolMatchmakingMatchmakingSearchErrorResource[]
  /** @format float */
  estimatedQueueTime?: number
  isCurrentlyInQueue?: boolean
  lobbyId?: string
  lowPriorityData?: LolMatchmakingMatchmakingLowPriorityData
  /** @format int32 */
  queueId?: number
  readyCheck?: LolMatchmakingMatchmakingReadyCheckResource
  searchState?: LolMatchmakingMatchmakingSearchState
  /** @format float */
  timeInQueue?: number
}

export enum LolMatchmakingMatchmakingSearchState {
  Invalid = 'Invalid',
  AbandonedLowPriorityQueue = 'AbandonedLowPriorityQueue',
  Canceled = 'Canceled',
  Searching = 'Searching',
  Found = 'Found',
  Error = 'Error',
  ServiceError = 'ServiceError',
  ServiceShutdown = 'ServiceShutdown'
}

export interface LolMatchmakingPlayerStatus {
  currentLobbyStatus?: LolMatchmakingLobbyStatus
  lastQueuedLobbyStatus?: LolMatchmakingLobbyStatus
}

export interface LolMatchmakingQueue {
  /** @format int32 */
  id?: number
  isTeamBuilderManaged?: boolean
}

export enum LolMatchmakingQueueCustomGameSpectatorPolicy {
  NotAllowed = 'NotAllowed',
  LobbyAllowed = 'LobbyAllowed',
  FriendsAllowed = 'FriendsAllowed',
  AllAllowed = 'AllAllowed'
}

export interface LolMissionsCollectionsChampion {
  freeToPlay?: boolean
  /** @format int32 */
  id?: number
  ownership?: LolMissionsCollectionsOwnership
  skins?: LolMissionsCollectionsChampionSkin[]
}

export interface LolMissionsCollectionsChampionSkin {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  id?: number
  ownership?: LolMissionsCollectionsOwnership
}

export interface LolMissionsCollectionsOwnership {
  freeToPlayReward?: boolean
  owned?: boolean
  rental?: LolMissionsCollectionsRental
}

export interface LolMissionsCollectionsRental {
  rented?: boolean
}

export interface LolMissionsCollectionsSummoner {
  /** @format int32 */
  summonerLevel?: number
}

export interface LolMissionsCollectionsSummonerIcons {
  icons?: number[]
}

export interface LolMissionsCollectionsWardSkin {
  /** @format int64 */
  id?: number
  ownership?: LolMissionsCollectionsOwnership
}

export enum LolMissionsGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolMissionsGameflowSession {
  phase?: LolMissionsGameflowPhase
}

export enum LolMissionsGrantStatus {
  PENDING_FULFILLMENT = 'PENDING_FULFILLMENT',
  PENDING_SELECTION = 'PENDING_SELECTION',
  FULFILLED = 'FULFILLED'
}

export interface LolMissionsInventoryItemWithPayload {
  /** @format int32 */
  itemId?: number
}

export interface LolMissionsLoginSession {
  /** @format int64 */
  accountId?: number
  platformId?: string
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export enum LolMissionsLoyaltyStatus {
  LEGACY = 'LEGACY',
  REWARDS_GRANT = 'REWARDS_GRANT',
  EXPIRY = 'EXPIRY',
  CHANGE = 'CHANGE',
  REVOKE = 'REVOKE',
  DISABLED = 'DISABLED'
}

export interface LolMissionsLoyaltyStatusNotification {
  status?: LolMissionsLoyaltyStatus
}

export interface LolMissionsMissionAsset {
  iconNeedsFrame?: boolean
  internalName?: string
  path?: string
}

export interface LolMissionsMissionsNotificationResource {
  backgroundUrl?: string
  created?: string
  critical?: boolean
  data?: Record<string, string>
  detailKey?: string
  expires?: string
  iconUrl?: string
  /** @format int64 */
  id?: number
  source?: string
  state?: string
  titleKey?: string
  type?: string
}

export interface LolMissionsMissionsSettingsDataResource {
  selected_series?: string
}

export interface LolMissionsPlayerUpdateResponse {
  playerMissions?: PlayerMissionDTO[]
  playerSeries?: SeriesDTO[]
}

export interface LolMissionsPluginRegionLocaleChangedEvent {
  locale?: string
}

export interface LolMissionsRewardGrant {
  info?: LolMissionsRewardGrantInfo
  rewardGroup?: LolMissionsRewardGroup
}

export interface LolMissionsRewardGrantElement {
  fulfillmentSource?: string
  id?: string
  itemId?: string
  itemType?: string
  localizations?: Record<string, string>
  media?: Record<string, string>
  /** @format int32 */
  quantity?: number
  rewardStatus?: LolMissionsRewardStatus
}

export interface LolMissionsRewardGrantInfo {
  grantElements?: LolMissionsRewardGrantElement[]
  granteeId?: string
  id?: string
  rewardGroupId?: string
  selectedIds?: string[]
  status?: LolMissionsGrantStatus
  viewed?: boolean
}

export interface LolMissionsRewardGroup {
  active?: boolean
  childRewardGroupIds?: string[]
  id?: string
  internalName?: string
  localizations?: Record<string, string>
  media?: Record<string, string>
  productId?: string
  rewardStrategy?: LolMissionsRewardStrategy
  rewards?: LolMissionsSvcReward[]
  selectionStrategyConfig?: LolMissionsSelectionStrategyConfig
  types?: string[]
}

export interface LolMissionsRewardGroupsSelection {
  rewardGroups?: string[]
}

export enum LolMissionsRewardStatus {
  PENDING = 'PENDING',
  FULFILLED = 'FULFILLED'
}

export enum LolMissionsRewardStrategy {
  ALL = 'ALL',
  RANDOM = 'RANDOM',
  SELECTION = 'SELECTION'
}

export interface LolMissionsRewardsProductConfig {
  enabled?: boolean
  serviceUrl?: string
}

export interface LolMissionsSelectionStrategyConfig {
  /** @format int32 */
  maxSelectionsAllowed?: number
  /** @format int32 */
  minSelectionsAllowed?: number
}

export interface LolMissionsSeriesOpt {
  option?: string
  seriesId?: string
}

export interface LolMissionsSvcReward {
  fulfillmentSource?: string
  id?: string
  itemId?: string
  localizations?: Record<string, string>
  media?: Record<string, string>
  /** @format int32 */
  quantity?: number
}

export interface LolMissionsTftBattlepass {
  milestones?: LolMissionsTftBattlepassMilestone[]
  /** @format int32 */
  totalPointsEarned?: number
}

export interface LolMissionsTftBattlepassMilestone {
  description?: string
  iconImageUrl?: string
  label?: string
  missionId?: string
  /** @format int32 */
  percentComplete?: number
  /** @format int32 */
  pointsForMilestone?: number
  rewards?: PlayerMissionRewardDTO[]
  state?: string
}

export interface LolMissionsTftOrb {
  missionId?: string
  rewardLevel?: number
  rewards?: PlayerMissionRewardDTO[]
  status?: string
  /** @format int64 */
  unlockTime?: number
}

export interface LolMissionsTftPaidBattlepass {
  activeMilestone?: LolMissionsTftPaidBattlepassMilestone
  bonuses?: LolMissionsTftPaidBattlepassMilestone[]
  info?: LolMissionsTftPaidBattlepassInfo
  lastViewedMilestone?: LolMissionsTftPaidBattlepassMilestone
  /** @format int32 */
  lastViewedProgress?: number
  milestones?: LolMissionsTftPaidBattlepassMilestone[]
  progressMissionId?: string
  /** @format int32 */
  totalPointsEarned?: number
}

export interface LolMissionsTftPaidBattlepassInfo {
  backgroundImageUrl?: string
  description?: string
  /** @format int64 */
  endDate?: number
  internalName?: string
  pcPurchaseRequirement?: string
  premium?: boolean
  /** @format int64 */
  startDate?: number
  title?: string
}

export interface LolMissionsTftPaidBattlepassMilestone {
  description?: string
  iconImageUrl?: string
  iconNeedsFrame?: boolean
  internalName?: string
  isBonus?: boolean
  isKeystone?: boolean
  isLocked?: boolean
  isPaid?: boolean
  /** @format int32 */
  level?: number
  missionId?: string
  /** @format int32 */
  pointsEarnedForMilestone?: number
  /** @format int32 */
  pointsNeededForMilestone?: number
  rewards?: PlayerMissionRewardDTO[]
  state?: string
  status?: string
  title?: string
  /** @format int32 */
  totalPointsForMilestone?: number
}

export interface LolMissionsTftWeeklyMissions {
  missions?: PlayerMissionDTO[]
}

export interface LolMissionsUserInfo {
  userInfo?: string
}

export interface LolModeProgressionInventoryRewardItem {
  /** @format int32 */
  itemId?: number
  uuid?: string
}

export interface LolModeProgressionLoadout {
  id?: string
  loadout?: Record<string, LolModeProgressionLoadoutsSlot>
  name?: string
  scope?: string
}

export interface LolModeProgressionLoadoutsSlot {
  contentId?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export interface LolNpeRewardsAccountSettingsData {
  challenges?: LolNpeRewardsChallengesSettings
  login?: LolNpeRewardsLoginSeriesSettings
}

export interface LolNpeRewardsAccountSettingsPayload {
  data?: LolNpeRewardsAccountSettingsData
  /** @format int64 */
  schemaVersion?: number
}

export interface LolNpeRewardsAllRewards {
  level?: LolNpeRewardsRewardSeries
  login?: LolNpeRewardsRewardSeries
}

export interface LolNpeRewardsChallengesProgress {
  progress?: LolNpeRewardsProgress
}

export interface LolNpeRewardsChallengesSettings {
  allMissionsCompleted?: boolean
  totalCount?: number
}

export interface LolNpeRewardsLoginSeriesSettings {
  allRewardsClaimed?: boolean
  /** @format int64 */
  lastCompletedMissionDate?: number
  lastCompletedMissionInternalName?: string
}

export interface LolNpeRewardsMission {
  /** @format int64 */
  completedDate?: number
  display?: LolNpeRewardsMissionDisplay
  internalName?: string
  metadata?: LolNpeRewardsMissionsRewardPackMetaData
  objectives?: LolNpeRewardsObjective[]
  seriesName?: string
  status?: string
}

export interface LolNpeRewardsMissionDisplay {
  locations?: string[]
}

export interface LolNpeRewardsMissionSeries {
  id?: string
  internalName?: string
  status?: string
}

export interface LolNpeRewardsMissionSeriesOptIn {
  option?: string
  seriesId?: string
}

export interface LolNpeRewardsMissionsRewardPackMetaData {
  npeRewardPack?: LolNpeRewardsRewardPack
}

export interface LolNpeRewardsObjective {
  progress?: LolNpeRewardsProgress
}

export interface LolNpeRewardsProgress {
  /** @format int32 */
  currentProgress?: number
  /** @format int32 */
  lastViewedProgress?: number
  /** @format int32 */
  totalCount?: number
}

export interface LolNpeRewardsRequirements {
  /** @format int32 */
  day?: number
  /** @format int32 */
  level?: number
  missionInternalName?: string
}

export interface LolNpeRewardsReward {
  data?: Record<string, any>
  renderer?: string
}

export interface LolNpeRewardsRewardPack {
  /** @format int64 */
  delay?: number
  /** @format int32 */
  index?: number
  majorReward?: LolNpeRewardsReward
  minorRewards?: LolNpeRewardsReward[]
  premiumReward?: boolean
  requirements?: LolNpeRewardsRequirements
  rewardKey?: string
  state?: string
  type?: string
  /** @format int64 */
  unlockTime?: number
}

export interface LolNpeRewardsRewardSeries {
  rewardPacks?: LolNpeRewardsRewardPack[]
}

export interface LolNpeRewardsRewardSeriesState {
  allRewardsClaimed?: boolean
}

export interface LolNpeRewardsSummoner {
  /** @format int32 */
  summonerLevel?: number
}

export interface LolNpeTutorialPathAccountSettingsCategoryResource {
  data?: LolNpeTutorialPathAccountSettingsTutorial
  /** @format int32 */
  schemaVersion?: number
}

export interface LolNpeTutorialPathAccountSettingsTutorial {
  hasSeenTutorialPath?: boolean
  hasSkippedTutorialPath?: boolean
  shouldSeeNewPlayerExperience?: boolean
}

export interface LolNpeTutorialPathCollectionsChampion {
  alias?: string
  banVoPath?: string
  chooseVoPath?: string
  /** @format int32 */
  id?: number
  name?: string
  passive?: LolNpeTutorialPathCollectionsChampionSpell
  roles?: string[]
  spells?: LolNpeTutorialPathCollectionsChampionSpell[]
  squarePortraitPath?: string
  stingerSfxPath?: string
}

export interface LolNpeTutorialPathCollectionsChampionSpell {
  description?: string
  name?: string
}

export interface LolNpeTutorialPathExpiringWarning {
  /** @format int64 */
  alertTime?: number
  message?: string
  type?: string
}

export enum LolNpeTutorialPathGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolNpeTutorialPathGameflowSession {
  phase?: LolNpeTutorialPathGameflowPhase
}

export interface LolNpeTutorialPathIds {
  missionIds?: string[]
  seriesIds?: string[]
}

export interface LolNpeTutorialPathLobbyChangeQueue {
  isCustom?: boolean
  /** @format int32 */
  queueId?: number
}

export interface LolNpeTutorialPathLobbyDto {
  gameConfig?: LolNpeTutorialPathLobbyGameConfigDto
  partyId?: string
}

export interface LolNpeTutorialPathLobbyGameConfigDto {
  /** @format int32 */
  queueId?: number
}

export interface LolNpeTutorialPathMission {
  backgroundImageUrl?: string
  celebrationType?: string
  clientNotifyLevel?: string
  /** @format int64 */
  completedDate?: number
  completionExpression?: string
  /** @format int64 */
  cooldownTimeMillis?: number
  description?: string
  display?: LolNpeTutorialPathMissionDisplay
  displayType?: string
  /** @format int64 */
  endTime?: number
  expiringWarnings?: LolNpeTutorialPathExpiringWarning[]
  helperText?: string
  iconImageUrl?: string
  id?: string
  internalName?: string
  isNew?: boolean
  /** @format int64 */
  lastUpdatedTimestamp?: number
  locale?: string
  metadata?: LolNpeTutorialPathMissionMetadata
  missionType?: string
  objectives?: LolNpeTutorialPathObjective[]
  requirements?: string[]
  rewardStrategy?: LolNpeTutorialPathRewardStrategy
  rewards?: LolNpeTutorialPathReward[]
  seriesName?: string
  /** @format int64 */
  startTime?: number
  status?: string
  title?: string
  viewed?: boolean
}

export interface LolNpeTutorialPathMissionDisplay {
  attributes?: string[]
}

export interface LolNpeTutorialPathMissionMetadata {
  tutorial?: LolNpeTutorialPathTutorialMetadata
}

export interface LolNpeTutorialPathObjective {
  description?: string
  progress?: LolNpeTutorialPathProgress
  rewardGroups?: string[]
  /** @format int32 */
  sequence?: number
  type?: string
}

export interface LolNpeTutorialPathProgress {
  /** @format int32 */
  currentProgress?: number
  /** @format int32 */
  lastViewedProgress?: number
  /** @format int32 */
  totalCount?: number
}

export interface LolNpeTutorialPathRequirement {
  expression?: string
}

export interface LolNpeTutorialPathReward {
  description?: string
  iconUrl?: string
  itemId?: string
  /** @format int32 */
  quantity?: number
  rewardFulfilled?: boolean
  rewardGroup?: string
  rewardGroupSelected?: boolean
  rewardType?: string
  /** @format int32 */
  sequence?: number
  uniqueName?: string
}

export interface LolNpeTutorialPathRewardStrategy {
  groupStrategy?: string
  selectMaxGroupCount?: number
  selectMinGroupCount?: number
}

export interface LolNpeTutorialPathSeries {
  id?: string
  internalName?: string
  status?: string
}

export interface LolNpeTutorialPathSeriesOpt {
  option?: string
  seriesId?: string
}

export interface LolNpeTutorialPathSummoner {
  /** @format int64 */
  accountId?: number
  displayName?: string
  nameChangeFlag?: boolean
  /** @format int32 */
  percentCompleteForNextLevel?: number
  /** @format int32 */
  profileIconId?: number
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
  unnamed?: boolean
  /** @format int64 */
  xpSinceLastLevel?: number
  /** @format int64 */
  xpUntilNextLevel?: number
}

export interface LolNpeTutorialPathSummonerIcon {
  /** @format int32 */
  profileIconId?: number
}

export interface LolNpeTutorialPathTutorial {
  backgroundUrl?: string
  description?: string
  id?: string
  isViewed?: boolean
  queueId?: string
  rewards?: LolNpeTutorialPathTutorialReward[]
  status?: LolNpeTutorialPathTutorialStatus
  /** @format int32 */
  stepNumber?: number
  title?: string
  type?: LolNpeTutorialPathTutorialType
  useChosenChampion?: boolean
  useQuickSearchMatchmaking?: boolean
}

export interface LolNpeTutorialPathTutorialMetadata {
  displayRewards?: Record<string, string>
  queueId?: string
  /** @format int32 */
  stepNumber?: number
  useChosenChampion?: boolean
  useQuickSearchMatchmaking?: boolean
}

export interface LolNpeTutorialPathTutorialReward {
  description?: string
  iconUrl?: string
  itemId?: string
  rewardFulfilled?: boolean
  rewardType?: string
  /** @format int32 */
  sequence?: number
  uniqueName?: string
}

export enum LolNpeTutorialPathTutorialStatus {
  LOCKED = 'LOCKED',
  UNLOCKED = 'UNLOCKED',
  COMPLETED = 'COMPLETED'
}

export enum LolNpeTutorialPathTutorialType {
  CARD = 'CARD',
  REWARD = 'REWARD'
}

export interface LolPatchChunkingPatcherEnvironment {
  client_patcher_available?: boolean
  client_patcher_enabled?: boolean
  game_patcher_available?: boolean
  game_patcher_enabled?: boolean
}

export interface LolPatchComponentActionProgress {
  currentItem?: string
  network?: LolPatchComponentStateProgress
  primaryWork?: LolPatchComponentStateWorkType
  total?: LolPatchComponentStateProgress
}

export interface LolPatchComponentState {
  action?: LolPatchComponentStateAction
  id?: string
  isCorrupted?: boolean
  isUpToDate?: boolean
  isUpdateAvailable?: boolean
  progress?: LolPatchComponentActionProgress
  timeOfLastUpToDateCheckISO8601?: string
}

export enum LolPatchComponentStateAction {
  Idle = 'Idle',
  CheckingForUpdates = 'CheckingForUpdates',
  Patching = 'Patching',
  Repairing = 'Repairing',
  Migrating = 'Migrating'
}

export interface LolPatchComponentStateProgress {
  /** @format int64 */
  bytesComplete?: number
  /** @format double */
  bytesPerSecond?: number
  /** @format int64 */
  bytesRequired?: number
}

export enum LolPatchComponentStateWorkType {
  Scanning = 'Scanning',
  Network = 'Network',
  Disk = 'Disk'
}

export interface LolPatchEntitlementsTokenResource {
  accessToken?: string
  entitlements?: string[]
  token?: string
}

export interface LolPatchInstallPaths {
  gameExecutablePath?: string
  gameInstallRoot?: string
}

export interface LolPatchNotification {
  data?: Record<string, Record<string, any>>
  id?: string
  notificationId?: LolPatchNotificationId
}

export enum LolPatchNotificationId {
  UnspecifiedError = 'UnspecifiedError',
  ConnectionError = 'ConnectionError',
  MissingFilesError = 'MissingFilesError',
  FailedToWriteError = 'FailedToWriteError',
  WillRestoreClientBackupOnRestart = 'WillRestoreClientBackupOnRestart',
  DidRestoreClientBackup = 'DidRestoreClientBackup',
  NotEnoughDiskSpace = 'NotEnoughDiskSpace',
  BrokenPermissions = 'BrokenPermissions'
}

export interface LolPatchPatchSieveCompatVersion {
  id?: string
}

export interface LolPatchPatchSieveDownload {
  scd_required?: boolean
  url?: string
}

export interface LolPatchPatchSieveLabelValue {
  values?: string[]
}

export interface LolPatchPatchSieveQueryResponse {
  releases?: LolPatchPatchSieveRelease[]
}

export interface LolPatchPatchSieveRelease {
  compat_version?: LolPatchPatchSieveCompatVersion
  download?: LolPatchPatchSieveDownload
  release?: LolPatchPatchSieveReleaseInfo
}

export interface LolPatchPatchSieveReleaseInfo {
  id?: string
  labels?: Record<string, LolPatchPatchSieveLabelValue>
  product?: string
}

export interface LolPatchPatcherInstallSettings {
  client_patch_url?: string
  client_patcher?: string
  client_patcher_available?: boolean
  game_patch_url?: string
  game_patcher?: string
  game_patcher_available?: boolean
  locales?: string[]
  /** @format int32 */
  max_download_speed_mbps?: number
}

export interface LolPatchPatcherRegionSettings {
  client_patcher?: string
  game_patcher?: string
  patchline?: string
}

export interface LolPatchPatcherSelfUpdateSettings {
  /** @format int32 */
  restart_delay?: number
}

export interface LolPatchPatcherSettings {
  channel?: string
  headers?: Record<string, string>
  patchsieve_url?: string
  /** @format double */
  product_refresh_period?: number
  self_update?: LolPatchPatcherSelfUpdateSettings
}

export interface LolPatchProductState {
  action?: LolPatchComponentStateAction
  components?: LolPatchComponentState[]
  id?: string
  isCorrupted?: boolean
  isStopped?: boolean
  isUpToDate?: boolean
  isUpdateAvailable?: boolean
  /** @format double */
  percentPatched?: number
}

export interface LolPatchPublishedReleaseResponse {
  client_patch_url?: string
  game_patch_url?: string
  timestamp?: string
  toggles?: Record<string, number>
  /** @format int32 */
  version?: number
}

export interface LolPatchRegionLocale {
  locale?: string
  region?: string
}

export interface LolPatchScdCookie {
  cookie?: string
  domain?: string
  path?: string
}

export interface LolPatchScdCookies {
  cookies?: LolPatchScdCookie[]
}

export enum LolPatchScdEnabled {
  Off = 'Off',
  On = 'On'
}

export interface LolPatchStatus {
  connectedToPatchServer?: boolean
  hasUpdatesOnRestart?: boolean
  willRestartOnSelfUpdate?: boolean
}

export interface LolPatchSupportedGameRelease {
  artifact_id?: string
  download?: LolPatchPatchSieveDownload
  selected?: boolean
}

export interface LolPatchSupportedGameReleases {
  supported_game_releases?: LolPatchSupportedGameRelease[]
}

export interface LolPatchUxResource {
  visible?: boolean
}

export interface LolPerksChampSelectAction {
  /** @format int64 */
  actorCellId?: number
  /** @format int32 */
  championId?: number
  completed?: boolean
  /** @format int64 */
  id?: number
  type?: string
}

export interface LolPerksChampSelectBannedChampions {
  myTeamBans?: number[]
  /** @format int32 */
  numBans?: number
  theirTeamBans?: number[]
}

export interface LolPerksChampSelectChatRoomDetails {
  chatRoomName?: string
  chatRoomPassword?: string
}

export interface LolPerksChampSelectMySelection {
  /** @format int32 */
  selectedSkinId?: number
  /** @format int64 */
  spell1Id?: number
  /** @format int64 */
  spell2Id?: number
  /** @format int64 */
  wardSkinId?: number
}

export interface LolPerksChampSelectPlayerSelection {
  assignedPosition?: string
  /** @format int64 */
  cellId?: number
  /** @format int32 */
  championId?: number
  /** @format int32 */
  championPickIntent?: number
  /** @format int32 */
  selectedSkinId?: number
  /** @format int64 */
  spell1Id?: number
  /** @format int64 */
  spell2Id?: number
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  team?: number
  /** @format int64 */
  wardSkinId?: number
}

export interface LolPerksChampSelectSession {
  actions?: Record<string, any>[]
  bans?: LolPerksChampSelectBannedChampions
  chatDetails?: LolPerksChampSelectChatRoomDetails
  isSpectating?: boolean
  /** @format int64 */
  localPlayerCellId?: number
  myTeam?: LolPerksChampSelectPlayerSelection[]
  theirTeam?: LolPerksChampSelectPlayerSelection[]
  timer?: LolPerksChampSelectTimer
  trades?: LolPerksChampSelectTradeContract[]
}

export interface LolPerksChampSelectTimer {
  /** @format int64 */
  adjustedTimeLeftInPhase?: number
  /** @format int64 */
  internalNowInEpochMs?: number
  isInfinite?: boolean
  phase?: string
  /** @format int64 */
  totalTimeInPhase?: number
}

export interface LolPerksChampSelectTradeContract {
  /** @format int64 */
  cellId?: number
  /** @format int64 */
  id?: number
  state?: LolPerksChampSelectTradeState
}

export enum LolPerksChampSelectTradeState {
  AVAILABLE = 'AVAILABLE',
  BUSY = 'BUSY',
  INVALID = 'INVALID',
  RECEIVED = 'RECEIVED',
  SENT = 'SENT'
}

export interface LolPerksChampionPreferredStyle {
  /** @format int32 */
  championId?: number
  championName?: string
  /** @format int32 */
  style?: number
}

export enum LolPerksCustomizationLimits {
  Locked = 'Locked',
  CanSelectPages = 'CanSelectPages',
  CanSelectKeystones = 'CanSelectKeystones',
  CanSelectPrimaries = 'CanSelectPrimaries',
  CanSelectSplash = 'CanSelectSplash',
  CanUseAdvancedStyles = 'CanUseAdvancedStyles'
}

export interface LolPerksDefaultStatModsPerSubStyle {
  /** @format int32 */
  id?: number
  perks?: number[]
}

export interface LolPerksGameCustomizationDTO {
  category?: string
  content?: string
  isTeambuilder?: boolean
  /** @format int64 */
  queueType?: number
}

export interface LolPerksGameflowGameData {
  /** @format int64 */
  gameId?: number
  isCustomGame?: boolean
  queue?: LolPerksQueue
}

export enum LolPerksGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolPerksGameflowSession {
  gameData?: LolPerksGameflowGameData
  phase?: LolPerksGameflowPhase
}

export interface LolPerksGetGameCustomizationDTO {
  queueType?: string
}

export interface LolPerksGetResultFromServiceDTO {
  error?: string
  result?: string
}

export interface LolPerksInventoryRunePageCount {
  /** @format int32 */
  quantity?: number
}

export interface LolPerksLoginSession {
  /** @format int64 */
  accountId?: number
  state?: LolPerksLoginSessionState
  /** @format int64 */
  summonerId?: number
}

export enum LolPerksLoginSessionState {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolPerksNameCheckPayload {
  name?: string
  shard?: string
}

export interface LolPerksNameCheckReponse {
  errors?: string[]
}

export interface LolPerksPerkBook {
  /** @format int32 */
  currentPageId?: number
  pages?: LolPerksPerkPageResource[]
}

export interface LolPerksPerkGDSResource {
  iconPath?: string
  /** @format int32 */
  id?: number
  longDesc?: string
  majorChangePatchVersion?: string
  name?: string
  shortDesc?: string
  tooltip?: string
}

export interface LolPerksPerkIdListResource {
  perkIds?: number[]
}

export interface LolPerksPerkPageResource {
  autoModifiedSelections?: number[]
  current?: boolean
  /** @format int32 */
  id?: number
  isActive?: boolean
  isDeletable?: boolean
  isEditable?: boolean
  isValid?: boolean
  /** @format int64 */
  lastModified?: number
  name?: string
  /** @format int32 */
  order?: number
  /** @format int32 */
  primaryStyleId?: number
  selectedPerkIds?: number[]
  /** @format int32 */
  subStyleId?: number
}

export interface LolPerksPerkSettingResource {
  perkIds?: number[]
  /** @format int32 */
  perkStyle?: number
  /** @format int32 */
  perkSubStyle?: number
}

export interface LolPerksPerkSettings {
  pages?: LolPerksPerkPageResource[]
  perShardPerkBooks?: Record<string, LolPerksPerkBook>
  settings?: LolPerksUISettings
}

export interface LolPerksPerkStyleResource {
  allowedSubStyles?: number[]
  assetMap?: Record<string, string>
  defaultPageName?: string
  defaultPerks?: number[]
  defaultPerksWhenSplashed?: number[]
  defaultStatModsPerSubStyle?: LolPerksDefaultStatModsPerSubStyle[]
  /** @format int32 */
  defaultSubStyle?: number
  iconPath?: string
  /** @format int32 */
  id?: number
  isAdvanced?: boolean
  name?: string
  slots?: LolPerksPerkStyleSlotResource[]
  subStyleBonus?: LolPerksPerkSubStyleBonusResource[]
  tooltip?: string
}

export interface LolPerksPerkStyleSlotResource {
  perks?: number[]
  slotLabel?: string
  type?: string
}

export interface LolPerksPerkSubStyleBonusResource {
  /** @format int32 */
  perkId?: number
  /** @format int32 */
  styleId?: number
}

export interface LolPerksPerkUIPerk {
  iconPath?: string
  /** @format int32 */
  id?: number
  longDesc?: string
  name?: string
  shortDesc?: string
  tooltip?: string
}

export interface LolPerksPerkUISlot {
  perks?: number[]
  slotLabel?: string
  type?: string
}

export interface LolPerksPerkUIStyle {
  allowedSubStyles?: number[]
  assetMap?: Record<string, string>
  defaultPageName?: string
  defaultPerks?: number[]
  /** @format int32 */
  defaultSubStyle?: number
  iconPath?: string
  /** @format int32 */
  id?: number
  name?: string
  slots?: LolPerksPerkUISlot[]
  subStyleBonus?: LolPerksPerkSubStyleBonusResource[]
  tooltip?: string
}

export interface LolPerksPlatformConfig {
  AutoRepairPagesEnabled?: boolean
  PerksEnabled?: boolean
}

export interface LolPerksPlayerInventory {
  /** @format int32 */
  ownedPageCount?: number
}

export interface LolPerksQueue {
  /** @format int32 */
  id?: number
  isTeamBuilderManaged?: boolean
}

export interface LolPerksRiotMessagingServiceMessage {
  payload?: string
  resource?: string
  service?: string
  /** @format int64 */
  timestamp?: number
  version?: string
}

export interface LolPerksServiceSettings {
  serverSideStorageAvailable?: boolean
}

export interface LolPerksSettingsStorageContainer {
  data?: LolPerksPerkSettings
  /** @format int32 */
  schemaVersion?: number
}

export interface LolPerksSummoner {
  /** @format int64 */
  accountId?: number
  displayName?: string
  internalName?: string
  /** @format int32 */
  percentCompleteForNextLevel?: number
  /** @format int32 */
  profileIconId?: number
  puuid?: string
  rerollPoints?: LolPerksSummonerRerollPoints
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
  /** @format int64 */
  xpSinceLastLevel?: number
  /** @format int64 */
  xpUntilNextLevel?: number
}

export interface LolPerksSummonerRerollPoints {
  /** @format int32 */
  currentPoints?: number
  /** @format int32 */
  maxRolls?: number
  /** @format int32 */
  numberOfRolls?: number
  /** @format int32 */
  pointsCostToRoll?: number
  /** @format int32 */
  pointsToReroll?: number
}

export interface LolPerksUISettings {
  gameplayPatchVersionSeen?: string
  gameplayUpdatedPerksSeen?: number[]
  gridModeEnabled?: boolean
  showLongDescriptions?: boolean
  showPresetPages?: boolean
}

export interface LolPerksUpdatePageOrderRequest {
  /** @format int32 */
  destinationPageId?: number
  /** @format int32 */
  offset?: number
  /** @format int32 */
  targetPageId?: number
}

export interface LolPerksValidatePageNameData {
  /** @format int32 */
  id?: number
  name?: string
}

export interface LolPerksValidatePageNameResponse {
  nameCheckResponse?: LolPerksNameCheckReponse
  success?: boolean
}

export interface LolPersonalizedOffersAccessTokenResource {
  /** @format int64 */
  expiry?: number
  scopes?: string[]
  token?: string
}

export interface LolPersonalizedOffersOffer {
  /** @format int64 */
  discountPrice?: number
  expirationDate?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  name?: string
  offerId?: string
  /** @format int64 */
  originalPrice?: number
  owned?: boolean
  revealed?: boolean
  /** @format int32 */
  spotIndex?: number
}

export interface LolPersonalizedOffersOfferData {
  offers?: LolPersonalizedOffersOffer[]
  promotion?: LolPersonalizedOffersPromotion
}

export interface LolPersonalizedOffersOfferId {
  offerId?: string
}

export interface LolPersonalizedOffersOfferIds {
  offers?: LolPersonalizedOffersOfferId[]
}

export interface LolPersonalizedOffersOfferRequest {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  offerId?: string
  /** @format int64 */
  price?: number
}

export interface LolPersonalizedOffersOfferRequests {
  offers?: LolPersonalizedOffersOfferRequest[]
}

export interface LolPersonalizedOffersPromotion {
  endTime?: string
  name?: string
  startTime?: string
}

export interface LolPersonalizedOffersPurchaseItem {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  /** @format int64 */
  pricePaid?: number
}

export interface LolPersonalizedOffersPurchaseResponse {
  items?: LolPersonalizedOffersPurchaseItem[]
  wallet?: LolPersonalizedOffersWallet
}

export interface LolPersonalizedOffersUIOffer {
  /** @format int32 */
  championId?: number
  /** @format int64 */
  discountPrice?: number
  expirationDate?: string
  id?: string
  /** @format int64 */
  originalPrice?: number
  owned?: boolean
  revealed?: boolean
  /** @format int32 */
  skinId?: number
  skinName?: string
  type?: string
}

export interface LolPersonalizedOffersUIStatus {
  endTime?: string
  hubEnabled?: boolean
  name?: string
  startTime?: string
}

export interface LolPersonalizedOffersWallet {
  /** @format int64 */
  rp?: number
}

export interface LolPftGameClientEndOfGameStats {
  /** @format int64 */
  gameId?: number
  gameMode?: string
  isRanked?: boolean
  /** @format int32 */
  queueId?: number
  statsBlock?: Record<string, any>
}

export interface LolPftGameflowGameDodge {
  dodgeIds?: number[]
  state?: LolPftGameflowGameDodgeState
}

export enum LolPftGameflowGameDodgeState {
  Invalid = 'Invalid',
  PartyDodged = 'PartyDodged',
  StrangerDodged = 'StrangerDodged',
  TournamentDodged = 'TournamentDodged'
}

export enum LolPftGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolPftGameflowSession {
  gameDodge?: LolPftGameflowGameDodge
  phase?: LolPftGameflowPhase
}

export interface LolPftLoginSession {
  idToken?: string
  state?: LolPftLoginSessionStates
}

export enum LolPftLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolPftPFTEndOfGamePlayer {
  botPlayer?: boolean
  /** @format int32 */
  championId?: number
  /** @format int32 */
  elo?: number
  /** @format int32 */
  eloChange?: number
  /** @format int64 */
  gameId?: number
  isReportingDisabled?: boolean
  items?: number[]
  leaver?: boolean
  /** @format int32 */
  leaves?: number
  /** @format int32 */
  level?: number
  /** @format int32 */
  losses?: number
  /** @format int32 */
  profileIconId?: number
  skinName?: string
  /** @format int32 */
  spell1Id?: number
  /** @format int32 */
  spell2Id?: number
  stats?: Record<string, any>
  /** @format int64 */
  summonerId?: number
  summonerName?: string
  /** @format int32 */
  teamId?: number
  /** @format int64 */
  userId?: number
  /** @format int32 */
  wins?: number
}

export interface LolPftPFTEndOfGamePoints {
  /** @format int32 */
  pointChangeFromChampionsOwned?: number
  /** @format int32 */
  pointChangeFromGameplay?: number
  /** @format int32 */
  pointsUntilNextReroll?: number
  /** @format int32 */
  pointsUsed?: number
  /** @format int32 */
  previousPoints?: number
  /** @format int32 */
  rerollCount?: number
  /** @format int32 */
  totalPoints?: number
}

export interface LolPftPFTEndOfGameStats {
  /** @format int64 */
  accountId?: number
  /** @format int32 */
  basePoints?: number
  /** @format int32 */
  battleBoostIpEarned?: number
  /** @format int32 */
  boostIpEarned?: number
  /** @format int32 */
  boostXpEarned?: number
  causedEarlySurrender?: boolean
  /** @format int32 */
  championId?: number
  /** @format int32 */
  coOpVsAiMinutesLeftToday?: number
  /** @format int32 */
  coOpVsAiMsecsUntilReset?: number
  /** @format int32 */
  completionBonusPoints?: number
  /** @format int32 */
  customMinutesLeftToday?: number
  /** @format int32 */
  customMsecsUntilReset?: number
  difficulty?: string
  earlySurrenderAccomplice?: boolean
  /** @format int32 */
  elo?: number
  /** @format int32 */
  eloChange?: number
  /** @format int32 */
  experienceEarned?: number
  /** @format int32 */
  experienceTotal?: number
  /** @format int32 */
  firstWinBonus?: number
  gameEndedInEarlySurrender?: boolean
  /** @format int64 */
  gameId?: number
  /** @format int32 */
  gameLength?: number
  gameMode?: string
  gameMutators?: string[]
  gameType?: string
  imbalancedTeamsNoPoints?: boolean
  invalid?: boolean
  /** @format int32 */
  ipEarned?: number
  /** @format int32 */
  ipTotal?: number
  isAramGame?: boolean
  leveledUp?: boolean
  /** @format int32 */
  loyaltyBoostIpEarned?: number
  /** @format int32 */
  loyaltyBoostXpEarned?: number
  myTeamStatus?: string
  newSpells?: number[]
  /** @format int32 */
  odinBonusIp?: number
  /** @format int32 */
  partyRewardsBonusIpEarned?: number
  pointsPenalties?: Record<string, any>
  /** @format int64 */
  previousLevel?: number
  /** @format int64 */
  previousXpTotal?: number
  /** @format int32 */
  queueBonusEarned?: number
  queueType?: string
  ranked?: boolean
  /** @format int64 */
  reportGameId?: number
  rerollData?: LolPftPFTEndOfGamePoints
  roomName?: string
  roomPassword?: string
  /** @format int32 */
  rpEarned?: number
  sendStatsToTournamentProvider?: boolean
  /** @format int32 */
  skinId?: number
  /** @format int32 */
  skinIndex?: number
  /** @format int64 */
  summonerId?: number
  summonerName?: string
  /** @format int32 */
  talentPointsGained?: number
  teamEarlySurrendered?: boolean
  teams?: LolPftPFTEndOfGameTeam[]
  /** @format int32 */
  timeUntilNextFirstWinBonus?: number
  /** @format int64 */
  userId?: number
}

export interface LolPftPFTEndOfGameTeam {
  championBans?: number[]
  fullId?: string
  isBottomTeam?: boolean
  isPlayerTeam?: boolean
  isWinningTeam?: boolean
  memberStatusString?: string
  name?: string
  players?: LolPftPFTEndOfGamePlayer[]
  stats?: Record<string, any>
  tag?: string
  /** @format int32 */
  teamId?: number
}

export interface LolPftPFTEvent {
  action?: string
  data?: Record<string, any>[]
  /** @format int64 */
  playerSurveyId?: number
}

export interface LolPftPFTMetadata {
  /** @format int64 */
  accountId?: number
  appName?: string
  appVersion?: string
  env?: string
  /** @format double */
  homepageTimer?: number
  locale?: string
  stats?: LolPftPFTEndOfGameStats
  systemOs?: string
  webRegion?: string
}

export interface LolPftPFTQuestionResponse {
  /** @format int64 */
  questionId?: number
  responseData?: Record<string, any>
}

export interface LolPftPFTSurvey {
  caption?: string
  data?: Record<string, Record<string, any>>
  display?: string
  /** @format int64 */
  id?: number
  title?: string
  type?: string
}

export interface LolPftPFTSurveyResults {
  actions?: LolPftPFTEvent[]
  questionResponses?: LolPftPFTQuestionResponse[]
}

export interface LolPftPFTSurveyV1 {
  caption?: string
  /** @format int64 */
  id?: number
  title?: string
  type?: string
  url?: string
}

export interface LolPftSummoner {
  /** @format int64 */
  accountId?: number
  puuid?: string
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
  unnamed?: boolean
}

export interface LolPlayerBehaviorBanNotification {
  displayReformCard?: boolean
  /** @format int64 */
  id?: number
  isPermaBan?: boolean
  reason?: string
  source?: LolPlayerBehaviorNotificationSource
  /** @format int64 */
  timeUntilBanExpires?: number
}

export interface LolPlayerBehaviorCodeOfConductNotification {
  message?: string
}

export enum LolPlayerBehaviorGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export enum LolPlayerBehaviorNotificationSource {
  Invalid = 'Invalid',
  Login = 'Login',
  ForcedShutdown = 'ForcedShutdown',
  Message = 'Message'
}

export interface LolPlayerBehaviorPlayerBehaviorConfig {
  CodeOfConductEnabled?: boolean
  IsLoaded?: boolean
}

export interface LolPlayerBehaviorPlayerBehaviorGameflowSessionResource {
  phase?: LolPlayerBehaviorGameflowPhase
}

export interface LolPlayerBehaviorPlayerBehaviorSimpleMessage {
  /** @format int64 */
  accountId?: number
  msgId?: string
  params?: string[]
  type?: string
}

export interface LolPlayerBehaviorPlayerNotificationResource {
  backgroundUrl?: string
  created?: string
  critical?: boolean
  data?: Record<string, string>
  detailKey?: string
  expires?: string
  iconUrl?: string
  /** @format int64 */
  id?: number
  source?: string
  state?: string
  titleKey?: string
  type?: string
}

export interface LolPlayerBehaviorReformCard {
  chatLogs?: string[]
  gameIds?: number[]
  /** @format int64 */
  id?: number
  playerFacingMessage?: string
  /** @format int64 */
  punishmentLengthGames?: number
  /** @format int64 */
  punishmentLengthTime?: number
  punishmentType?: string
  reason?: string
  /** @format int64 */
  restrictedChatGamesRemaining?: number
  /** @format int64 */
  timeWhenPunishmentExpires?: number
}

export interface LolPlayerBehaviorReformCardChatLogs {
  inGameChatLogs?: string[]
  postGameChatLogs?: string[]
  preGameChatLogs?: string[]
}

export interface LolPlayerBehaviorReformCardV2 {
  /** @format int64 */
  id?: number
  playerFacingMessage?: string
  punishedForGameIds?: number[]
  punishedForReformCardChatLogs?: LolPlayerBehaviorReformCardChatLogs[]
  /** @format int64 */
  punishedUntilDateMillis?: number
  /** @format int64 */
  punishmentLengthGames?: number
  /** @format int64 */
  punishmentLengthMillis?: number
  punishmentReason?: string
  punishmentType?: string
}

export interface LolPlayerBehaviorReporterFeedback {
  /** @format int64 */
  accountId?: number
  /** @format int64 */
  id?: number
  messageId?: string
  type?: string
}

export interface LolPlayerBehaviorRestrictionNotification {
  displayReformCard?: boolean
  /** @format int64 */
  expirationMillis?: number
  /** @format int64 */
  gamesRemaining?: number
  /** @format int64 */
  id?: number
  source?: LolPlayerBehaviorNotificationSource
}

export interface LolPlayerBehaviorSettingsResource {
  data?: Record<string, any>
  /** @format int64 */
  schemaVersion?: number
}

export interface LolPlayerBehaviorUserInfo {
  userInfo?: string
}

export interface LolPlayerBehaviorUserInfoBanData {
  restrictions?: LolPlayerBehaviorUserInfoRestriction[]
}

export interface LolPlayerBehaviorUserInfoRestriction {
  dat?: LolPlayerBehaviorUserInfoRestrictionData
  reason?: string
  scope?: string
  type?: string
}

export interface LolPlayerBehaviorUserInfoRestrictionData {
  /** @format int64 */
  expirationMillis?: number
  gameData?: LolPlayerBehaviorUserInfoRestrictionGameData
  gameLocation?: string
}

export interface LolPlayerBehaviorUserInfoRestrictionGameData {
  additionalGameIds?: string[]
  gameLocation?: string
  productName?: string
  triggerGameId?: string
}

export interface LolPlayerBehaviorUserInfoToken {
  ban?: LolPlayerBehaviorUserInfoBanData
}

export interface LolPlayerLevelUpEndOfGameStats {
  gameMode?: string
  gameMutators?: string[]
  gameType?: string
  leveledUp?: boolean
  newSpells?: number[]
  /** @format int32 */
  previousLevel?: number
  queueType?: string
  /** @format int32 */
  rpEarned?: number
}

export interface LolPlayerLevelUpGameDataSummonerSpell {
  /** @format int64 */
  id?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolPlayerLevelUpLoginSession {
  /** @format int64 */
  accountId?: number
  state?: LolPlayerLevelUpLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolPlayerLevelUpLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolPlayerLevelUpPlayerLevelUpEvent {
  leveledUp?: boolean
  newQueues?: number[]
  newRuneSlotUnlocked?: boolean
  newSpells?: number[]
  /** @format int32 */
  newSummonerLevel?: number
  nowHasAccessToLoot?: boolean
  nowHasAccessToPublicChatRooms?: boolean
  /** @format int32 */
  rpEarned?: number
  switchedToStandardFreeToPlayChampRotation?: boolean
}

export interface LolPlayerLevelUpPlayerLevelUpEventAck {
  /** @format int32 */
  newSummonerLevel?: number
  seenThisEvent?: boolean
}

export interface LolPlayerLevelUpQueue {
  /** @format int32 */
  id?: number
  /** @format int32 */
  minLevel?: number
}

export interface LolPlayerMessagingDynamicCelebrationMessagingNotificationResource {
  /** @format int64 */
  accountId?: number
  celebrationBody?: string
  celebrationMessage?: string
  celebrationTitle?: string
  celebrationType?: string
  /** @format int32 */
  id?: number
  inventoryType?: string
  itemId?: string
  itemQuantity?: string
  msgId?: string
  /** @format int32 */
  status?: number
}

export interface LolPlayerMessagingLoginDataPacket {
  simpleMessages?: LolPlayerMessagingSimpleMessage[]
}

export interface LolPlayerMessagingPlayerMessagingNotificationResource {
  /** @format int64 */
  accountId?: number
  body?: string
  /** @format int32 */
  id?: number
  msgId?: string
  /** @format int32 */
  status?: number
  title?: string
}

export interface LolPlayerMessagingSimpleMessage {
  /** @format int64 */
  accountId?: number
  bodyCode?: string
  msgId?: string
  params?: string[]
  titleCode?: string
  type?: string
}

export interface LolPlayerPreferencesLoginSession {
  /** @format int64 */
  accountId?: number
  idToken?: string
  state?: LolPlayerPreferencesLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolPlayerPreferencesLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolPlayerPreferencesPlayerPreferences {
  data?: string
  hash?: string
  type?: string
  version?: string
}

export interface LolPlayerPreferencesPlayerPreferencesEndpoint {
  Enabled?: boolean
  EnforceHttps?: boolean
  /** @format int64 */
  Retries?: number
  ServiceEndpoint?: string
  Version?: string
}

export interface LolPlayerReportSenderChampSelectReport {
  categories?: string[]
  comment?: string
  location?: string
  match_token?: string
  offender_puuid?: string
}

export interface LolPlayerReportSenderEndOfGamePlayerReport {
  comment?: string
  /** @format int64 */
  gameId?: number
  offense?: string
  reportedPuuid?: string
}

export interface LolPlayerReportSenderGameAgnosticReportPayload {
  categories?: string[]
  comment?: string
  location?: string
  offenderId?: string
  token?: string
  tokenType?: string
}

export enum LolPreEndOfGameGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolPreEndOfGameGameflowSessionResource {
  phase?: LolPreEndOfGameGameflowPhase
}

export interface LolPreEndOfGameSequenceEvent {
  name?: string
  /** @format int32 */
  priority?: number
}

export interface LolPremadeVoiceAccountSettingsCategoryDataResource {
  autoJoin?: boolean
  inputMode?: LolPremadeVoiceInputMode
  muteOnConnect?: boolean
  pushToTalkKey?: string
  showFirstExperienceInGame?: boolean
  showFirstExperienceInLCU?: boolean
}

export interface LolPremadeVoiceAccountSettingsCategoryResource {
  data?: LolPremadeVoiceAccountSettingsCategoryDataResource
  /** @format int32 */
  schemaVersion?: number
}

export interface LolPremadeVoiceAudioPropertiesResource {
  isLoopbackEnabled?: boolean
  /** @format int32 */
  micEnergy?: number
}

export enum LolPremadeVoiceConfigReadinessEnum {
  NotReady = 'NotReady',
  Ready = 'Ready',
  Disabled = 'Disabled'
}

export interface LolPremadeVoiceConfigStatus {
  readiness?: LolPremadeVoiceConfigReadinessEnum
}

export enum LolPremadeVoiceConfigType {
  Public = 'public',
  Player = 'player'
}

export interface LolPremadeVoiceDeviceResource {
  handle?: string
  is_current_device?: boolean
  is_default?: boolean
  name?: string
  usable?: boolean
}

export interface LolPremadeVoiceDeviceResourceRiotClient {
  handle?: string
  is_current_device?: boolean
  is_default?: boolean
  is_effective_device?: boolean
  name?: string
}

export interface LolPremadeVoiceEntitlementsToken {
  entitlements?: string[]
}

export interface LolPremadeVoiceExternalSession {
  patchlineFullName?: string
  patchlineId?: string
  productId?: string
}

export interface LolPremadeVoiceFirstExperience {
  showFirstExperienceInGame?: boolean
  showFirstExperienceInLCU?: boolean
}

export interface LolPremadeVoiceGameEventHotkeys {
  evtPushToTalk?: string
}

export interface LolPremadeVoiceGameInputSettings {
  GameEvents?: LolPremadeVoiceGameEventHotkeys
}

export interface LolPremadeVoiceGameflowGameClient {
  running?: boolean
}

export enum LolPremadeVoiceGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolPremadeVoiceGameflowSession {
  gameClient?: LolPremadeVoiceGameflowGameClient
  phase?: LolPremadeVoiceGameflowPhase
}

export enum LolPremadeVoiceInputMode {
  VoiceActivity = 'voiceActivity',
  PushToTalk = 'pushToTalk'
}

export interface LolPremadeVoiceKeyCombo {
  keyBindings?: LolPremadeVoicePushToTalkKey[]
}

export interface LolPremadeVoiceKeycodePushToTalkResource {
  enabled?: boolean
  keyCombos?: LolPremadeVoiceKeyCombo[]
}

export interface LolPremadeVoiceLocalSettingsCategoryDataResource {
  currentCaptureDeviceHandle?: string
  /** @format int32 */
  inputVolume?: number
  /** @format int32 */
  vadSensitivity?: number
}

export interface LolPremadeVoiceLocalSettingsCategoryResource {
  data?: LolPremadeVoiceLocalSettingsCategoryDataResource
  /** @format int32 */
  schemaVersion?: number
}

export interface LolPremadeVoiceLoginSession {
  connected?: boolean
}

export interface LolPremadeVoiceParticipantResource {
  /** @format int32 */
  energy?: number
  id?: string
  isMuted?: boolean
  isSpeaking?: boolean
  name?: string
  /** @format int32 */
  volume?: number
}

export interface LolPremadeVoicePartyDto {
  commsEnabled?: boolean
  partyId?: string
  players?: Record<string, LolPremadeVoicePlayerDto>
}

export enum LolPremadeVoicePartyMemberRoleEnum {
  LEADER = 'LEADER',
  MEMBER = 'MEMBER',
  INVITED = 'INVITED',
  HOLD = 'HOLD',
  KICKED = 'KICKED',
  DECLINED = 'DECLINED'
}

export interface LolPremadeVoicePlayerDto {
  displayName?: string
  partyId?: string
  puuid?: string
  role?: LolPremadeVoicePartyMemberRoleEnum
  /** @format int64 */
  summonerId?: number
}

export interface LolPremadeVoicePremadeVoiceParticipantDto {
  displayName?: string
  /** @format int32 */
  energy?: number
  isMuted?: boolean
  isSpeaking?: boolean
  participantId?: string
  puuid?: string
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  volume?: number
}

export interface LolPremadeVoicePushToTalkKey {
  /** @format int32 */
  key?: number
}

export interface LolPremadeVoicePushToTalkResource {
  pttEnabled?: boolean
  pttKeyBinding?: string
}

export interface LolPremadeVoiceSessionResource {
  id?: string
  isMuted?: boolean
  isTransmitEnabled?: boolean
  participants?: LolPremadeVoiceParticipantResource[]
  status?: LolPremadeVoiceSessionStatus
  /** @format int32 */
  volume?: number
}

export enum LolPremadeVoiceSessionStatus {
  Active = 'active',
  OnHold = 'onHold'
}

export interface LolPremadeVoiceSettingsResource {
  autoJoin?: boolean
  currentCaptureDeviceHandle?: string
  inputMode?: LolPremadeVoiceInputMode
  localMicMuted?: boolean
  loopbackEnabled?: boolean
  /** @format int32 */
  micLevel?: number
  muteOnConnect?: boolean
  pttActive?: boolean
  pttKey?: string
  vadActive?: boolean
  /** @format int32 */
  vadHangoverTime?: number
  /** @format int32 */
  vadSensitivity?: number
}

export interface LolPremadeVoiceStateResource {
  connected?: boolean
}

export interface LolPremadeVoiceSummoner {
  /** @format int64 */
  accountId?: number
  puuid?: string
}

export interface LolPremadeVoiceVoiceAvailability {
  connectedToVoiceServer?: boolean
  disabledAfterLogin?: boolean
  enabled?: boolean
  showDisconnectedState?: boolean
  showUI?: boolean
  voiceChannelAvailable?: boolean
}

export interface LolPublishingContentRegionLocale {
  locale?: string
}

export interface LolPurchaseWidgetBalance {
  /** @format int32 */
  amount?: number
  currencyType?: string
}

export interface LolPurchaseWidgetBaseSkinLineDto {
  collectionCardPath?: string
  collectionDescription?: string
  items?: LolPurchaseWidgetSkinLineItemDto[]
  localizedName?: string
  pricingOptions?: LolPurchaseWidgetPriceOptionDto[]
  skinLineDescriptions?: LolPurchaseWidgetSkinLineDescriptionDto[]
  splashPath?: string
  tilePath?: string
  uncenteredSplashPath?: string
}

export interface LolPurchaseWidgetBundledItemPricingInfo {
  discountPrices?: LolPurchaseWidgetDiscountPricingInfo[]
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  /** @format int32 */
  quantity?: number
}

export interface LolPurchaseWidgetCapOffer {
  active?: boolean
  createdDate?: string
  id?: string
  label?: string
  merchantId?: string
  payload?: LolPurchaseWidgetCapOfferPayloadEntry[]
  productId?: string
  startDate?: string
  typeId?: string
}

export interface LolPurchaseWidgetCapOfferPayloadEntry {
  fulfillmentTypeId?: string
  inventoryTypeUUID?: string
  itemInstanceId?: string
  itemPriceMap?: Record<string, number>
}

export interface LolPurchaseWidgetCapOrdersDataDto {
  id?: string
  location?: string
  purchaser?: LolPurchaseWidgetCapOrdersTypedIdentifierDto
  source?: string
  subOrders?: LolPurchaseWidgetCapOrdersSubOrderDto[]
}

export interface LolPurchaseWidgetCapOrdersMetaDto {
  xid?: string
}

export interface LolPurchaseWidgetCapOrdersOfferContextDto {
  paymentOption?: string
  /** @format int32 */
  quantity?: number
}

export interface LolPurchaseWidgetCapOrdersOfferDto {
  id?: string
  productId?: string
}

export interface LolPurchaseWidgetCapOrdersOrderDto {
  data?: LolPurchaseWidgetCapOrdersDataDto
  meta?: LolPurchaseWidgetCapOrdersMetaDto
}

export interface LolPurchaseWidgetCapOrdersSubOrderDto {
  offer?: LolPurchaseWidgetCapOrdersOfferDto
  offerContext?: LolPurchaseWidgetCapOrdersOfferContextDto
  recipientId?: string
}

export interface LolPurchaseWidgetCapOrdersTypedIdentifierDto {
  id?: string
  typeId?: string
}

export interface LolPurchaseWidgetCatalogPluginItem {
  active?: boolean
  description?: string
  imagePath?: string
  /** @format int64 */
  inactiveDate?: number
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  itemInstanceId?: string
  metadata?: LolPurchaseWidgetItemMetadataEntry[]
  name?: string
  owned?: boolean
  prices?: LolPurchaseWidgetCatalogPluginPrice[]
  /** @format int64 */
  purchaseDate?: number
  questSkinInfo?: LolPurchaseWidgetSkinLineInfo
  /** @format int64 */
  releaseDate?: number
  subInventoryType?: string
  subTitle?: string
  tags?: string[]
}

export interface LolPurchaseWidgetCatalogPluginItemAssets {
  colors?: string[]
  emblems?: LolPurchaseWidgetChampionSkinEmblem[]
  iconPath?: string
  splashPath?: string
  tilePath?: string
}

export interface LolPurchaseWidgetCatalogPluginItemWithDetails {
  assets?: LolPurchaseWidgetCatalogPluginItemAssets
  bundledDiscountPrices?: LolPurchaseWidgetCatalogPluginPrice[]
  bundledItems?: LolPurchaseWidgetCatalogPluginItemWithDetails[]
  item?: LolPurchaseWidgetCatalogPluginItem
  minimumBundlePrices?: LolPurchaseWidgetCatalogPluginPrice[]
  /** @format int32 */
  quantity?: number
  requiredItems?: LolPurchaseWidgetCatalogPluginItemWithDetails[]
}

export interface LolPurchaseWidgetCatalogPluginPrice {
  /** @format int64 */
  cost?: number
  costType?: string
  currency?: string
  sale?: LolPurchaseWidgetCatalogPluginSale
}

export interface LolPurchaseWidgetCatalogPluginSale {
  /** @format int64 */
  cost?: number
  /** @format float */
  discount?: number
  endDate?: string
  startDate?: string
}

export interface LolPurchaseWidgetChampionSkinEmblem {
  emblemPath?: LolPurchaseWidgetChampionSkinEmblemPath
  emblemPosition?: LolPurchaseWidgetChampionSkinEmblemPosition
  name?: string
}

export interface LolPurchaseWidgetChampionSkinEmblemPath {
  large?: string
  small?: string
}

export interface LolPurchaseWidgetChampionSkinEmblemPosition {
  horizontal?: string
  vertical?: string
}

export interface LolPurchaseWidgetDiscountPricingInfo {
  /** @format int32 */
  cost?: number
  costType?: string
  currency?: string
  /** @format float */
  discount?: number
}

export interface LolPurchaseWidgetItemChoiceDetails {
  backgroundImage?: string
  contents?: LolPurchaseWidgetItemDetails[]
  discount?: string
  displayType?: string
  /** @format int32 */
  fullPrice?: number
  item?: LolPurchaseWidgetCatalogPluginItem
  purchaseOptions?: LolPurchaseWidgetPurchaseOption[]
}

export interface LolPurchaseWidgetItemChoices {
  choices?: LolPurchaseWidgetItemChoiceDetails[]
  validationErrors?: LolPurchaseWidgetValidationErrorEntry[]
}

export interface LolPurchaseWidgetItemCost {
  /** @format int64 */
  cost?: number
  currency?: string
  /** @format float */
  discount?: number
}

export interface LolPurchaseWidgetItemDefinition {
  assets?: LolPurchaseWidgetCatalogPluginItemAssets
  bundledItemPrice?: LolPurchaseWidgetBundledItemPricingInfo
  description?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  metadata?: LolPurchaseWidgetItemMetadataEntry[]
  name?: string
  owned?: boolean
  subInventoryType?: string
  subTitle?: string
  tags?: string[]
}

export interface LolPurchaseWidgetItemDetails {
  description?: string
  iconUrl?: string
  subTitle?: string
  title?: string
}

export interface LolPurchaseWidgetItemKey {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export interface LolPurchaseWidgetItemMetadataEntry {
  type?: string
  value?: string
}

export interface LolPurchaseWidgetItemOwnership {
  itemKey?: LolPurchaseWidgetItemKey
  /** @format int32 */
  quantity?: number
}

export interface LolPurchaseWidgetItemPrice {
  currencyType?: string
  /** @format int64 */
  price?: number
  purchasable?: boolean
}

export interface LolPurchaseWidgetItemSale {
  /** @format float */
  discount?: number
  endDate?: string
  startDate?: string
}

export interface LolPurchaseWidgetLoginSession {
  /** @format int64 */
  accountId?: number
  idToken?: string
  puuid?: string
  state?: LolPurchaseWidgetLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolPurchaseWidgetLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolPurchaseWidgetOrderNotificationResource {
  eventType?: string
  eventTypeId?: string
  status?: string
}

export interface LolPurchaseWidgetPriceDetail {
  itemKey?: LolPurchaseWidgetItemKey
  price?: LolPurchaseWidgetItemPrice
}

export interface LolPurchaseWidgetPriceOptionDto {
  currencyImagePath?: string
  currencyName?: string
  currencyPaymentOption?: string
  currencyType?: string
  /** @format int64 */
  price?: number
}

export interface LolPurchaseWidgetPurchasableItem {
  bundledItems?: LolPurchaseWidgetItemDefinition[]
  dependencies?: LolPurchaseWidgetItemDefinition[]
  item?: LolPurchaseWidgetItemDefinition
  purchaseOptions?: LolPurchaseWidgetPurchaseOption[]
  sale?: LolPurchaseWidgetItemSale
  validationErrors?: LolPurchaseWidgetValidationErrorEntry[]
}

export interface LolPurchaseWidgetPurchaseItem {
  itemKey?: LolPurchaseWidgetItemKey
  purchaseCurrencyInfo?: LolPurchaseWidgetItemPrice
  /** @format int32 */
  quantity?: number
  source?: string
}

export enum LolPurchaseWidgetPurchaseOfferOrderStates {
  NOT_STARTED = 'NOT_STARTED',
  IN_PROGRESS = 'IN_PROGRESS',
  FAIL = 'FAIL',
  SUCCESS = 'SUCCESS'
}

export interface LolPurchaseWidgetPurchaseOfferOrderStatus {
  message?: string
  orderState?: LolPurchaseWidgetPurchaseOfferOrderStates
}

export interface LolPurchaseWidgetPurchaseOfferOrderStatuses {
  statuses?: Record<string, LolPurchaseWidgetPurchaseOfferOrderStatus>
}

export interface LolPurchaseWidgetPurchaseOfferRequestV3 {
  currencyType?: string
  offerId?: string
  /** @format int32 */
  price?: number
  /** @format int32 */
  quantity?: number
}

export interface LolPurchaseWidgetPurchaseOfferResponseV3 {
  legacy?: boolean
  orderDto?: LolPurchaseWidgetCapOrdersOrderDto
}

export interface LolPurchaseWidgetPurchaseOption {
  priceDetails?: LolPurchaseWidgetPriceDetail[]
}

export interface LolPurchaseWidgetPurchaseRequest {
  items?: LolPurchaseWidgetPurchaseItem[]
}

export interface LolPurchaseWidgetPurchaseResponse {
  items?: LolPurchaseWidgetPurchaseItem[]
  transactions?: LolPurchaseWidgetTransaction[]
  useRMSConfirmation?: boolean
}

export interface LolPurchaseWidgetPurchaseWidgetConfig {
  alwaysShowPurchaseDisclaimer?: boolean
  enabled?: boolean
  nonRefundableDisclaimerEnabled?: boolean
}

export interface LolPurchaseWidgetRiotMessagingServiceMessage {
  payload?: string
  resource?: string
  service?: string
  /** @format int64 */
  timestamp?: number
  version?: string
}

export interface LolPurchaseWidgetSale {
  endDate?: string
  prices?: LolPurchaseWidgetItemCost[]
  startDate?: string
}

export interface LolPurchaseWidgetSkinLineDescriptionDto {
  description?: string
  iconImagePath?: string
  title?: string
}

export interface LolPurchaseWidgetSkinLineDescriptionInfo {
  description?: string
  iconPath?: string
  title?: string
}

export interface LolPurchaseWidgetSkinLineInfo {
  collectionCardPath?: string
  collectionDescription?: string
  descriptionInfo?: LolPurchaseWidgetSkinLineDescriptionInfo[]
  name?: string
  splashPath?: string
  tiers?: LolPurchaseWidgetSkinLineTier[]
  tilePath?: string
  uncenteredSplashPath?: string
}

export interface LolPurchaseWidgetSkinLineItemDto {
  largeImagePath?: string
  largeVideoPath?: string
  localizedLongName?: string
  localizedShortName?: string
  thumbnailImagePath?: string
}

export interface LolPurchaseWidgetSkinLineTier {
  collectionSplashVideoPath?: string
  description?: string
  /** @format int64 */
  id?: number
  loadScreenPath?: string
  name?: string
  shortName?: string
  splashPath?: string
  splashVideoPath?: string
  /** @format int64 */
  stage?: number
  tilePath?: string
  uncenteredSplashPath?: string
}

export interface LolPurchaseWidgetTransaction {
  iconUrl?: string
  itemKey?: LolPurchaseWidgetItemKey
  itemName?: string
  transactionId?: string
}

export interface LolPurchaseWidgetValidateOfferError {
  errorKey?: string
  meta?: string
}

export interface LolPurchaseWidgetValidateOfferRequestV3 {
  offerId?: string
}

export interface LolPurchaseWidgetValidateOfferResponseV3 {
  validationErrors?: LolPurchaseWidgetValidateOfferError[]
}

export interface LolPurchaseWidgetValidationError {
  errorCode?: string
  errorDetails?: Record<string, string>
  message?: string
  responseItems?: string[]
}

export interface LolPurchaseWidgetValidationErrorEntry {
  id?: string
}

export interface LolPurchaseWidgetValidationRequest {
  items?: LolPurchaseWidgetValidationRequestItem[]
  ownedItems?: LolPurchaseWidgetItemOwnership[]
}

export interface LolPurchaseWidgetValidationRequestItem {
  itemKey?: LolPurchaseWidgetItemKey
  /** @format int32 */
  quantity?: number
}

export interface LolPurchaseWidgetValidationResponse {
  items?: LolPurchaseWidgetValidationResponseItem[]
  valid?: boolean
}

export interface LolPurchaseWidgetValidationResponseItem {
  description?: string
  itemKey?: LolPurchaseWidgetItemKey
  name?: string
  /** @format int32 */
  quantity?: number
  sale?: LolPurchaseWidgetSale
  validationCurrencyInfo?: LolPurchaseWidgetItemPrice[]
}

export interface LolPurchaseWidgetWallet {
  /** @format int64 */
  accountId?: number
  balances?: LolPurchaseWidgetBalance[]
  /** @format int32 */
  version?: number
}

export interface LolRankedAchievedTier {
  /** @format int64 */
  division?: number
  queueType?: LolRankedLeagueQueueType
  tier?: LolRankedLeagueTier
}

export interface LolRankedEndOfGameStatsBlock {
  /** @format int64 */
  gameId?: number
}

export interface LolRankedEosNotificationResource {
  division?: string
  notificationName?: string
  notificationType?: string
  queue?: string
  /** @format int64 */
  seasonEndTime?: number
  tier?: string
}

export enum LolRankedEosNotificationType {
  FIRST_WARNING = 'FIRST_WARNING',
  SECOND_WARNING = 'SECOND_WARNING',
  SEASON_ENDED = 'SEASON_ENDED'
}

export interface LolRankedEosNotificationsConfig {
  config?: LolRankedEosNotificationsConfigEntry[]
}

export interface LolRankedEosNotificationsConfigEntry {
  name?: string
  /** @format int64 */
  offsetTime1?: number
  /** @format int64 */
  offsetTime2?: number
  /** @format int64 */
  offsetTime3?: number
}

export interface LolRankedEosRewardsConfig {
  config?: LolRankedEosRewardsConfigEntry[]
}

export interface LolRankedEosRewardsConfigEntry {
  rewards?: Record<string, string>
  /** @format int32 */
  season?: number
}

export interface LolRankedEosSettingsData {
  notificationShown?: boolean
}

export interface LolRankedEosSettingsResource {
  data?: LolRankedEosSettingsData
  /** @format int32 */
  schemaVersion?: number
}

export interface LolRankedGameflowGameData {
  queue?: LolRankedQueue
}

export enum LolRankedGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolRankedGameflowSession {
  gameData?: LolRankedGameflowGameData
  phase?: LolRankedGameflowPhase
}

export interface LolRankedGlobalNotification {
  notifyReason?: string
  participantId?: string
  /** @format int32 */
  position?: number
  queueType?: string
  tier?: string
}

export interface LolRankedLcuLeagueNotification {
  /** @format int32 */
  afkLpPenaltyAmount?: number
  /** @format int32 */
  afkLpPenaltyLevel?: number
  canDemoteFromTier?: boolean
  changeReason?: string
  /** @format int32 */
  consolationLpUsed?: number
  displayType?: LolRankedNotificationDisplayType
  division?: LolRankedLeagueDivision
  eligibleForPromoHelper?: boolean
  /** @format int64 */
  gameId?: number
  /** @format int64 */
  id?: number
  /** @format int32 */
  leaguePoints?: number
  /** @format int32 */
  leaguePointsDelta?: number
  miniseriesProgress?: string
  /** @format int32 */
  miniseriesWins?: number
  msgId?: string
  notifyReason?: string
  /** @format int32 */
  numberOfPromotions?: number
  promoSeriesForRanksEnabled?: boolean
  /** @format int32 */
  provisionalGamesRemaining?: number
  queueType?: LolRankedLeagueQueueType
  /** @format int32 */
  ratedRating?: number
  /** @format int32 */
  ratedRatingDelta?: number
  ratedTier?: LolRankedRatedTier
  rewardEarnedId?: string
  rewardEarnedType?: string
  splitPointsNotification?: LolRankedSplitPointsNotification
  tier?: LolRankedLeagueTier
  /** @format int64 */
  timeUntilInactivityStatusChanges?: number
  wasAfkOrLeaver?: boolean
}

export enum LolRankedLeagueDivision {
  I = 'I',
  II = 'II',
  III = 'III',
  IV = 'IV',
  V = 'V',
  NA = 'NA'
}

export interface LolRankedLeagueDivisionInfo {
  /** @format int64 */
  apexUnlockTimeMillis?: number
  division?: LolRankedLeagueDivision
  /** @format int32 */
  maxLeagueSize?: number
  /** @format int32 */
  minLpForApexTier?: number
  standings?: LolRankedLeagueStanding[]
  tier?: LolRankedLeagueTier
  /** @format int64 */
  topNumberOfPlayers?: number
}

export interface LolRankedLeagueLadderDTO {
  /** @format int64 */
  apexUnlockTimeMillis?: number
  entries?: LolRankedLeagueLadderEntryDTO[]
  /** @format int32 */
  maxLeagueSize?: number
  /** @format int32 */
  minLpForTier?: number
  /** @format int64 */
  nextApexUpdate?: number
  /** @format int32 */
  provisionalGameThreshold?: number
  queueType?: string
  tier?: string
  /** @format int32 */
  topNumberOfPlayers?: number
}

export interface LolRankedLeagueLadderEntryDTO {
  earnedRegaliaRewardIds?: string[]
  /** @format int32 */
  leaguePoints?: number
  /** @format int32 */
  losses?: number
  miniSeriesProgress?: string
  /** @format int32 */
  previousDayLeaguePosition?: number
  previousSeasonAchievedRank?: string
  previousSeasonAchievedTier?: string
  /** @format int32 */
  provisionalGamesRemaining?: number
  puuid?: string
  rank?: string
  /** @format int64 */
  summonerId?: number
  summonerName?: string
  tier?: string
  /** @format int32 */
  wins?: number
}

export interface LolRankedLeagueLadderInfo {
  divisions?: LolRankedLeagueDivisionInfo[]
  /** @format int64 */
  nextApexUpdateMillis?: number
  /** @format int32 */
  provisionalGameThreshold?: number
  queueType?: LolRankedLeagueQueueType
  requestedRankedEntry?: LolRankedLeagueStanding
  tier?: LolRankedLeagueTier
}

export interface LolRankedLeagueNotification {
  /** @format int32 */
  afkLpPenaltyAmount?: number
  /** @format int32 */
  afkLpPenaltyLevel?: number
  canDemoteFromTier?: boolean
  changeReason?: string
  /** @format int32 */
  consolationLpUsed?: number
  eligibleForPromoHelper?: boolean
  /** @format int64 */
  gameId?: number
  /** @format int32 */
  leaguePoints?: number
  /** @format int32 */
  leaguePointsDelta?: number
  miniseriesProgress?: string
  notifyReason?: string
  promoSeriesForRanksEnabled?: boolean
  /** @format int32 */
  provisionalGamesRemaining?: number
  queueType?: string
  rank?: string
  /** @format int32 */
  ratedRating?: number
  /** @format int32 */
  ratedRatingDelta?: number
  ratedTier?: string
  /** @format int32 */
  splitPoints?: number
  splitPointsBreakdown?: Record<string, number>
  tier?: string
  wasAfkOrLeaver?: boolean
}

export interface LolRankedLeagueNotifications {
  globalNotifications?: LolRankedGlobalNotification[]
  notifications?: LolRankedLeagueNotification[]
}

export enum LolRankedLeagueQueueType {
  NONE = 'NONE',
  RANKEDSOLO5X5 = 'RANKED_SOLO_5x5',
  RANKED_FLEX_SR = 'RANKED_FLEX_SR',
  RANKED_FLEX_TT = 'RANKED_FLEX_TT',
  RANKED_TFT = 'RANKED_TFT',
  RANKED_TFT_TURBO = 'RANKED_TFT_TURBO',
  RANKED_TFT_PAIRS = 'RANKED_TFT_PAIRS'
}

export interface LolRankedLeagueStanding {
  division?: LolRankedLeagueDivision
  earnedRegaliaRewardIds?: string[]
  isProvisional?: boolean
  /** @format int64 */
  leaguePoints?: number
  /** @format int64 */
  losses?: number
  miniseriesResults?: LolRankedMiniseries[]
  pendingDemotion?: boolean
  pendingPromotion?: boolean
  /** @format int32 */
  position?: number
  /** @format int32 */
  positionDelta?: number
  /** @format int32 */
  previousPosition?: number
  previousSeasonAchievedDivision?: LolRankedLeagueDivision
  previousSeasonAchievedTier?: LolRankedLeagueTier
  /** @format int32 */
  provisionalGamesRemaining?: number
  puuid?: string
  /** @format int32 */
  rankedRegaliaLevel?: number
  /** @format int64 */
  summonerId?: number
  summonerName?: string
  tier?: LolRankedLeagueTier
  /** @format int64 */
  wins?: number
}

export enum LolRankedLeagueTier {
  NONE = 'NONE',
  IRON = 'IRON',
  BRONZE = 'BRONZE',
  SILVER = 'SILVER',
  GOLD = 'GOLD',
  PLATINUM = 'PLATINUM',
  DIAMOND = 'DIAMOND',
  MASTER = 'MASTER',
  GRANDMASTER = 'GRANDMASTER',
  CHALLENGER = 'CHALLENGER'
}

export interface LolRankedLeagueTierAndRankDTO {
  playerOrTeamId?: string
  playerOrTeamName?: string
  queueType?: string
  rank?: string
  tier?: string
}

export interface LolRankedLeaguesSeasonRewardConfig {
  QualificationWarningEnabled?: boolean
}

export interface LolRankedLoginSession {
  /** @format int64 */
  accountId?: number
  state?: LolRankedLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolRankedLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export enum LolRankedMiniseries {
  W = 'W',
  L = 'L',
  N = 'N'
}

export enum LolRankedNotificationDisplayType {
  NONE = 'NONE',
  TOAST = 'TOAST',
  MODAL = 'MODAL',
  VIGNETTE = 'VIGNETTE'
}

export interface LolRankedParticipantTiers {
  achievedTiers?: LolRankedAchievedTier[]
  /** @format int64 */
  summonerId?: number
}

export interface LolRankedQueue {
  type?: Record<string, any>
}

export interface LolRankedQueuesAndPuuidsPayload {
  queueTypes?: LolRankedLeagueQueueType[]
  summonerIds?: number[]
}

export interface LolRankedRankedQueueStats {
  division?: LolRankedLeagueDivision
  isProvisional?: boolean
  /** @format int32 */
  leaguePoints?: number
  /** @format int32 */
  losses?: number
  miniSeriesProgress?: string
  previousSeasonAchievedDivision?: LolRankedLeagueDivision
  previousSeasonAchievedTier?: LolRankedLeagueTier
  previousSeasonEndDivision?: LolRankedLeagueDivision
  previousSeasonEndTier?: LolRankedLeagueTier
  /** @format int32 */
  provisionalGameThreshold?: number
  /** @format int32 */
  provisionalGamesRemaining?: number
  queueType?: LolRankedLeagueQueueType
  /** @format int32 */
  ratedRating?: number
  ratedTier?: LolRankedRatedTier
  tier?: LolRankedLeagueTier
  warnings?: LolRankedRankedQueueWarnings
  /** @format int32 */
  wins?: number
}

export interface LolRankedRankedQueueStatsDTO {
  /** @format int32 */
  leaguePoints?: number
  /** @format int32 */
  losses?: number
  miniSeriesProgress?: string
  previousSeasonAchievedRank?: string
  previousSeasonAchievedTier?: string
  previousSeasonEndRank?: string
  previousSeasonEndTier?: string
  /** @format int32 */
  provisionalGameThreshold?: number
  /** @format int32 */
  provisionalGamesRemaining?: number
  queueType?: string
  rank?: string
  /** @format int32 */
  ratedRating?: number
  ratedTier?: string
  tier?: string
  warnings?: LolRankedRankedQueueWarningsDTO
  /** @format int32 */
  wins?: number
}

export interface LolRankedRankedQueueWarnings {
  /** @format int32 */
  daysUntilDecay?: number
  /** @format int32 */
  demotionWarning?: number
  displayDecayWarning?: boolean
  /** @format int64 */
  timeUntilInactivityStatusChanges?: number
}

export interface LolRankedRankedQueueWarningsDTO {
  /** @format int32 */
  apexDaysUntilDecay?: number
  /** @format int32 */
  daysUntilDecay?: number
  /** @format int32 */
  demotionWarning?: number
  displayDecayWarning?: boolean
  /** @format int64 */
  timeUntilInactivityStatusChanges?: number
}

export interface LolRankedRankedStats {
  earnedRegaliaRewardIds?: string[]
  highestPreviousSeasonAchievedDivision?: LolRankedLeagueDivision
  highestPreviousSeasonAchievedTier?: LolRankedLeagueTier
  highestPreviousSeasonEndDivision?: LolRankedLeagueDivision
  highestPreviousSeasonEndTier?: LolRankedLeagueTier
  highestRankedEntry?: LolRankedRankedQueueStats
  highestRankedEntrySR?: LolRankedRankedQueueStats
  queueMap?: Record<string, LolRankedRankedQueueStats>
  queues?: LolRankedRankedQueueStats[]
  /** @format int32 */
  rankedRegaliaLevel?: number
  seasons?: Record<string, LolRankedSeasonDTO>
  splitsProgress?: Record<string, number>
}

export interface LolRankedRankedStatsDTO {
  earnedRegaliaRewardIds?: string[]
  highestPreviousSeasonAchievedRank?: string
  highestPreviousSeasonAchievedTier?: string
  highestPreviousSeasonEndRank?: string
  highestPreviousSeasonEndTier?: string
  queues?: LolRankedRankedQueueStatsDTO[]
  seasons?: Record<string, LolRankedSeasonDTO>
  splitsProgress?: Record<string, number>
}

export interface LolRankedRatedLadderEntryDTO {
  /** @format int32 */
  previousUpdateLadderPosition?: number
  puuid?: string
  /** @format int32 */
  ratedRating?: number
  ratedTier?: string
  /** @format int64 */
  summonerId?: number
  summonerName?: string
  /** @format int32 */
  wins?: number
}

export interface LolRankedRatedLadderInfo {
  queueType?: LolRankedLeagueQueueType
  standings?: LolRankedRatedLadderStanding[]
}

export interface LolRankedRatedLadderStanding {
  /** @format int32 */
  leaguePoints?: number
  /** @format int32 */
  position?: number
  /** @format int32 */
  positionDelta?: number
  /** @format int32 */
  previousPosition?: number
  puuid?: string
  ratedTier?: LolRankedRatedTier
  /** @format int64 */
  summonerId?: number
  summonerName?: string
  /** @format int32 */
  wins?: number
}

export enum LolRankedRatedTier {
  NONE = 'NONE',
  GRAY = 'GRAY',
  GREEN = 'GREEN',
  BLUE = 'BLUE',
  PURPLE = 'PURPLE',
  ORANGE = 'ORANGE'
}

export interface LolRankedRewardsInfo {
  /** @format int32 */
  currentSeasonId?: number
  currentSplit?: LolRankedSeasonSplit
  /** @format int32 */
  currentSplitId?: number
  rewardInfoByRewardId?: Record<string, LolRankedSplitReward>
  splits?: LolRankedSeasonSplit[]
}

export interface LolRankedSeasonDTO {
  /** @format int64 */
  currentSeasonEnd?: number
  /** @format int32 */
  currentSeasonId?: number
  /** @format int64 */
  nextSeasonStart?: number
}

export interface LolRankedSeasonSplit {
  /** @format int64 */
  endTimeMillis?: number
  rewardTrack?: LolRankedSplitRewardGroup[]
  /** @format int32 */
  seasonId?: number
  /** @format int32 */
  splitId?: number
  /** @format int64 */
  startTimeMillis?: number
}

export interface LolRankedSeasonSplitDTO {
  /** @format int64 */
  endTime?: number
  rewardTrack?: LolRankedSplitRewardGroupDTO[]
  /** @format int32 */
  seasonId?: number
  /** @format int32 */
  splitId?: number
  /** @format int64 */
  startTime?: number
}

export interface LolRankedSequenceEvent {
  name?: string
  /** @format int32 */
  priority?: number
}

export enum LolRankedSeverity {
  WARNING = 'WARNING',
  ALERT = 'ALERT'
}

export interface LolRankedSignedRankedStatsDTO {
  earnedRegaliaRewardIds?: string[]
  highestPreviousSeasonAchievedRank?: string
  highestPreviousSeasonAchievedTier?: string
  highestPreviousSeasonEndRank?: string
  highestPreviousSeasonEndTier?: string
  jwt?: string
  queues?: LolRankedRankedQueueStatsDTO[]
  seasons?: Record<string, LolRankedSeasonDTO>
  splitsProgress?: Record<string, number>
}

export interface LolRankedSocialLeaderboardRankedQueueStats {
  division?: LolRankedLeagueDivision
  isProvisional?: boolean
  /** @format int32 */
  leaguePoints?: number
  /** @format int32 */
  losses?: number
  miniSeriesProgress?: string
  /** @format int32 */
  provisionalGameThreshold?: number
  /** @format int32 */
  provisionalGamesRemaining?: number
  queueType?: LolRankedLeagueQueueType
  /** @format int32 */
  ratedRating?: number
  ratedTier?: LolRankedRatedTier
  tier?: LolRankedLeagueTier
  /** @format int32 */
  wins?: number
}

export interface LolRankedSocialLeaderboardRankedQueueStatsDTO {
  /** @format int32 */
  leaguePoints?: number
  /** @format int32 */
  losses?: number
  miniSeriesProgress?: string
  /** @format int32 */
  provisionalGameThreshold?: number
  /** @format int32 */
  provisionalGamesRemaining?: number
  queueType?: string
  rank?: string
  /** @format int32 */
  ratedRating?: number
  ratedTier?: string
  tier?: string
  /** @format int32 */
  wins?: number
}

export interface LolRankedSplitPointsNotification {
  nextRewardId?: string
  nextRewardType?: string
  /** @format int32 */
  previousSplitPointsRequired?: number
  /** @format int32 */
  splitPointsAfterGame?: number
  /** @format int32 */
  splitPointsBeforeGame?: number
  splitPointsBreakdown?: Record<string, number>
  /** @format int32 */
  splitPointsDelta?: number
  /** @format int32 */
  splitPointsRequired?: number
}

export interface LolRankedSplitReward {
  description?: string
  id?: string
  /** @format int32 */
  pointsRequired?: number
  /** @format int32 */
  quantity?: number
  /** @format int32 */
  regaliaLevel?: number
  rewardType?: string
  /** @format int32 */
  splitId?: number
}

export interface LolRankedSplitRewardDTO {
  defaultRewardId?: string
  metadata?: LolRankedSplitRewardsMetaData
  rewardType?: string
  tieredRewardIds?: Record<string, string>
}

export interface LolRankedSplitRewardGroup {
  rewards?: LolRankedSplitReward[]
  /** @format int32 */
  splitPoints?: number
}

export interface LolRankedSplitRewardGroupDTO {
  rewards?: LolRankedSplitRewardDTO[]
  /** @format int32 */
  splitPoints?: number
}

export interface LolRankedSplitRewardsMetaData {
  description?: string
  /** @format int32 */
  quantity?: number
}

export interface LolRankedSummoner {
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolRegaliaAccountIdAndSummonerId {
  /** @format int64 */
  summonerId?: number
}

export interface LolRegaliaChatPresence {
  /** @format int32 */
  icon?: number
  lol?: LolRegaliaChatPresenceLolData
  /** @format int64 */
  summonerId?: number
}

export interface LolRegaliaChatPresenceExternal {
  /** @format int32 */
  icon?: number
  id?: string
  lol?: Record<string, string>
  /** @format int64 */
  summonerId?: number
}

export interface LolRegaliaChatPresenceLolData {
  /** @format int32 */
  level?: number
  rankedLeagueDivision?: LolRegaliaLeagueDivision
  rankedLeagueQueue?: LolRegaliaLeagueQueueType
  rankedLeagueTier?: LolRegaliaLeagueTier
  rankedPrevSeasonDivision?: LolRegaliaLeagueDivision
  rankedPrevSeasonTier?: LolRegaliaLeagueTier
  /** @format int32 */
  rankedSplitRewardLevel?: number
  regalia?: LolRegaliaRegaliaSettings
}

export interface LolRegaliaItemKey {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export enum LolRegaliaLeagueDivision {
  I = 'I',
  II = 'II',
  III = 'III',
  IV = 'IV',
  V = 'V',
  NA = 'NA'
}

export enum LolRegaliaLeagueQueueType {
  NONE = 'NONE',
  RANKEDSOLO5X5 = 'RANKED_SOLO_5x5',
  RANKED_FLEX_SR = 'RANKED_FLEX_SR',
  RANKED_FLEX_TT = 'RANKED_FLEX_TT',
  RANKED_TFT = 'RANKED_TFT',
  RANKED_TFT_TURBO = 'RANKED_TFT_TURBO',
  RANKED_TFT_PAIRS = 'RANKED_TFT_PAIRS'
}

export enum LolRegaliaLeagueTier {
  NONE = 'NONE',
  IRON = 'IRON',
  BRONZE = 'BRONZE',
  SILVER = 'SILVER',
  GOLD = 'GOLD',
  PLATINUM = 'PLATINUM',
  DIAMOND = 'DIAMOND',
  MASTER = 'MASTER',
  GRANDMASTER = 'GRANDMASTER',
  CHALLENGER = 'CHALLENGER'
}

export interface LolRegaliaLoadout {
  id?: string
  loadout?: LolRegaliaRegaliaLoadout
  name?: string
  scope?: string
}

export interface LolRegaliaRankedQueueStats {
  division?: LolRegaliaLeagueDivision
  isProvisional?: boolean
  queueType?: LolRegaliaLeagueQueueType
  tier?: LolRegaliaLeagueTier
}

export interface LolRegaliaRankedStats {
  highestPreviousSeasonAchievedTier?: LolRegaliaLeagueTier
  highestRankedEntry?: LolRegaliaRankedQueueStats
  queues?: LolRegaliaRankedQueueStats[]
  /** @format int32 */
  rankedRegaliaLevel?: number
}

export interface LolRegaliaRegalia {
  bannerType?: string
  crestType?: string
  highestRankedEntry?: LolRegaliaRegaliaRankedEntry
  lastSeasonHighestRank?: LolRegaliaLeagueTier
  /** @format int32 */
  profileIconId?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolRegaliaRegaliaAsync {
  md5?: string
}

export enum LolRegaliaRegaliaBannerType {
  Blank = 'blank',
  LastSeasonHighestRank = 'lastSeasonHighestRank'
}

export enum LolRegaliaRegaliaCrestType {
  None = 'none',
  Prestige = 'prestige',
  Ranked = 'ranked'
}

export interface LolRegaliaRegaliaFrontendConfig {
  hovercardEnabled?: boolean
  selectionsEnabled?: boolean
}

export interface LolRegaliaRegaliaLoadout {
  REGALIA_BANNER_SLOT?: LolRegaliaItemKey
  REGALIA_CREST_SLOT?: LolRegaliaItemKey
}

export interface LolRegaliaRegaliaPlatformConfig {
  HovercardEnabled?: boolean
  SelectionsEnabled?: boolean
}

export interface LolRegaliaRegaliaPreferences {
  preferredBannerType?: string
  preferredCrestType?: string
}

export interface LolRegaliaRegaliaRankedEntry {
  division?: LolRegaliaLeagueDivision
  queueType?: LolRegaliaLeagueQueueType
  /** @format int32 */
  splitRewardLevel?: number
  tier?: LolRegaliaLeagueTier
}

export interface LolRegaliaRegaliaSettings {
  bannerType?: LolRegaliaRegaliaBannerType
  crestType?: LolRegaliaRegaliaCrestType
}

export interface LolRegaliaRegaliaSettingsExternal {
  /** @format int32 */
  bannerType?: number
  /** @format int32 */
  crestType?: number
}

export interface LolRegaliaRegaliaWithPreferences {
  bannerType?: string
  crestType?: string
  highestRankedEntry?: LolRegaliaRegaliaRankedEntry
  lastSeasonHighestRank?: LolRegaliaLeagueTier
  preferredBannerType?: string
  preferredCrestType?: string
  /** @format int32 */
  profileIconId?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolRegaliaSummoner {
  /** @format int32 */
  profileIconId?: number
  puuid?: string
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolRegaliaSummonerProfile {
  regalia?: string
}

export interface LolRegaliaSummonerProfileUpdate {
  key?: string
  value?: string
}

export interface LolReplaysClashPlaymodeRestrictedInfo {
  isRestricted?: boolean
}

export interface LolReplaysGameflowAvailability {
  state?: string
}

export interface LolReplaysGameflowGameClient {
  running?: boolean
}

export enum LolReplaysGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolReplaysGameflowSession {
  gameClient?: LolReplaysGameflowGameClient
  phase?: LolReplaysGameflowPhase
}

export enum LolReplaysGameflowWatchPhase {
  None = 'None',
  WatchStarted = 'WatchStarted',
  WatchInProgress = 'WatchInProgress',
  WatchFailedToLaunch = 'WatchFailedToLaunch'
}

export interface LolReplaysInstallPaths {
  gameExecutablePath?: string
  gameInstallRoot?: string
}

export enum LolReplaysMetadataState {
  Checking = 'checking',
  Found = 'found',
  Watch = 'watch',
  Download = 'download',
  Downloading = 'downloading',
  Incompatible = 'incompatible',
  MissingOrExpired = 'missingOrExpired',
  RetryDownload = 'retryDownload',
  Lost = 'lost',
  Unsupported = 'unsupported',
  Error = 'error'
}

export interface LolReplaysReplayContextData {
  componentType?: string
}

export interface LolReplaysReplayCreateMetadata {
  /** @format int64 */
  gameEnd?: number
  gameType?: string
  gameVersion?: string
  /** @format int32 */
  queueId?: number
}

export interface LolReplaysReplayMetadata {
  /** @format int32 */
  downloadProgress?: number
  /** @format int64 */
  gameId?: number
  state?: LolReplaysMetadataState
}

export interface LolReplaysReplaysConfiguration {
  gameVersion?: string
  isInTournament?: boolean
  isLoggedIn?: boolean
  isPatching?: boolean
  isPlayingGame?: boolean
  isPlayingReplay?: boolean
  isReplaysEnabled?: boolean
  isReplaysForEndOfGameEnabled?: boolean
  isReplaysForMatchHistoryEnabled?: boolean
  minServerVersion?: string
  /** @format double */
  minutesUntilReplayConsideredLost?: number
}

export interface LolReplaysReplaysDynamicConfig {
  MinSupportedGameServerVersion?: string
  /** @format double */
  MinutesUntilReplayConsideredLost?: number
}

export interface LolReplaysReplaysSettingsData {
  'highlights-folder-path'?: string
  'replays-folder-path'?: string
}

export interface LolReplaysReplaysSettingsResource {
  data?: LolReplaysReplaysSettingsData
}

export interface LolReplaysRoflFileMetadata {
  /** @format int32 */
  gameLength?: number
  gameVersion?: string
  /** @format int32 */
  lastGameChunkId?: number
  /** @format int32 */
  lastKeyFrameId?: number
}

export enum LolRewardsGrantStatus {
  PENDING_FULFILLMENT = 'PENDING_FULFILLMENT',
  PENDING_SELECTION = 'PENDING_SELECTION',
  FULFILLED = 'FULFILLED',
  FAILED = 'FAILED'
}

export interface LolRewardsGrantorDescription {
  appName?: string
  entityId?: string
}

export interface LolRewardsRMSPayload {
  affinities?: string[]
  productId?: string
}

export interface LolRewardsRegionLocale {
  locale?: string
  region?: string
}

export interface LolRewardsRequestDTOSelectionRequestDTO {
  data?: LolRewardsSelectionRequestDTO
  metadata?: LolRewardsRequestMetadataDTO
}

export interface LolRewardsRequestMetadataDTO {
  transactionId?: string
}

export interface LolRewardsResponseDTOSvcRewardGrant {
  data?: LolRewardsSvcRewardGrant
  metadata?: LolRewardsResponseMetadataDTO
}

export interface LolRewardsResponseDTOVectorSvcRewardGrant {
  data?: LolRewardsSvcRewardGrant[]
  metadata?: LolRewardsResponseMetadataDTO
}

export interface LolRewardsResponseDTOVectorSvcRewardGroup {
  data?: LolRewardsSvcRewardGroup[]
  metadata?: LolRewardsResponseMetadataDTO
}

export type LolRewardsResponseMetadataDTO = object

export interface LolRewardsReward {
  fulfillmentSource?: string
  id?: string
  itemId?: string
  itemType?: string
  localizations?: Record<string, string>
  media?: Record<string, string>
  /** @format int32 */
  quantity?: number
}

export interface LolRewardsRewardGrant {
  info?: LolRewardsSvcRewardGrant
  rewardGroup?: LolRewardsSvcRewardGroup
}

export enum LolRewardsRewardStatus {
  PENDING = 'PENDING',
  FULFILLED = 'FULFILLED',
  FAILED = 'FAILED'
}

export enum LolRewardsRewardStrategy {
  ALL = 'ALL',
  RANDOM = 'RANDOM',
  SELECTION = 'SELECTION'
}

export interface LolRewardsRewardsConfig {
  Enabled?: boolean
}

export interface LolRewardsSelectionRequestDTO {
  rewardGroupId?: string
  selections?: string[]
}

export interface LolRewardsSelectionStrategyConfig {
  /** @format int32 */
  maxSelectionsAllowed?: number
  /** @format int32 */
  minSelectionsAllowed?: number
}

export interface LolRewardsSvcRewardGrant {
  grantElements?: LolRewardsSvcRewardGrantElement[]
  granteeId?: string
  grantorDescription?: LolRewardsGrantorDescription
  id?: string
  rewardGroupId?: string
  selectedIds?: string[]
  status?: LolRewardsGrantStatus
  viewed?: boolean
}

export interface LolRewardsSvcRewardGrantElement {
  elementId?: string
  fulfillmentSource?: string
  itemId?: string
  itemType?: string
  localizations?: Record<string, string>
  media?: Record<string, string>
  /** @format int32 */
  quantity?: number
  status?: LolRewardsRewardStatus
}

export interface LolRewardsSvcRewardGroup {
  active?: boolean
  childRewardGroupIds?: string[]
  id?: string
  internalName?: string
  localizations?: Record<string, string>
  media?: Record<string, string>
  productId?: string
  rewardStrategy?: LolRewardsRewardStrategy
  rewards?: LolRewardsReward[]
  selectionStrategyConfig?: LolRewardsSelectionStrategyConfig
  types?: string[]
}

export interface LolRiotMessagingServiceChampionMasteryLevelUp {
  /** @format int32 */
  championId?: number
  /** @format int64 */
  championLevel?: number
  hasLeveledUp?: boolean
  /** @format int64 */
  id?: number
  /** @format int64 */
  playerId?: number
}

export enum LolRiotMessagingServiceGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolRiotMessagingServiceGameflowSession {
  phase?: LolRiotMessagingServiceGameflowPhase
}

export interface LolRiotclientUpgraderGameflowAvailability {
  isAvailable?: boolean
  state?: string
}

export interface LolRsoAuthAccessToken {
  /** @format int64 */
  expiry?: number
  scopes?: string[]
  token?: string
}

export interface LolRsoAuthAuthError {
  error?: string
  errorDescription?: string
}

export interface LolRsoAuthAuthHint {
  context?: Record<string, any>
  required?: boolean
  type?: LolRsoAuthAuthHintType
}

export enum LolRsoAuthAuthHintType {
  EmailVerification = 'email_verification',
  PasswordReset = 'password_reset',
  ParentalConsent = 'parental_consent',
  AmbiguousUsername = 'ambiguous_username'
}

export interface LolRsoAuthAuthorization {
  /** @format int64 */
  currentAccountId?: number
  currentPlatformId?: string
  subject?: string
}

export interface LolRsoAuthAuthorizationRequest {
  claims?: string[]
  clientId?: string
  scope?: string[]
  trustLevels?: LolRsoAuthRSOAuthorizationTrustLevel[]
}

export interface LolRsoAuthAuthorizationResponse {
  authorization?: LolRsoAuthImplicitAuthorization
  type?: string
}

export enum LolRsoAuthConfigReadinessEnum {
  NotReady = 'NotReady',
  Ready = 'Ready',
  Disabled = 'Disabled'
}

export interface LolRsoAuthConfigStatus {
  readiness?: LolRsoAuthConfigReadinessEnum
}

export enum LolRsoAuthConfigType {
  Public = 'public',
  Player = 'player'
}

export interface LolRsoAuthDeviceId {
  collectorServerName?: string
  frameUrl?: string
  installId?: string
  merchantId?: string
  sessionId?: string
}

export interface LolRsoAuthEntitlementsToken {
  entitlements?: string[]
  /** @format int64 */
  expiry?: number
  token?: string
}

export interface LolRsoAuthIdToken {
  /** @format int64 */
  expiry?: number
  token?: string
}

export interface LolRsoAuthImplicitAuthorization {
  accessToken?: LolRsoAuthAccessToken
  idToken?: LolRsoAuthIdToken
}

export interface LolRsoAuthPublicClientConfig {
  clientId?: string
  url?: string
}

export enum LolRsoAuthRSOAuthorizationTrustLevel {
  AlwaysTrusted = 'always_trusted',
  TrustedDevice = 'trusted_device',
  AlwaysVerify = 'always_verify'
}

export interface LolRsoAuthRSOConfigReadyState {
  ready?: boolean
}

export interface LolRsoAuthRSOJWTConfig {
  token?: string
}

export interface LolRsoAuthRSOPlayerCredentials {
  password?: string
  platformId?: string
  username?: string
}

export interface LolRsoAuthRegionStatus {
  enabled?: boolean
  isLQFallbackAllowed?: boolean
  isUserInfoEnabled?: boolean
  platformId?: string
}

export interface LolRsoAuthSessionResponse {
  error?: string
  type?: string
}

export interface LolRsoAuthUserInfo {
  userInfo?: string
}

export interface LolServiceStatusBroadcastMessage {
  content?: string
  messageKey?: string
  severity?: string
}

export interface LolServiceStatusBroadcastNotification {
  broadcastMessages?: LolServiceStatusBroadcastMessage[]
}

export interface LolServiceStatusLegacyServiceStatusMessage {
  content?: string
  created_at?: string
  heading?: string
  severity?: string
  translations?: LolServiceStatusLegacyServiceStatusTranslation[]
  updated_at?: string
}

export interface LolServiceStatusLegacyServiceStatusResponse {
  messages?: LolServiceStatusLegacyServiceStatusMessage[]
  status?: string
}

export interface LolServiceStatusLegacyServiceStatusTranslation {
  content?: string
  heading?: string
  locale?: string
}

export interface LolServiceStatusLoginDataPacket {
  broadcastNotification?: LolServiceStatusBroadcastNotification
}

export interface LolServiceStatusRegionLocaleResource {
  locale?: string
  region?: string
}

export interface LolServiceStatusRiotStatusIncident {
  archive_at?: string
  created_at?: string
  /** @format int64 */
  id?: number
  incident_severity?: string
  platforms?: string[]
  titles?: LolServiceStatusRiotStatusTitle[]
  updated_at?: string
  updates?: LolServiceStatusRiotStatusUpdate[]
}

export interface LolServiceStatusRiotStatusMaintenance {
  archive_at?: string
  created_at?: string
  /** @format int64 */
  id?: number
  maintenance_status?: string
  platforms?: string[]
  titles?: LolServiceStatusRiotStatusTitle[]
  updated_at?: string
  updates?: LolServiceStatusRiotStatusUpdate[]
}

export interface LolServiceStatusRiotStatusResource {
  id?: string
  incidents?: LolServiceStatusRiotStatusIncident[]
  locales?: string[]
  maintenances?: LolServiceStatusRiotStatusMaintenance[]
  name?: string
}

export interface LolServiceStatusRiotStatusTitle {
  content?: string
  locale?: string
}

export interface LolServiceStatusRiotStatusTranslation {
  content?: string
  locale?: string
}

export interface LolServiceStatusRiotStatusUpdate {
  author?: string
  created_at?: string
  /** @format int64 */
  id?: number
  publish?: boolean
  publish_locations?: string[]
  translations?: LolServiceStatusRiotStatusTranslation[]
  updated_at?: string
}

export interface LolServiceStatusServiceStatusResource {
  humanReadableUrl?: string
  status?: string
}

export interface LolServiceStatusTickerMessage {
  createdAt?: string
  heading?: string
  message?: string
  severity?: string
  updatedAt?: string
}

export interface LolSettingsLoginSession {
  /** @format int64 */
  accountId?: number
  gasToken?: Record<string, any>
  state?: LolSettingsLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolSettingsLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolSettingsSettingCategory {
  data?: Record<string, any>
  /** @format int32 */
  schemaVersion?: number
}

export interface LolShutdownShutdownNotification {
  additionalInfo?: string
  /** @format float */
  countdown?: number
  reason?: LolShutdownShutdownReason
}

export enum LolShutdownShutdownReason {
  Invalid = 'Invalid',
  PlatformMaintenance = 'PlatformMaintenance',
  LcuAlphaDisabled = 'LcuAlphaDisabled',
  PlayerBanned = 'PlayerBanned'
}

export enum LolSimpleDialogMessagesGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolSimpleDialogMessagesGameflowSession {
  phase?: LolSimpleDialogMessagesGameflowPhase
}

export interface LolSimpleDialogMessagesLocalMessageRequest {
  msgBody?: string[]
  msgType?: string
}

export interface LolSimpleDialogMessagesLoginDataPacket {
  simpleMessages?: LolSimpleDialogMessagesSimpleMessage[]
}

export interface LolSimpleDialogMessagesMessage {
  body?: Record<string, any>
  /** @format int64 */
  id?: number
  type?: string
}

export interface LolSimpleDialogMessagesSimpleMessage {
  /** @format int64 */
  accountId?: number
  msgId?: string
  params?: string[]
  type?: string
}

export interface LolSocialLeaderboardFriendResource {
  availability?: string
  /** @format int32 */
  icon?: number
  name?: string
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolSocialLeaderboardGiftingFriend {
  /** @format int64 */
  summonerId?: number
}

export enum LolSocialLeaderboardLeagueDivision {
  I = 'I',
  II = 'II',
  III = 'III',
  IV = 'IV',
  V = 'V',
  NA = 'NA'
}

export enum LolSocialLeaderboardLeagueQueueType {
  NONE = 'NONE',
  RANKEDSOLO5X5 = 'RANKED_SOLO_5x5',
  RANKED_FLEX_SR = 'RANKED_FLEX_SR',
  RANKED_FLEX_TT = 'RANKED_FLEX_TT',
  RANKED_TFT = 'RANKED_TFT',
  RANKED_TFT_TURBO = 'RANKED_TFT_TURBO',
  RANKED_TFT_PAIRS = 'RANKED_TFT_PAIRS'
}

export enum LolSocialLeaderboardLeagueTier {
  NONE = 'NONE',
  IRON = 'IRON',
  BRONZE = 'BRONZE',
  SILVER = 'SILVER',
  GOLD = 'GOLD',
  PLATINUM = 'PLATINUM',
  DIAMOND = 'DIAMOND',
  MASTER = 'MASTER',
  GRANDMASTER = 'GRANDMASTER',
  CHALLENGER = 'CHALLENGER'
}

export interface LolSocialLeaderboardRankedQueueStats {
  division?: LolSocialLeaderboardLeagueDivision
  isProvisional?: boolean
  /** @format int32 */
  leaguePoints?: number
  /** @format int32 */
  provisionalGamesRemaining?: number
  queueType?: LolSocialLeaderboardLeagueQueueType
  tier?: LolSocialLeaderboardLeagueTier
  /** @format int32 */
  wins?: number
}

export interface LolSocialLeaderboardRankedStats {
  queueMap?: Record<string, LolSocialLeaderboardRankedQueueStats>
}

export interface LolSocialLeaderboardSocialLeaderboardData {
  /** @format int64 */
  nextUpdateTime?: number
  rowData?: LolSocialLeaderboardSocialLeaderboardRowData[]
}

export interface LolSocialLeaderboardSocialLeaderboardRowData {
  availability?: string
  division?: LolSocialLeaderboardLeagueDivision
  isGiftable?: boolean
  isProvisional?: boolean
  /** @format int32 */
  leaderboardPosition?: number
  /** @format int32 */
  leaguePoints?: number
  /** @format int32 */
  profileIconId?: number
  /** @format int32 */
  provisionalGamesRemaining?: number
  puuid?: string
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
  summonerName?: string
  tier?: LolSocialLeaderboardLeagueTier
  /** @format int32 */
  wins?: number
}

export interface LolSocialLeaderboardSummoner {
  /** @format int64 */
  accountId?: number
  displayName?: string
  internalName?: string
  /** @format int32 */
  profileIconId?: number
  puuid?: string
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolSpectatorSpectateGameInfo {
  allowObserveMode?: string
  dropInSpectateGameId?: string
  gameQueueType?: string
  puuid?: string
}

export interface LolSpectatorSummonerOrTeamAvailabilty {
  availableForWatching?: string[]
}

export interface LolStatstonesCatalogBundle {
  item?: LolStatstonesCatalogItemDetails
}

export interface LolStatstonesCatalogBundlePrice {
  /** @format int32 */
  cost?: number
  currency?: string
}

export interface LolStatstonesCatalogItemDetails {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  itemInstanceId?: string
  prices?: LolStatstonesCatalogBundlePrice[]
  releaseDate?: string
  subInventoryType?: string
}

export interface LolStatstonesChampionStatstoneSetSummary {
  /** @format int32 */
  milestonesPassed?: number
  name?: string
  /** @format int32 */
  stonesAvailable?: number
  /** @format int32 */
  stonesIlluminated?: number
  /** @format int32 */
  stonesOwned?: number
}

export interface LolStatstonesChampionStatstoneSummary {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  milestonesPassed?: number
  sets?: LolStatstonesChampionStatstoneSetSummary[]
  /** @format int32 */
  stonesAvailable?: number
  /** @format int32 */
  stonesIlluminated?: number
  /** @format int32 */
  stonesOwned?: number
}

export interface LolStatstonesCollectionsChampion {
  /** @format int32 */
  id?: number
  name?: string
  squarePortraitPath?: string
}

export interface LolStatstonesEogNotificationEnvelope {
  othersPersonalBests?: LolStatstonesPersonalBestNotification[]
  selfMilestoneProgress?: LolStatstonesMilestoneProgressNotification[]
  selfPersonalBests?: LolStatstonesPersonalBestNotification[]
  selfStatstoneProgress?: LolStatstonesStatstoneProgress[]
}

export interface LolStatstonesGameDataItemReference {
  contentId?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export interface LolStatstonesGameDataStatstone {
  boundChampion?: LolStatstonesGameDataItemReference
  category?: string
  contentId?: string
  description?: string
  iconFull?: string
  iconLit?: string
  iconUnlit?: string
  iconUnowned?: string
  isEpic?: boolean
  isRetired?: boolean
  /** @format int32 */
  itemId?: number
  milestones?: number[]
  name?: string
  /** @format int32 */
  trackingType?: number
}

export interface LolStatstonesGameDataStatstonePack {
  contentId?: string
  description?: string
  /** @format int32 */
  itemId?: number
  name?: string
}

export interface LolStatstonesGameDataStatstoneSet {
  contentId?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  name?: string
  /** @format int32 */
  price?: number
  statstones?: LolStatstonesGameDataStatstone[]
}

export interface LolStatstonesGameDataStatstonesInfo {
  champIdToPackIds?: Record<string, any>
  collectionIdToStatStoneIds?: Record<string, any>
  packData?: LolStatstonesGameDataStatstonePack[]
  packIdToChampIds?: Record<string, any>
  packIdToStatStonesIds?: Record<string, any>
  packIdToSubPackIds?: Record<string, any>
  seriesIdToStatStoneIds?: Record<string, any>
  statstoneData?: LolStatstonesGameDataStatstoneSet[]
}

export interface LolStatstonesLoadout {
  id?: string
  /** @format int32 */
  itemId?: number
  loadout?: Record<string, Record<string, any>>
  name?: string
  scope?: string
}

export interface LolStatstonesLoadoutItem {
  contentId?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export interface LolStatstonesMilestoneNotificationDto {
  isCompleted?: boolean
  /** @format int32 */
  level?: number
  statstoneId?: string
  /** @format int32 */
  threshold?: number
}

export interface LolStatstonesMilestoneProgressNotification {
  imageUrl?: string
  level?: string
  statstoneId?: string
  statstoneName?: string
  /** @format int32 */
  threshold?: number
}

export interface LolStatstonesNumberFormattingBehavior {
  /** @format int32 */
  digitsForThousandsSeperator?: number
  trimTrailingZerosAfterDecimal?: boolean
  westernNumberGrouping?: boolean
}

export interface LolStatstonesNumberFormattingData {
  billionAbbreviation?: string
  decimalSeperator?: string
  hourAbbreviation?: string
  kilometersAbbreviation?: string
  metersAbbreviation?: string
  millionAbbreviation?: string
  minuteAbbreviation?: string
  numberFormattingBehavior?: LolStatstonesNumberFormattingBehavior
  oneHundredMillionAbbreviation?: string
  percentageFormat?: string
  secondAbbreviation?: string
  tenThousandAbbreviation?: string
  thousandAbbreviation?: string
  thousandSeperator?: string
  trillionAbbreviation?: string
}

export interface LolStatstonesPersonalBestNotification {
  imageUrl?: string
  personalBest?: string
  statstoneId?: string
  statstoneName?: string
  summoner?: LolStatstonesSummoner
}

export interface LolStatstonesPriceInfo {
  currency?: string
  /** @format int32 */
  price?: number
}

export interface LolStatstonesProfileStatstoneSummary {
  category?: string
  /** @format int32 */
  championId?: number
  imageUrl?: string
  name?: string
  value?: string
}

export interface LolStatstonesStatstone {
  /** @format int32 */
  boundChampionItemId?: number
  category?: string
  /** @format float */
  completionValue?: number
  description?: string
  formattedMilestoneLevel?: string
  formattedPersonalBest?: string
  formattedValue?: string
  imageUrl?: string
  isComplete?: boolean
  isEpic?: boolean
  isFeatured?: boolean
  isRetired?: boolean
  name?: string
  nextMilestone?: string
  playerRecord?: LolStatstonesStatstonePlayerRecord
  statstoneId?: string
}

export interface LolStatstonesStatstoneCompletion {
  category?: string
  isEpic?: boolean
  statstoneName?: string
}

export interface LolStatstonesStatstoneFeaturedRequest {
  existingFeatured?: LolStatstonesStatstone[]
  /** @format int32 */
  index?: number
}

export interface LolStatstonesStatstoneMasteryVignette {
  completedSetUuids?: string[]
  /** @format int32 */
  masteryLevel?: number
  /** @format int32 */
  numSetsCompleted?: number
  puuid?: string
}

export interface LolStatstonesStatstoneNotificationDto {
  /** @format int32 */
  best?: number
  /** @format int32 */
  delta?: number
  isNewBest?: boolean
  /** @format int32 */
  level?: number
  puuid?: string
  statstoneId?: string
  /** @format int32 */
  value?: number
}

export interface LolStatstonesStatstoneNotificationEnvelopeDto {
  /** @format int64 */
  gameId?: number
  milestones?: LolStatstonesMilestoneNotificationDto[]
  updates?: LolStatstonesStatstoneNotificationDto[]
}

export interface LolStatstonesStatstonePlayerRecord {
  dateAcquired?: string
  dateArchived?: string
  dateCompleted?: string
  dateModified?: string
  entitled?: boolean
  /** @format int32 */
  milestoneLevel?: number
  /** @format int32 */
  personalBest?: number
  puuid?: string
  statstoneId?: string
  /** @format int32 */
  value?: number
}

export interface LolStatstonesStatstoneProgress {
  /** @format int32 */
  best?: number
  category?: string
  delta?: string
  description?: string
  existingProgressPercent?: string
  imageUrl?: string
  isNewBest?: boolean
  /** @format int32 */
  level?: number
  newMilestoneDifference?: string
  newProgressPercent?: string
  nextMilestone?: string
  statstoneId?: string
  statstoneName?: string
  value?: string
}

export interface LolStatstonesStatstoneRekindledVignette {
  portraitPath?: string
  statstone?: LolStatstonesStatstoneCompletion
}

export interface LolStatstonesStatstoneSet {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  itemInstanceID?: string
  /** @format int32 */
  milestonesPassed?: number
  name?: string
  ownedFromPacks?: LolStatstonesGameDataStatstonePack[]
  prices?: LolStatstonesPriceInfo[]
  statstones?: LolStatstonesStatstone[]
  /** @format int32 */
  stonesOwned?: number
  subInventoryType?: string
}

export interface LolStatstonesStatstoneSetCompleteVignette {
  statstones?: LolStatstonesStatstoneCompletion[]
}

export interface LolStatstonesStatstoneVignetteNotificationEnvelopeDto {
  /** @format int32 */
  champId?: number
  champName?: string
  masteryVignetteNotifications?: LolStatstonesStatstoneMasteryVignette[]
  rekindledVignetteNotifications?: LolStatstonesStatstoneRekindledVignette[]
  setCompleteVignetteNotifications?: LolStatstonesStatstoneSetCompleteVignette[]
}

export interface LolStatstonesSummoner {
  displayName?: string
  puuid?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolStoreAccessTokenResource {
  /** @format int64 */
  expiry?: number
  scopes?: string[]
  token?: string
}

export interface LolStoreAllSummonerData {
  summoner?: LolStoreSummoner
  summonerLevelAndPoints?: LolStoreSummonerLevelAndPoints
}

export interface LolStoreBundleItemDTO {
  description?: string
  /** @format int64 */
  discountedRp?: number
  iconUrl?: string
  inventoryType?: string
  /** @format int64 */
  ip?: number
  /** @format int32 */
  itemId?: number
  name?: string
  owned?: boolean
  /** @format int32 */
  quantity?: number
  /** @format int64 */
  rp?: number
}

export interface LolStoreBundled {
  flexible?: boolean
  items?: LolStoreBundledItem[]
  minimumPrices?: LolStoreBundledItemCost[]
}

export interface LolStoreBundledItem {
  discountPrices?: LolStoreBundledItemCost[]
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  /** @format int32 */
  quantity?: number
}

export interface LolStoreBundledItemCost {
  /** @format int64 */
  cost?: number
  costType?: string
  currency?: string
  /** @format float */
  discount?: number
}

export interface LolStoreCapOffer {
  active?: boolean
  createdDate?: string
  id?: string
  label?: string
  merchantId?: string
  payload?: LolStoreCapOfferPayloadEntry[]
  productId?: string
  startDate?: string
  typeId?: string
}

export interface LolStoreCapOfferPayloadEntry {
  fulfillmentTypeId?: string
  inventoryTypeUUID?: string
  itemInstanceId?: string
  itemPriceMap?: Record<string, number>
}

export interface LolStoreCatalogInstanceToItemKeyMap {
  platformIds?: Record<string, LolStoreItemKey>
}

export interface LolStoreCatalogItem {
  active?: boolean
  bundled?: LolStoreBundled
  iconUrl?: string
  inactiveDate?: string
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  itemInstanceId?: string
  itemRequirements?: LolStoreItemKey[]
  localizations?: Record<string, LolStoreItemLocalization>
  /** @format int32 */
  maxQuantity?: number
  metadata?: LolStoreItemMetadataEntry[]
  offerId?: string
  prices?: LolStoreItemCost[]
  releaseDate?: string
  sale?: LolStoreSale
  subInventoryType?: string
  tags?: string[]
}

export interface LolStoreFeaturedPageDTO {
  Player?: LolStorePlayer
}

export interface LolStoreGetPlatformIdsFromInstanceIdsRequest {
  instanceIds?: string[]
}

export interface LolStoreGiftableResult {
  config?: LolStoreGiftingConfig
  friends?: LolStoreGiftingFriend[]
}

export interface LolStoreGiftingConfig {
  /** @format int32 */
  giftingHextecMaxDailyGiftsReceive?: number
  /** @format int32 */
  giftingHextechMaxDailyGiftsSend?: number
  /** @format int32 */
  giftingItemMaxDailyGiftsReceive?: number
  /** @format int32 */
  giftingItemMaxDailyGiftsSend?: number
  /** @format int32 */
  giftingItemMinLevelSend?: number
  /** @format int32 */
  giftingRestrictionFlagRioter?: number
  /** @format int32 */
  giftingRpMaxDailyGiftsReceive?: number
  /** @format int32 */
  giftingRpMaxDailyGiftsSend?: number
  /** @format int32 */
  giftingRpMinLevelSend?: number
  /** @format int32 */
  recipientLevelLimitItem?: number
  /** @format int32 */
  recipientLevelLimitRp?: number
  requiresIdentityVerification?: boolean
}

export interface LolStoreGiftingFriend {
  friendsSince?: string
  nick?: string
  oldFriends?: boolean
  /** @format int64 */
  summonerId?: number
}

export interface LolStoreItemCost {
  /** @format int64 */
  cost?: number
  currency?: string
  /** @format float */
  discount?: number
}

export interface LolStoreItemKey {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export interface LolStoreItemLocalization {
  description?: string
  language?: string
  name?: string
}

export interface LolStoreItemMetadataEntry {
  type?: string
  value?: string
}

export interface LolStoreItemSale {
  active?: boolean
  /** @format int64 */
  id?: number
  item?: LolStoreItemKey
  sale?: LolStoreSale
}

export interface LolStoreLoginDataPacket {
  allSummonerData?: LolStoreAllSummonerData
  simpleMessages?: LolStoreSimpleDialogMessage[]
}

export interface LolStoreLoginSession {
  /** @format int64 */
  accountId?: number
  gasToken?: Record<string, any>
  idToken?: string
  state?: LolStoreLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolStoreLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolStoreNotification {
  backgroundUrl?: string
  created?: string
  critical?: boolean
  data?: Record<string, string>
  detailKey?: string
  dismissible?: boolean
  expires?: string
  iconUrl?: string
  /** @format int64 */
  id?: number
  source?: string
  state?: string
  titleKey?: string
  type?: string
}

export interface LolStoreOrderNotificationResource {
  eventType?: string
  eventTypeId?: string
  /** @format int64 */
  id?: number
  status?: string
}

export interface LolStorePageDTO {
  Player?: LolStorePlayer
  catalog?: LolStoreCatalogItem[]
  groupOrder?: string[]
  itemGroups?: Record<string, LolStorePageGroupingDTO>
}

export interface LolStorePageGroupingDTO {
  grouped?: boolean
  hidden?: boolean
  items?: LolStoreItemKey[]
}

export interface LolStorePlayer {
  /** @format int64 */
  accountId?: number
  /** @format int64 */
  ip?: number
  /** @format int64 */
  rp?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolStoreRiotMessagingServiceMessage {
  payload?: string
  resource?: string
  service?: string
  /** @format int64 */
  timestamp?: number
  version?: string
}

export interface LolStoreSale {
  endDate?: string
  prices?: LolStoreItemCost[]
  startDate?: string
}

export interface LolStoreServiceBalance {
  /** @format int64 */
  amount?: number
  currency?: string
}

export interface LolStoreServiceWallet {
  /** @format int64 */
  accountId?: number
  balances?: LolStoreServiceBalance[]
}

export interface LolStoreSimpleDialogMessage {
  /** @format int64 */
  accountId?: number
  msgId?: string
  params?: string[]
  type?: string
}

export interface LolStoreStoreStatus {
  storefrontIsRunning?: boolean
}

export interface LolStoreSummoner {
  /** @format int64 */
  acctId?: number
  /** @format int64 */
  sumId?: number
}

export interface LolStoreSummonerLevelAndPoints {
  /** @format int32 */
  summonerLevel?: number
}

export interface LolStoreWallet {
  /** @format int64 */
  ip?: number
  /** @format int64 */
  rp?: number
}

export interface LolSuggestedPlayersEndOfGamePlayer {
  /** @format int64 */
  summonerId?: number
  summonerName?: string
}

export interface LolSuggestedPlayersEndOfGameStats {
  teams?: LolSuggestedPlayersEndOfGameTeam[]
}

export interface LolSuggestedPlayersEndOfGameTeam {
  isWinningTeam?: boolean
  players?: LolSuggestedPlayersEndOfGamePlayer[]
}

export interface LolSuggestedPlayersSuggestedPlayersConfig {
  Enabled?: boolean
  FriendsOfFriendsEnabled?: boolean
  /** @format int32 */
  FriendsOfFriendsLimit?: number
  /** @format int32 */
  MaxNumReplacements?: number
  /** @format int32 */
  MaxNumSuggestedPlayers?: number
  /** @format int32 */
  OnlineFriendsLimit?: number
  /** @format int32 */
  PreviousPremadesLimit?: number
  /** @format int32 */
  VicoriousComradesLimit?: number
}

export interface LolSuggestedPlayersSuggestedPlayersDynamicClientConfig {
  SuggestedPlayers?: LolSuggestedPlayersSuggestedPlayersConfig
}

export interface LolSuggestedPlayersSuggestedPlayersFriend {
  availability?: string
  name?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolSuggestedPlayersSuggestedPlayersKudoedPlayer {
  /** @format int64 */
  kudoedSummonerId?: number
  kudoedSummonerName?: string
}

export interface LolSuggestedPlayersSuggestedPlayersLobbyStatus {
  invitedSummonerIds?: number[]
  memberSummonerIds?: number[]
  /** @format int32 */
  queueId?: number
}

export interface LolSuggestedPlayersSuggestedPlayersPlayerStatus {
  currentLobbyStatus?: LolSuggestedPlayersSuggestedPlayersLobbyStatus
  lastQueuedLobbyStatus?: LolSuggestedPlayersSuggestedPlayersLobbyStatus
}

export interface LolSuggestedPlayersSuggestedPlayersQueue {
  /** @format int32 */
  id?: number
  /** @format int32 */
  minLevel?: number
}

export enum LolSuggestedPlayersSuggestedPlayersReason {
  PreviousPremade = 'PreviousPremade',
  OnlineFriend = 'OnlineFriend',
  FriendOfFriend = 'FriendOfFriend',
  VictoriousComrade = 'VictoriousComrade',
  LegacyPlayAgain = 'LegacyPlayAgain'
}

export interface LolSuggestedPlayersSuggestedPlayersReportedPlayer {
  /** @format int64 */
  reportedSummonerId?: number
}

export interface LolSuggestedPlayersSuggestedPlayersSuggestedPlayer {
  /** @format int64 */
  commonFriendId?: number
  commonFriendName?: string
  reason?: LolSuggestedPlayersSuggestedPlayersReason
  /** @format int64 */
  summonerId?: number
  summonerName?: string
}

export interface LolSuggestedPlayersSuggestedPlayersSummoner {
  displayName?: string
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
}

export interface LolSuggestedPlayersSuggestedPlayersVictoriousComrade {
  /** @format int64 */
  summonerId?: number
  summonerName?: string
}

export interface LolSummonerAccountIdAndSummonerId {
  /** @format int64 */
  accountId?: number
  /** @format int64 */
  summonerId?: number
}

export interface LolSummonerAutoFillQueueDto {
  autoFillEligible?: boolean
  autoFillProtectedForPromos?: boolean
  autoFillProtectedForStreaking?: boolean
  /** @format int32 */
  queueId?: number
}

export interface LolSummonerGameloopPlayerInfoV2 {
  autoFillDataBags?: LolSummonerAutoFillQueueDto[]
  rerollDataBags?: LolSummonerRerollDataBagForClientV1[]
}

export interface LolSummonerLevelField {
  /** @format int32 */
  finalLevel?: number
  /** @format int32 */
  initialLevel?: number
  progress?: LolSummonerLevelProgression
}

export interface LolSummonerLevelProgression {
  /** @format int64 */
  finalLevelBoundary?: number
  /** @format int64 */
  finalXp?: number
  /** @format int64 */
  initialLevelBoundary?: number
  /** @format int64 */
  initialXp?: number
}

export interface LolSummonerLoginSession {
  /** @format int64 */
  accountId?: number
  connected?: boolean
  puuid?: string
  state?: LolSummonerLoginSessionStates
  /** @format int64 */
  summonerId?: number
}

export enum LolSummonerLoginSessionStates {
  IN_PROGRESS = 'IN_PROGRESS',
  SUCCEEDED = 'SUCCEEDED',
  LOGGING_OUT = 'LOGGING_OUT',
  ERROR = 'ERROR'
}

export interface LolSummonerProfilePrivacy {
  enabledState?: LolSummonerProfilePrivacyEnabledState
  setting?: LolSummonerProfilePrivacySetting
}

export enum LolSummonerProfilePrivacyEnabledState {
  UNKNOWN = 'UNKNOWN',
  ENABLED = 'ENABLED',
  DISABLED = 'DISABLED'
}

export enum LolSummonerProfilePrivacySetting {
  PRIVATE = 'PRIVATE',
  PUBLIC = 'PUBLIC'
}

export interface LolSummonerRerollDataBagForClientV1 {
  /** @format int32 */
  maximumRerolls?: number
  /** @format int32 */
  pointCostOfReroll?: number
  /** @format int32 */
  pointsUntilNextReroll?: number
  /** @format int32 */
  queueId?: number
  /** @format int32 */
  rerollCount?: number
  /** @format int32 */
  totalPoints?: number
}

export interface LolSummonerStatus {
  ready?: boolean
}

export interface LolSummonerSummoner {
  /** @format int64 */
  accountId?: number
  displayName?: string
  gameName: string
  internalName?: string
  tagLine: string
  nameChangeFlag?: boolean
  /** @format int32 */
  percentCompleteForNextLevel?: number
  privacy?: LolSummonerProfilePrivacySetting
  /** @format int32 */
  profileIconId?: number
  puuid?: string
  rerollPoints?: LolSummonerSummonerRerollPoints
  /** @format int64 */
  summonerId?: number
  /** @format int32 */
  summonerLevel?: number
  unnamed?: boolean
  /** @format int64 */
  xpSinceLastLevel?: number
  /** @format int64 */
  xpUntilNextLevel?: number
}

export interface LolSummonerSummonerCacheData {
  privacy?: LolSummonerProfilePrivacySetting
  summoner?: LolSummonerSummoner
  /** @format int32 */
  summonerIcon?: number
  summonerName?: string
}

export interface LolSummonerSummonerCreateRequest {
  summonerName?: string
}

export interface LolSummonerSummonerCreatedId {
  /** @format int64 */
  summonerId?: number
}

export interface LolSummonerSummonerDTO {
  /** @format int64 */
  accountId?: number
  /** @format int32 */
  expPoints?: number
  /** @format int32 */
  expToNextLevel?: number
  /** @format int64 */
  id?: number
  /** @format int32 */
  level?: number
  name?: string
  nameChangeFlag?: boolean
  partnerId?: string
  privacy?: LolSummonerProfilePrivacySetting
  /** @format int32 */
  profileIconId?: number
  puuid?: string
  unnamed?: boolean
}

export interface LolSummonerSummonerIcon {
  inventoryToken?: string
  /** @format int32 */
  profileIconId?: number
}

export interface LolSummonerSummonerIdAndIcon {
  /** @format int32 */
  profileIconId?: number
  /** @format int64 */
  summonerId?: number
}

export interface LolSummonerSummonerIdAndName {
  displayName?: string
  /** @format int64 */
  summonerId?: number
}

export interface LolSummonerSummonerProfileUpdate {
  inventory?: string
  key?: string
  value?: Record<string, any>
}

export interface LolSummonerSummonerRequestedName {
  name?: string
}

export interface LolSummonerSummonerRerollPoints {
  /** @format int32 */
  currentPoints?: number
  /** @format int32 */
  maxRolls?: number
  /** @format int32 */
  numberOfRolls?: number
  /** @format int32 */
  pointsCostToRoll?: number
  /** @format int32 */
  pointsToReroll?: number
}

export interface LolSummonerSummonerSession {
  displayName?: string
  isNewPlayer?: boolean
  /** @format int64 */
  summonerId?: number
}

export interface LolSummonerXpAndLevelMessage {
  level?: LolSummonerLevelField
  xp?: Record<string, any>
}

export interface LolTastesDataModelResponse {
  modelData?: Record<string, any>
  /** @format int64 */
  responseCode?: number
}

export interface LolTftLolTftHubFooterColors {
  bottomColor?: string
  lineColor?: string
  topColor?: string
}

export interface LolTftLolTftStorePromos {
  battlePassOfferIds?: string[]
  storePromoOfferIds?: string[]
  tacticianPromoOfferIds?: string[]
}

export interface LolTrophiesCapClashTrophyEntitlementPayload {
  rewardSpec?: LolTrophiesClashV2TrophyRewardSpec
  rewardType?: string
}

export interface LolTrophiesClashV2TrophyRewardSpec {
  bracket?: string
  cup?: string
  gem?: string
  pedestal?: string
  seasonId?: string
  theme?: string
  tier?: string
}

export interface LolTrophiesInventoryItemsByType {
  TOURNAMENT_TROPHY?: LolTrophiesTournamentTrophyInventoryItem[]
}

export interface LolTrophiesInventoryResponse {
  items?: LolTrophiesInventoryItemsByType
}

export interface LolTrophiesLoadout {
  id?: string
  loadout?: Record<string, LolTrophiesLoadoutItem>
  name?: string
  scope?: string
}

export interface LolTrophiesLoadoutItem {
  data?: Record<string, string>
  inventoryType?: string
  /** @format int32 */
  itemId?: number
}

export interface LolTrophiesOtherPlayerTrophyInventoryItem {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  payload?: LolTrophiesCapClashTrophyEntitlementPayload
  purchaseDate?: string
  uuid?: string
}

export interface LolTrophiesTournamentTrophyInventoryItem {
  payload?: LolTrophiesCapClashTrophyEntitlementPayload
  purchaseDate?: string
}

export interface LolTrophiesTrophyProfileData {
  /** @format int64 */
  bracket?: number
  cup?: string
  gem?: string
  pedestal?: string
  /** @format int64 */
  seasonId?: number
  theme?: string
  /** @format int64 */
  tier?: number
}

export enum LolUserExperienceGameflowPhase {
  None = 'None',
  Lobby = 'Lobby',
  Matchmaking = 'Matchmaking',
  CheckedIntoTournament = 'CheckedIntoTournament',
  ReadyCheck = 'ReadyCheck',
  ChampSelect = 'ChampSelect',
  GameStart = 'GameStart',
  FailedToLaunch = 'FailedToLaunch',
  InProgress = 'InProgress',
  Reconnect = 'Reconnect',
  WaitingForStats = 'WaitingForStats',
  PreEndOfGame = 'PreEndOfGame',
  EndOfGame = 'EndOfGame',
  TerminatedInError = 'TerminatedInError'
}

export interface LolUserExperienceGameflowSession {
  phase?: LolUserExperienceGameflowPhase
}

export interface LolWorldsTokenCardAccountIdAndSummonerId {
  /** @format int64 */
  summonerId?: number
}

export interface LolWorldsTokenCardInventoryItem {
  inventoryType?: string
  /** @format int32 */
  itemId?: number
  ownershipType?: LolWorldsTokenCardItemOwnershipType
  purchaseDate?: string
  /** @format int64 */
  quantity?: number
  uuid?: string
}

export enum LolWorldsTokenCardItemOwnershipType {
  OWNED = 'OWNED',
  RENTED = 'RENTED',
  LOYALTY = 'LOYALTY',
  F2P = 'F2P'
}

export interface LolWorldsTokenCardLootDataGdsResource {
  LootTokenBankCards?: LolWorldsTokenCardLootTokenBankCardGdsResource[]
}

export interface LolWorldsTokenCardLootTokenBankCardGdsResource {
  activationDate?: string
  backsplashImagePath?: string
  buttonText?: string
  deactivationDate?: string
  lootItemName?: string
  nonPremiumCapCurrencyId?: string
  premiumCapCurrencyId?: string
  storeLinkItem?: string
  storeLinkType?: string
  titleText?: string
  tokenIconPath?: string
  tooltipDescriptionText?: string
  tooltipSplashPath?: string
  tooltipTitleText?: string
  unlockItemId?: string
  unlockItemType?: string
}

export interface LolWorldsTokenCardTokenUpsell {
  backgroundUrl?: string
  buttonText?: string
  currencyUrl?: string
  currentlyLocked?: LolWorldsTokenCardTokenUpsellLockedType
  /** @format int32 */
  dependentInventoryId?: number
  dependentInventoryType?: string
  endDate?: string
  id?: string
  internalName?: string
  /** @format int32 */
  lockedCount?: number
  premiumCurrencyName?: string
  purchaseUrl?: string
  startDate?: string
  title?: string
  tooltipBackgroundUrl?: string
  tooltipDescription?: string
  tooltipTitle?: string
}

export enum LolWorldsTokenCardTokenUpsellLockedType {
  UNASSIGNED = 'UNASSIGNED',
  UNLOCKED = 'UNLOCKED',
  LOCKED = 'LOCKED'
}

export interface LootItemClientDTO {
  asset?: string
  displayCategories?: string
  /** @format int64 */
  expiryTime?: number
  lootName?: string
  rarity?: string
  /** @format int32 */
  rentalGames?: number
  /** @format int64 */
  rentalSeconds?: number
  /** @format int32 */
  storeItemId?: number
  tags?: string
  type?: string
  upgradeLootName?: string
  /** @format int32 */
  value?: number
}

export interface LootItemListClientDTO {
  /** @format int64 */
  lastUpdate?: number
  lootItems?: LootItemClientDTO[]
}

export interface LootLcdsClientConfigurationDTO {
  currenciesUsingCapWallets?: string[]
  disabledRedemptions?: string[]
  lootItemsUsingBreakoutRecipeMenu?: string[]
  lootMaterialsToAlwaysRender?: string[]
}

export interface LootLcdsLootDescriptionDTO {
  childLootTableNames?: string[]
  localizationLongDescriptionMap?: Record<string, string>
  localizationMap?: Record<string, string>
  lootName?: string
}

export interface LootLcdsRecipeClientDTO {
  crafterName?: string
  displayCategories?: string
  metadata?: LootLcdsRecipeMetadata
  outputs?: LootLcdsRecipeOutputDTO[]
  recipeName?: string
  slots?: LootLcdsRecipeSlotClientDTO[]
  type?: string
}

export interface LootLcdsRecipeListClientDTO {
  /** @format int64 */
  lastUpdate?: number
  recipes?: LootLcdsRecipeClientDTO[]
}

export interface LootLcdsRecipeMetadata {
  bonusDescriptions?: LootLcdsLootDescriptionDTO[]
  guaranteedDescriptions?: LootLcdsLootDescriptionDTO[]
  tooltipsDisabled?: boolean
}

export interface LootLcdsRecipeOutputDTO {
  allowDuplicates?: boolean
  lootName?: string
  /** @format double */
  probability?: number
  quantityExpression?: string
}

export interface LootLcdsRecipeSlotClientDTO {
  quantityExpression?: string
  query?: string
  /** @format int32 */
  slotNumber?: number
}

export interface LootLedgerRecipeConfigMap {
  /** @format int64 */
  lastUpdate?: number
  lootLedgerRecipeDTOMap?: Record<string, LootLedgerRecipeConfiguration>
}

export interface LootLedgerRecipeConfiguration {
  activationTime?: string
  active?: boolean
  counterUuids?: string[]
  deactivationTime?: string
  ledgerUuid?: string
  recipeName?: string
}

export interface LootNameRefId {
  lootName?: string
  refId?: string
}

export interface LootOddsDTO {
  children?: LootOddsDTO[]
  /** @format double */
  dropRate?: number
  label?: string
  lootId?: string
  /** @format int32 */
  lootOrder?: number
  parentId?: string
  /** @format int32 */
  quantity?: number
}

export interface LootSimpleDialogMessageResponse {
  /** @format int64 */
  accountId?: number
  command?: string
  msgId?: string
}

export interface MatchedPlayerDTO {
  captain?: PlayerInfoDTO
  players?: PlayerInfoDTO[]
  rosterId?: string
}

export interface MatchmakingLcdsBustedLeaver {
  accessToken?: string
  /** @format int64 */
  leaverPenaltyMillisRemaining?: number
  reasonFailed?: string
  summoner?: MatchmakingLcdsSummoner
}

export interface MatchmakingLcdsFailedJoinPlayer {
  reasonFailed?: string
  summoner?: MatchmakingLcdsSummoner
}

export interface MatchmakingLcdsGameDTO {
  gameState?: string
  statusOfParticipants?: string
  teamOne?: MatchmakingLcdsPlayerParticipant[]
  teamTwo?: MatchmakingLcdsPlayerParticipant[]
  terminatedCondition?: string
}

export interface MatchmakingLcdsGameNotification {
  messageArgument?: string
  messageCode?: string
  type?: string
}

export interface MatchmakingLcdsMatchMakerParams {
  botDifficulty?: string
  invitationId?: string
  languages?: string
  lastMaestroMessage?: string
  queueIds?: number[]
  team?: number[]
  /** @format int64 */
  teamId?: number
}

export interface MatchmakingLcdsMatchMakerPayload {
  LEAVER_BUSTER_ACCESS_TOKEN?: string
}

export interface MatchmakingLcdsPlayerParticipant {
  /** @format int64 */
  summonerId?: number
}

export interface MatchmakingLcdsQueueDisabled {
  message?: string
  /** @format int32 */
  queueId?: number
  reasonFailed?: string
  summoner?: MatchmakingLcdsSummoner
}

export interface MatchmakingLcdsQueueDodger {
  /** @format int64 */
  dodgePenaltyRemainingTime?: number
  reasonFailed?: string
  summoner?: MatchmakingLcdsSummoner
}

export interface MatchmakingLcdsQueueInfo {
  /** @format int32 */
  queueId?: number
  /** @format int64 */
  waitTime?: number
}

export interface MatchmakingLcdsQueueRestricted {
  message?: string
  /** @format int32 */
  queueId?: number
  reasonFailed?: string
  summoner?: MatchmakingLcdsSummoner
}

export interface MatchmakingLcdsQueueThrottled {
  message?: string
  /** @format int32 */
  queueId?: number
  reasonFailed?: string
  summoner?: MatchmakingLcdsSummoner
}

export interface MatchmakingLcdsSearchingForMatchNotification {
  joinedQueues?: MatchmakingLcdsQueueInfo[]
  playerJoinFailures?: Record<string, any>[]
}

export interface MatchmakingLcdsSummoner {
  name?: string
  /** @format int64 */
  sumId?: number
}

export interface MemberBanUnbanTournament {
  /** @format int64 */
  tournamentId?: number
  /** @format int64 */
  tournamentPhaseLockInTime?: number
  tournamentnameLocKey?: string
  tournamentnameLocKeySecondary?: string
}

export enum MetricDataType {
  Unknown = 'unknown',
  Int = 'int',
  Uint = 'uint',
  Float = 'float',
  Bool = 'bool',
  String = 'string'
}

export interface MetricMetadata {
  alerts?: MetricMetadataAlert[]
  category?: string
  data_type?: MetricDataType
  description?: string
  destination?: string
  info?: string
  notify?: MetricMetadataNotify
  /** @format int32 */
  period?: number
  pretty_name?: string
  priority?: MetricPriority
  /** @format int32 */
  sample_window_ms?: number
  transientAggregation?: AggregationType
  type?: MetricType
  units?: string
}

export interface MetricMetadataAlert {
  description?: string
  info?: string
  level?: string
  /** @format double */
  max?: number
  /** @format double */
  min?: number
  notify?: MetricMetadataNotify
  pretty_name?: string
}

export interface MetricMetadataHipchatNotification {
  roomid?: string
  tags?: string
}

export interface MetricMetadataNotify {
  email?: string[]
  hipchat?: MetricMetadataHipchatNotification[]
  pagerduty?: MetricMetadataPagerDutyNotification[]
}

export interface MetricMetadataPagerDutyNotification {
  apikey?: string
}

export enum MetricPriority {
  Low = 'low',
  Medium = 'medium',
  High = 'high'
}

export enum MetricType {
  Unknown = 'unknown',
  Percentage = 'percentage',
  Count = 'count',
  Duration = 'duration',
  Rate = 'rate'
}

export interface MissionAlertDTO {
  /** @format int64 */
  alertTime?: number
  message?: string
  type?: string
}

export interface MissionDisplay {
  attributes?: string[]
  locations?: string[]
}

export interface MissionMetadata {
  /** @format int32 */
  level?: number
  npeRewardPack?: NpeRewardPackMetadata
  tutorial?: TutorialMetadata
}

export interface MissionProgressDTO {
  /** @format int32 */
  currentProgress?: number
  /** @format int32 */
  lastViewedProgress?: number
  /** @format int32 */
  totalCount?: number
}

export interface MissionRequirementDTO {
  expression?: string
}

export interface MissionsCompressedPayloadDTO {
  missionsCompressed?: string
}

export interface MultipleReplayMetadataRequestV2 {
  gameIds?: number[]
  platformId?: string
}

export interface MultipleReplayMetadataResponseItemV2 {
  /** @format int64 */
  gameId?: number
  metadata?: ReplayMetadataV2
  status?: ReplayResponseStatus
}

export interface MultipleReplayMetadataResponseV2 {
  metadataResponses?: MultipleReplayMetadataResponseItemV2[]
}

export interface NonTimingEventV1 {
  /** event name */
  eventName?: string
  /** unit of measurement */
  unit?: string
  /** event value */
  value?: string
  /**
   * timestamp in microseconds of when the event occurred
   * @format int64
   */
  when?: number
}

export interface NpeReward {
  data?: Record<string, any>
  renderer?: string
}

export interface NpeRewardPackMetadata {
  /** @format int32 */
  index?: number
  majorReward?: NpeReward
  minorRewards?: NpeReward[]
  premiumReward?: boolean
  rewardKey?: string
}

export interface OpenedTeamDTO {
  /** @format int64 */
  captainId?: number
  invitationId?: string
  invitees?: PendingRosterInviteeDTO[]
  /** @format int32 */
  logo?: number
  /** @format int32 */
  logoColor?: number
  members?: OpenedTeamMemberDTO[]
  name?: string
  openPositions?: Position[]
  shortName?: string
  /** @format int32 */
  tier?: number
}

export interface OpenedTeamMemberDTO {
  /** @format int32 */
  friendship?: number
  /** @format int64 */
  playerId?: number
  position?: Position
  /** @format int32 */
  tier?: number
}

export interface PartiesVoiceDTO {
  jwt?: string
}

export interface PatcherChunkingPatcherEnvironment {
  client_patcher_available?: boolean
  client_patcher_enabled?: boolean
  game_patcher_available?: boolean
  game_patcher_enabled?: boolean
}

export interface PatcherComponentActionProgress {
  currentItem?: string
  network?: PatcherComponentStateProgress
  primaryWork?: PatcherComponentStateWorkType
  total?: PatcherComponentStateProgress
}

export interface PatcherComponentState {
  action?: PatcherComponentStateAction
  id?: string
  isCorrupted?: boolean
  isUpToDate?: boolean
  isUpdateAvailable?: boolean
  progress?: PatcherComponentActionProgress
  timeOfLastUpToDateCheckISO8601?: string
}

export enum PatcherComponentStateAction {
  Idle = 'Idle',
  CheckingForUpdates = 'CheckingForUpdates',
  Patching = 'Patching',
  Repairing = 'Repairing',
  Migrating = 'Migrating'
}

export interface PatcherComponentStateProgress {
  /** @format int64 */
  bytesComplete?: number
  /** @format double */
  bytesPerSecond?: number
  /** @format int64 */
  bytesRequired?: number
}

export enum PatcherComponentStateWorkType {
  Scanning = 'Scanning',
  Network = 'Network',
  Disk = 'Disk'
}

export interface PatcherNotification {
  data?: Record<string, Record<string, any>>
  id?: string
  notificationId?: PatcherNotificationId
}

export enum PatcherNotificationId {
  UnspecifiedError = 'UnspecifiedError',
  ConnectionError = 'ConnectionError',
  MissingFilesError = 'MissingFilesError',
  FailedToWriteError = 'FailedToWriteError',
  WillRestoreClientBackupOnRestart = 'WillRestoreClientBackupOnRestart',
  DidRestoreClientBackup = 'DidRestoreClientBackup',
  NotEnoughDiskSpace = 'NotEnoughDiskSpace',
  BrokenPermissions = 'BrokenPermissions'
}

export interface PatcherP2PStatus {
  isAllowedByUser?: boolean
  isEnabledForPatchline?: boolean
  requiresRestart?: boolean
}

export interface PatcherP2PStatusUpdate {
  isAllowedByUser?: boolean
}

export interface PatcherProductResource {
  id?: string
}

export interface PatcherProductState {
  action?: PatcherComponentStateAction
  components?: PatcherComponentState[]
  id?: string
  isCorrupted?: boolean
  isStopped?: boolean
  isUpToDate?: boolean
  isUpdateAvailable?: boolean
  /** @format double */
  percentPatched?: number
}

export interface PatcherStatus {
  connectedToPatchServer?: boolean
  hasUpdatesOnRestart?: boolean
  /** @format int32 */
  successfullyInstalledVersion?: number
  willRestartOnSelfUpdate?: boolean
}

export interface PatcherUxResource {
  visible?: boolean
}

export interface PaymentsFrontEndRequest {
  game?: string
  gifteeAccountId?: string
  gifteeMessage?: string
  isPrepaid?: boolean
  localeId?: string
  rsoToken?: string
  summonerLevel?: number
  usePmcSessions?: boolean
}

export interface PaymentsFrontEndResult {
  url?: string
}

export interface PaymentsPMCStartUrlRequest {
  game?: string
  gifteeAccountId?: string
  gifteeMessage?: string
  isPrepaid?: boolean
  localeId?: string
  summonerLevel?: number
}

export interface PaymentsPMCStartUrlResult {
  createdAt?: string
  id?: string
  localeId?: string
  playerFacingId?: string
  pmcStartUrl?: string
  summonerLevel?: number
  userId?: string
}

export interface PendingOpenedTeamDTO {
  invitationId?: string
  /** @format int32 */
  logo?: number
  /** @format int32 */
  logoColor?: number
  name?: string
  shortName?: string
  /** @format int32 */
  tier?: number
}

export interface PendingRosterDTO {
  /** @format int64 */
  captainId?: number
  highTierVariance?: boolean
  invitationId?: string
  inviteFaileds?: FailedInvite[]
  invitees?: PendingRosterInviteeDTO[]
  lft?: boolean
  /** @format int32 */
  logo?: number
  /** @format int32 */
  logoColor?: number
  members?: PendingRosterMemberDTO[]
  multiUserChatJWT?: string
  name?: string
  rewardLogos?: RewardLogo[]
  shortName?: string
  ticketOffers?: TicketOfferDTO[]
  /** @format int32 */
  tier?: number
  /** @format int64 */
  tournamentId?: number
  /** @format int32 */
  version?: number
}

export interface PendingRosterInviteeDTO {
  /** @format int64 */
  inviteTime?: number
  inviteType?: InviteType
  /** @format int64 */
  inviteeId?: number
  inviteeState?: PendingRosterInviteeState
  /** @format int64 */
  inviter?: number
}

export enum PendingRosterInviteeState {
  SUGGESTED = 'SUGGESTED',
  PENDING = 'PENDING',
  DECLINED = 'DECLINED',
  REVOKED = 'REVOKED',
  SUGGEST_DECLINED = 'SUGGEST_DECLINED',
  SUGGEST_REVOKED = 'SUGGEST_REVOKED',
  ACCEPTED = 'ACCEPTED',
  SELFJOIN = 'SELFJOIN',
  SELFJOIN_DECLINED = 'SELFJOIN_DECLINED',
  SELFJOIN_REVOKED = 'SELFJOIN_REVOKED'
}

export interface PendingRosterMemberDTO {
  /** @format int32 */
  bet?: number
  betType?: TicketType
  /** @format int64 */
  joinTime?: number
  memberState?: PendingRosterMemberState
  /** @format int32 */
  pendingPay?: number
  /** @format int32 */
  pendingPremiumPay?: number
  /** @format int64 */
  playerId?: number
  position?: Position
  /** @format int32 */
  selfBet?: number
  /** @format int32 */
  tier?: number
}

export enum PendingRosterMemberState {
  NOT_READY = 'NOT_READY',
  FORCED_NOT_READY = 'FORCED_NOT_READY',
  READY = 'READY',
  LEFT = 'LEFT',
  KICK = 'KICK'
}

export interface PersonalizedOffersLcdsChampionDTO {
  /** @format int32 */
  championId?: number
  owned?: boolean
}

export interface PersonalizedOffersLcdsChampionSkinDTO {
  /** @format int32 */
  championId?: number
  owned?: boolean
  /** @format int32 */
  skinId?: number
}

export interface PersonalizedOffersLcdsClientDynamicConfigurationNotification {
  configs?: string
  delta?: boolean
}

export interface PersonalizedOffersStoreFulfillmentNotification {
  data?: Record<string, any>
  inventoryType?: string
}

export interface PhaseInMember {
  /** @format int32 */
  bet?: number
  /** @format int32 */
  pendingPay?: number
  /** @format int64 */
  playerId?: number
  /** @format int32 */
  selfBet?: number
}

export interface PhaseRosterDTO {
  bracketDTO?: Bracket
  /** @format int64 */
  bracketId?: number
  /** @format int64 */
  checkinTime?: number
  /** @format int32 */
  period?: number
  /** @format int64 */
  phaseId?: number
  phaseRosterSubs?: PhaseRosterSubDTO[]
}

export interface PhaseRosterSubDTO {
  /** @format int32 */
  bet?: number
  betType?: TicketType
  /** @format int32 */
  pay?: number
  /** @format int64 */
  playerId?: number
  position?: Position
  /** @format int32 */
  premiumPay?: number
  /** @format int64 */
  replacedPlayerId?: number
  subState?: SubState
  /** @format int32 */
  tier?: number
}

export enum PickModes {
  NOT_PICKING = 'NOT_PICKING',
  IN_PROGRESS = 'IN_PROGRESS',
  DONE = 'DONE'
}

export interface PlayerBehaviorLcdsForcedClientShutdown {
  additionalInfo?: string
  reason?: string
}

export interface PlayerBehaviorLcdsSimpleMessage {
  /** @format int64 */
  accountId?: number
  msgId?: string
  params?: string[]
  type?: string
}

export interface PlayerBehaviorSimpleMessageResponse {
  /** @format int64 */
  accountId?: number
  command?: string
  msgId?: string
}

export interface PlayerDTO {
  banned?: boolean
  lft?: boolean
  notifications?: ClashOfflineNotification[]
  primaryPos?: string
  secondaryPos?: string
  /** @format int32 */
  tmntLosses?: number
  /** @format int32 */
  tmntWins?: number
}

export interface PlayerFinderDTO {
  /** @format int64 */
  friendId?: number
  /** @format int64 */
  playerId?: number
  primaryPos?: Position
  secondaryPos?: Position
  /** @format int32 */
  tier?: number
  type?: PlayerFinderEnum
}

export enum PlayerFinderEnum {
  FREEAGENT = 'FREEAGENT',
  FRIEND = 'FRIEND'
}

export interface PlayerInfoDTO {
  /** @format int64 */
  playerId?: number
  position?: string
  role?: Role
  teamId?: string
}

export interface PlayerInventory {
  champions?: number[]
  icons?: number[]
  inventoryJwts?: string[]
  skins?: number[]
  wardSkins?: number[]
}

export interface PlayerLootDTO {
  /** @format int32 */
  count?: number
  /** @format int64 */
  expiryTime?: number
  lootName?: string
  refId?: string
}

export interface PlayerLootDefinitionsDTO {
  lootItemList?: LootItemListClientDTO
  playerLoot?: PlayerLootDTO[]
  queryResult?: QueryResultDTO
  recipeList?: LootLcdsRecipeListClientDTO
}

export interface PlayerLootResultDTO {
  added?: PlayerLootDTO[]
  details?: string
  redeemed?: string[]
  removed?: PlayerLootDTO[]
  status?: string
}

export interface PlayerMissionDTO {
  backgroundImageUrl?: string
  celebrationType?: string
  clientNotifyLevel?: string
  /** @format int64 */
  completedDate?: number
  completionExpression?: string
  /** @format int64 */
  cooldownTimeMillis?: number
  description?: string
  display?: MissionDisplay
  displayType?: string
  /** @format int64 */
  earnedDate?: number
  /** @format int64 */
  endTime?: number
  expiringWarnings?: MissionAlertDTO[]
  helperText?: string
  iconImageUrl?: string
  id?: string
  internalName?: string
  isNew?: boolean
  /** @format int64 */
  lastUpdatedTimestamp?: number
  locale?: string
  media?: Record<string, string>
  metadata?: MissionMetadata
  missionType?: string
  objectives?: PlayerMissionObjectiveDTO[]
  requirements?: string[]
  rewardStrategy?: RewardStrategy
  rewards?: PlayerMissionRewardDTO[]
  /** @format int32 */
  sequence?: number
  seriesName?: string
  /** @format int64 */
  startTime?: number
  status?: string
  title?: string
  viewed?: boolean
}

export interface PlayerMissionEligibilityData {
  /** @format int32 */
  level?: number
  loyaltyEnabled?: boolean
  playerInventory?: PlayerInventory
  userInfoToken?: string
}

export interface PlayerMissionObjectiveDTO {
  description?: string
  hasObjectiveBasedReward?: boolean
  progress?: MissionProgressDTO
  requirements?: string[]
  rewardGroups?: string[]
  /** @format int32 */
  sequence?: number
  status?: string
  type?: string
}

export interface PlayerMissionRewardDTO {
  description?: string
  iconNeedsFrame?: boolean
  iconUrl?: string
  isObjectiveBasedReward?: boolean
  itemId?: string
  media?: Record<string, string>
  /** @format int32 */
  quantity?: number
  rewardFulfilled?: boolean
  rewardGroup?: string
  rewardGroupSelected?: boolean
  rewardType?: string
  /** @format int32 */
  sequence?: number
  smallIconUrl?: string
  uniqueName?: string
}

export interface PlayerNotificationsPlayerNotificationConfigResource {
  /** @format int64 */
  ExpirationCheckFrequency?: number
}

export interface PlayerNotificationsPlayerNotificationResource {
  backgroundUrl?: string
  created?: string
  critical?: boolean
  data?: Record<string, string>
  detailKey?: string
  dismissible?: boolean
  expires?: string
  iconUrl?: string
  /** @format int64 */
  id?: number
  source?: string
  state?: string
  titleKey?: string
  type?: string
}

export interface PlayerNotificationsRiotMessagingServiceMessage {
  payload?: string
  resource?: string
  service?: string
  /** @format int64 */
  timestamp?: number
  version?: string
}

export interface PlayerParticipant {
  /** @format int64 */
  summonerId?: number
}

export interface PlayerRosterHistoryDTO {
  rosters?: RosterMemberDTO[]
}

export interface PlayerTierDTO {
  /** @format int64 */
  playerId?: number
  primaryPos?: Position
  secondPos?: Position
  /** @format int32 */
  tier?: number
}

export interface PluginDescriptionResource {
  name?: string
  pluginDependencies?: Record<string, string>
  riotMeta?: PluginMetadataResource
  version?: string
}

export interface PluginLcdsEvent {
  body?: Record<string, any>
  clientId?: string
  subtopic?: string
  typeName?: string
}

export interface PluginLcdsResponse {
  body?: Record<string, any>
  typeName?: string
}

export interface PluginManagerResource {
  state?: PluginManagerState
}

export enum PluginManagerState {
  NotReady = 'NotReady',
  PluginsInitialized = 'PluginsInitialized'
}

export interface PluginMetadataResource {
  app?: string
  feature?: string
  globalAssetBundles?: string[]
  hasBundledAssets?: boolean
  implements?: Record<string, string>
  mock?: string
  perLocaleAssetBundles?: Record<string, Record<string, any>>
  subtype?: string
  threading?: PluginThreadingModel
  type?: string
}

export interface PluginRegionLocaleChangedEvent {
  locale?: string
  region?: string
}

export interface PluginResource {
  app?: string
  assetBundleNames?: string[]
  dependencies?: PluginResourceContract[]
  feature?: string
  fullName?: string
  implementedContracts?: PluginResourceContract[]
  mountedAssetBundles?: Record<string, string>
  /** @format int32 */
  orderWADFileMounted?: number
  shortName?: string
  subtype?: string
  supertype?: string
  threadingModel?: string
  version?: string
}

export interface PluginResourceContract {
  fullName?: string
  version?: string
}

export interface PluginResourceEvent {
  data?: Record<string, any>
  eventType?: PluginResourceEventType
  uri?: string
}

export enum PluginResourceEventType {
  Create = 'Create',
  Update = 'Update',
  Delete = 'Delete'
}

export interface PluginServiceProxyResponse {
  error?: string
  methodName?: string
  payload?: string
  serviceName?: string
  status?: string
  uuid?: string
}

export enum PluginThreadingModel {
  Dedicated = 'dedicated',
  Sequential = 'sequential',
  Concurrent = 'concurrent',
  Parallel = 'parallel'
}

export enum Position {
  TOP = 'TOP',
  MIDDLE = 'MIDDLE',
  BOTTOM = 'BOTTOM',
  JUNGLE = 'JUNGLE',
  UTILITY = 'UTILITY',
  FILL = 'FILL',
  UNSELECTED = 'UNSELECTED'
}

export interface ProcessControlProcess {
  /** @format float */
  'restart-countdown-seconds'?: number
  status?: string
}

export interface PublicPhaseSubDTO {
  /** @format int64 */
  playerId?: number
  /** @format int64 */
  replacedPlayerId?: number
}

export interface PublicPhaseSubsDTO {
  /** @format int64 */
  phaseId?: number
  phaseSubs?: PublicPhaseSubDTO[]
}

export interface PublicRosterDTO {
  /** @format int64 */
  id?: number
  /** @format int32 */
  logo?: number
  /** @format int32 */
  logoColor?: number
  memberIds?: number[]
  name?: string
  phasesSubs?: PublicPhaseSubsDTO[]
  shortName?: string
  /** @format int64 */
  tournamentId?: number
}

export interface Punishment {
  permaBan?: boolean
  playerFacingMessage?: string
  punishedForChatLogs?: string[]
  punishedForGameIds?: number[]
  /** @format int64 */
  punishedUntilDateMillis?: number
  /** @format int64 */
  punishmentLengthGames?: number
  /** @format int64 */
  punishmentLengthMillis?: number
  punishmentReason?: string
  punishmentType?: string
}

export interface QueryResultDTO {
  /** @format int64 */
  lastUpdate?: number
  queryToLootNames?: Record<string, any>
}

export interface RankedScoutingDTO {
  /** @format int64 */
  playerId?: number
  topMasteries?: ChampionMasteryPublicDTO[]
  topSeasonChampions?: ChampionScoutingDTO[]
  /** @format int64 */
  totalMasteryScore?: number
}

export interface RankedScoutingMemberDTO {
  championScoutingData?: RankedScoutingTopChampionDTO[]
  /** @format int64 */
  playerId?: number
}

export interface RankedScoutingTopChampionDTO {
  /** @format int32 */
  championId?: number
  /** @format int32 */
  gameCount?: number
  /** @format float */
  kda?: number
  /** @format int32 */
  rank?: number
  /** @format int32 */
  winCount?: number
}

export interface RedeemLootTransactionDTO {
  /** @format int64 */
  accountId?: number
  clientId?: string
  lootName?: string
  /** @format int64 */
  playerId?: number
  puuid?: string
}

export interface RegionLocale {
  locale?: string
  region?: string
  webLanguage?: string
  webRegion?: string
}

/** Help format for remoting functions and types. */
export enum RemotingHelpFormat {
  Full = 'Full',
  Epytext = 'Epytext',
  Brief = 'Brief',
  Console = 'Console'
}

/** Well-known privilege levels for bindable functions. */
export enum RemotingPrivilege {
  None = 'None',
  User = 'User',
  Admin = 'Admin',
  Local = 'Local'
}

/** Serialization format for remoting requests and results. */
export enum RemotingSerializedFormat {
  JSON = 'JSON',
  YAML = 'YAML',
  MsgPack = 'MsgPack'
}

export interface ReplayMetadataV2 {
  /** @format int32 */
  fileSize?: number
  gameVersion?: string
}

export enum ReplayResponseStatus {
  OK = 'OK',
  NOT_FOUND = 'NOT_FOUND',
  EXPIRED = 'EXPIRED',
  BAD_REQUEST = 'BAD_REQUEST',
  INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR'
}

export interface RewardDetails {
  /** @format int64 */
  rosterId?: number
  teamMemberIds?: number[]
  /** @format int64 */
  tournamentId?: number
}

export interface RewardLogo {
  /** @format int32 */
  logo?: number
  /** @format int32 */
  memberOwnedCount?: number
}

export interface RewardStrategy {
  groupStrategy?: string
  selectMaxGroupCount?: number
  selectMinGroupCount?: number
}

export interface RiotMessagingServiceAcknowledgeBody {
  id?: string
}

export interface RiotMessagingServiceEntitlementsToken {
  accessToken?: string
  entitlements?: string[]
  issuer?: string
  subject?: string
  token?: string
}

export interface RiotMessagingServicePluginRegionLocaleChangedEvent {
  locale?: string
  region?: string
}

export interface RiotMessagingServiceSession {
  state?: RiotMessagingServiceState
  token?: string
  tokenType?: RiotMessagingServiceTokenType
}

export enum RiotMessagingServiceState {
  Disconnecting = 'Disconnecting',
  Disconnected = 'Disconnected',
  Connecting = 'Connecting',
  Connected = 'Connected'
}

export enum RiotMessagingServiceTokenType {
  Unavailable = 'Unavailable',
  Access = 'Access',
  Identity = 'Identity'
}

export interface RmsMessage {
  ackRequired?: boolean
  id?: string
  payload?: string
  resource?: string
  service?: string
  /** @format int64 */
  timestamp?: number
  version?: string
}

export enum Role {
  CAPTAIN = 'CAPTAIN',
  MEMBER = 'MEMBER',
  NONE = 'NONE'
}

export interface RosterAggregatedStatsDTO {
  periodStats?: RosterPeriodAggregatedStatsDTO[]
  playerStats?: Record<string, RosterPlayerAggregatedStatsDTO>
}

export interface RosterDTO {
  banned?: boolean
  /** @format int64 */
  captainId?: number
  dynamicState?: RosterDynamicStateDTO
  eliminated?: boolean
  /** @format int64 */
  id?: number
  invitationId?: string
  /** @format int32 */
  logo?: number
  /** @format int32 */
  logoColor?: number
  /** @format int32 */
  losses?: number
  members?: RosterMemberDTO[]
  multiUserChatJWT?: string
  name?: string
  phases?: PhaseRosterDTO[]
  /** @format int32 */
  points?: number
  shortName?: string
  /** @format int32 */
  tier?: number
  /** @format int64 */
  tournamentId?: number
  /** @format int32 */
  version?: number
  /** @format int32 */
  wins?: number
}

export interface RosterDynamicStateDTO {
  members?: PhaseInMember[]
  phaseCheckinStates?: number[]
  phaseRosterSubs?: PhaseRosterSubDTO[]
  /** @format int64 */
  rosterId?: number
  subbedMemberIds?: number[]
  ticketOffers?: TicketOfferDTO[]
  /** @format int64 */
  tournamentId?: number
  /** @format int32 */
  version?: number
  withdraw?: RosterWithdraw
}

export interface RosterMatchAggregatedStatsDTO {
  /** @format int64 */
  duration?: number
  /** @format int64 */
  gameId?: number
  /** @format int32 */
  kills?: number
  loserBracket?: boolean
  /** @format int32 */
  opponentKills?: number
  /** @format int32 */
  opponentLogo?: number
  /** @format int32 */
  opponentLogoColor?: number
  opponentShortName?: string
  playerChampionIds?: Record<string, number>
  /** @format int32 */
  round?: number
  win?: boolean
}

export interface RosterMemberDTO {
  bidType?: TicketType
  /** @format int32 */
  currentBid?: number
  /** @format int64 */
  joinTime?: number
  /** @format int32 */
  pendingPremiumSpend?: number
  /** @format int32 */
  pendingSpend?: number
  /** @format int64 */
  playerId?: number
  position?: Position
  /** @format int64 */
  rosterId?: number
  /** @format int32 */
  tier?: number
  /** @format int64 */
  tournamentId?: number
}

export interface RosterPeriodAggregatedStatsDTO {
  /** @format int32 */
  bracketSize?: number
  matchStats?: RosterMatchAggregatedStatsDTO[]
  /** @format int32 */
  period?: number
  playerBids?: Record<string, number>
  /** @format int64 */
  time?: number
}

export interface RosterPlayerAggregatedStatsDTO {
  rawStatsMax?: Record<string, number>
  rawStatsSum?: Record<string, number>
  sub?: boolean
}

export interface RosterStatsDTO {
  /** @format int64 */
  rosterId?: number
  /** @format int32 */
  rosterLogo?: number
  /** @format int32 */
  rosterLogoColor?: number
  rosterName?: string
  rosterShortName?: string
  /** @format int64 */
  scheduleEndTime?: number
  /** @format int64 */
  scheduleTime?: number
  stats?: RosterAggregatedStatsDTO
  /** @format int32 */
  tier?: number
  tournamentNameLocKey?: string
  tournamentNameLocKeySecondary?: string
  /** @format int32 */
  tournamentPeriods?: number
  /** @format int32 */
  tournamentThemeId?: number
}

export interface RosterWithdraw {
  declineWithdrawMembers?: number[]
  /** @format int64 */
  gameStartBufferMs?: number
  /** @format int64 */
  initVoteMember?: number
  /** @format int64 */
  initVoteTime?: number
  /** @format int64 */
  lockoutTimeMs?: number
  /** @format int64 */
  voteTimeoutMs?: number
  voteWithdrawMembers?: number[]
}

export interface SanitizerContainsSanitizedRequest {
  aggressiveScan?: boolean
  /** @format int32 */
  level?: number
  text?: string
}

export interface SanitizerContainsSanitizedResponse {
  contains?: boolean
}

export interface SanitizerSanitizeRequest {
  aggressiveScan?: boolean
  /** @format int32 */
  level?: number
  text?: string
  texts?: string[]
}

export interface SanitizerSanitizeResponse {
  modified?: boolean
  text?: string
  texts?: string[]
}

export interface SanitizerSanitizerStatus {
  /** @format int32 */
  breakingCharsCount?: number
  filteredWordCountsByLevel?: Record<string, number>
  locale?: string
  /** @format int32 */
  projectedCharsCount?: number
  ready?: boolean
  region?: string
  whitelistedWordCountsByLevel?: Record<string, number>
}

export interface SeriesDTO {
  /** @format int64 */
  createdDate?: number
  description?: string
  displayType?: string
  eligibilityType?: string
  /** @format int64 */
  endDate?: number
  id?: string
  internalName?: string
  /** @format int64 */
  lastUpdatedTimestamp?: number
  media?: SeriesMediaDTO
  optInButtonText?: string
  optOutButtonText?: string
  parentInternalName?: string
  /** @format int64 */
  startDate?: number
  status?: string
  tags?: string[]
  title?: string
  type?: string
  viewed?: boolean
  warnings?: AlertDTO[]
}

export interface SeriesMediaDTO {
  accentColor?: string
  backgroundImageLargeUrl?: string
  backgroundImageSmallUrl?: string
  backgroundUrl?: string
  trackerIconUrl?: string
}

export interface ShutdownLcdsForcedClientShutdown {
  additionalInfo?: string
  reason?: string
}

export interface SimpleDialogMessage {
  /** @format int64 */
  accountId?: number
  msgId?: string
  params?: string[]
  type?: string
}

export interface SimpleDialogMessageResponse {
  /** @format int64 */
  accountId?: number
  command?: string
  msgId?: string
}

export interface SpectatorLcdsSpectateAvailabilityDto {
  teamOrSummonerIds?: string[]
}

export interface SpectatorLcdsSpectateAvailabilityResponseDto {
  availableForWatching?: string[]
}

export interface StoreLcdsChampionDTO {
  active?: boolean
  botEnabled?: boolean
  /** @format int32 */
  championId?: number
  championSkins?: StoreLcdsChampionSkinDTO[]
  /** @format int64 */
  endDate?: number
  freeToPlay?: boolean
  freeToPlayReward?: boolean
  owned?: boolean
  /** @format int64 */
  purchaseDate?: number
  rankedPlayEnabled?: boolean
  sources?: string[]
  /** @format int32 */
  winCountRemaining?: number
}

export interface StoreLcdsChampionSkinDTO {
  /** @format int32 */
  championId?: number
  /** @format int64 */
  endDate?: number
  freeToPlayReward?: boolean
  lastSelected?: boolean
  owned?: boolean
  /** @format int64 */
  purchaseDate?: number
  /** @format int32 */
  skinId?: number
  sources?: string[]
  stillObtainable?: boolean
  /** @format int32 */
  winCountRemaining?: number
}

export interface StoreLcdsSimpleDialogMessage {
  /** @format int64 */
  accountId?: number
  msgId?: string
  params?: string[]
  type?: string
}

export interface StoreLcdsSimpleDialogMessageResponse {
  /** @format int64 */
  accountId?: number
  command?: string
  msgId?: string
}

export interface StoreLcdsStoreAccountBalanceNotification {
  /** @format int64 */
  ip?: number
  /** @format int64 */
  rp?: number
}

export interface StoreLcdsStoreFulfillmentNotification {
  data?: Record<string, any>
  inventoryType?: string
  /** @format int64 */
  ip?: number
  /** @format int64 */
  rp?: number
}

export enum SubState {
  SUGGESTED = 'SUGGESTED',
  PENDING = 'PENDING',
  DECLINED = 'DECLINED',
  REVOKED = 'REVOKED',
  NOT_READY = 'NOT_READY',
  FORCED_NOT_READY = 'FORCED_NOT_READY',
  READY = 'READY'
}

export interface ThemeVp {
  /** @format int32 */
  themeId?: number
  /** @format int32 */
  themeVp?: number
}

export interface TicketOfferDTO {
  /** @format int32 */
  count?: number
  /** @format int64 */
  offerPlayerId?: number
  /** @format int64 */
  receivePlayerId?: number
  ticketOfferState?: TicketOfferState
  type?: TicketType
}

export enum TicketOfferState {
  ACTIVE = 'ACTIVE',
  ACCEPTED = 'ACCEPTED',
  REJECTED = 'REJECTED',
  REVOKED = 'REVOKED'
}

export enum TicketType {
  BASIC = 'BASIC',
  PREMIUM = 'PREMIUM'
}

export interface TierConfig {
  /** @format int64 */
  delayTime?: number
  /** @format int64 */
  estimateTime?: number
  /** @format int32 */
  tier?: number
}

export interface TimeSeriesEventBeginV1 {
  /** event name */
  eventName?: string
  /**
   * timestamp in microseconds of when the event occurred
   * @format int64
   */
  when?: number
}

export interface TimeSeriesEventEndV1 {
  /** event name */
  eventName?: string
  /** optional event name suffix */
  suffix?: string
  /**
   * timestamp in microseconds of when the event occurred
   * @format int64
   */
  when?: number
}

export interface TimeSeriesEventMarkerV1 {
  /** event name */
  eventName?: string
  /** event marker name */
  markerName?: string
  /**
   * timestamp in microseconds of when the event occurred
   * @format int64
   */
  when?: number
}

export interface TournamentDTO {
  /** @format int64 */
  bracketFormationInitDelayMs?: number
  /** @format int64 */
  bracketFormationIntervalMs?: number
  bracketSize?: string
  buyInOptions?: number[]
  buyInOptionsPremium?: number[]
  /** @format int32 */
  entryFee?: number
  honorRestriction?: boolean
  /** @format int64 */
  id?: number
  lastThemeOfSeason?: boolean
  lft?: boolean
  /** @format int32 */
  maxInvites?: number
  /** @format int32 */
  maxSub?: number
  /** @format int32 */
  maxSuggestionsPerPlayer?: number
  /** @format int32 */
  minGames?: number
  nameLocKey?: string
  nameLocKeySecondary?: string
  phases?: TournamentPhaseDTO[]
  /** @format int32 */
  queueId?: number
  rankRestriction?: boolean
  /** @format int64 */
  resumeTime?: number
  rewardConfig?: ClashRewardConfigClient[]
  /** @format int64 */
  rosterCreateDeadline?: number
  /** @format int32 */
  rosterSize?: number
  /** @format int64 */
  scheduleEndTime?: number
  /** @format int64 */
  scheduleTime?: number
  /** @format int64 */
  scoutingTimeMs?: number
  smsRestriction?: boolean
  status?: TournamentStatusEnum
  /** @format int32 */
  themeId?: number
  tierConfigs?: TierConfig[]
  voiceEnabled?: boolean
}

export interface TournamentHistoryAndWinnersDTO {
  tournamentHistory?: TournamentDTO[]
  tournamentWinnersCompressed?: string
}

export interface TournamentInfoDTO {
  inviteePendingRosters?: PendingRosterDTO[]
  pendingRoster?: PendingRosterDTO
  roster?: RosterDTO
  subRosters?: RosterDTO[]
  /** @format int32 */
  themeVp?: number
  tournament?: TournamentDTO
}

export interface TournamentInfoMinimalDTO {
  /** @format int64 */
  time?: number
  tournamentInfo?: TournamentInfoDTO[]
}

export interface TournamentPhaseDTO {
  cancelled?: boolean
  capacityStatus?: CapacityEnum
  /** @format int64 */
  id?: number
  limitTiers?: number[]
  /** @format int32 */
  period?: number
  /** @format int64 */
  registrationTime?: number
  /** @format int64 */
  startTime?: number
  /** @format int64 */
  tournamentId?: number
}

export interface TournamentPlayerInfoDTO {
  player?: PlayerDTO
  rosterStats?: RosterStatsDTO[]
  /** @format int32 */
  seasonVp?: number
  themeVps?: ThemeVp[]
  /** @format int32 */
  tier?: number
  /** @format int64 */
  time?: number
  tournamentInfo?: TournamentInfoDTO[]
}

export enum TournamentStatusEnum {
  DEFAULT = 'DEFAULT',
  CANCELLED = 'CANCELLED',
  PAUSED = 'PAUSED',
  PRERESUME = 'PRERESUME'
}

export interface TracingEventV1 {
  /** destination module name */
  dest?: string
  /** event specific details */
  details?: string
  /** event name */
  name?: string
  /** source module name */
  src?: string
  /** a list of tags associated with this event */
  tags?: string
  /**
   * timestamp in microseconds of when the event occurred
   * @format int64
   */
  when?: number
}

export enum TracingModuleThreadingModelV1 {
  KNone = 'kNone',
  KMainThread = 'kMainThread',
  KDedicated = 'kDedicated',
  KSequential = 'kSequential',
  KConcurrent = 'kConcurrent',
  KParallel = 'kParallel'
}

export enum TracingModuleTypeV1 {
  KUnknown = 'kUnknown',
  KRemoteAppModule = 'kRemoteAppModule',
  KBackEndPlugin = 'kBackEndPlugin',
  KBackendOther = 'kBackendOther',
  KFrontEndPlugin = 'kFrontEndPlugin',
  KRemotingSource = 'kRemotingSource'
}

export interface TracingModuleV1 {
  /** @format int32 */
  moduleId?: number
  name?: string
  threadingModel?: TracingModuleThreadingModelV1
  type?: TracingModuleTypeV1
}

export interface TracingPhaseBeginV1 {
  /** relative importance of this phase */
  importance?: TracingPhaseImportanceV1
  /** phase name */
  name?: string
  /**
   * timestamp in microseconds of when the phase began
   * @format int64
   */
  when?: number
}

export interface TracingPhaseEndV1 {
  /** phase name */
  name?: string
  /**
   * timestamp in microseconds of when the phase ended
   * @format int64
   */
  when?: number
}

export enum TracingPhaseImportanceV1 {
  Trivial = 'trivial',
  Minor = 'minor',
  Major = 'major'
}

export interface TutorialMetadata {
  displayRewards?: Record<string, string>
  queueId?: string
  /** @format int32 */
  stepNumber?: number
  useChosenChampion?: boolean
  useQuickSearchMatchmaking?: boolean
}

export interface VerboseLootOddsDTO {
  chanceToContain?: LootOddsDTO[]
  checksOwnership?: boolean
  guaranteedToContain?: LootOddsDTO[]
  hasPityRules?: boolean
  lastUpdated?: string
  recipeName?: string
}

export interface VoiceChatAudioPropertiesResource {
  /** @format double */
  fastEnergyMeter?: number
  isLoopbackEnabled?: boolean
  isMicActive?: boolean
  isSpeakerActive?: boolean
  /** @format int32 */
  micEnergy?: number
  /** @format int32 */
  micVolume?: number
  /** @format double */
  noiseFloorMeter?: number
  /** @format int32 */
  speakerEnergy?: number
  /** @format int32 */
  speakerVolume?: number
  /** @format double */
  speechThresholdMeter?: number
}

export interface VoiceChatCallStatsResource {
  callId?: string
  captureDeviceConsecutivelyReadCount?: number[]
  codecName?: string
  /** @format int64 */
  currentBars?: number
  /** @format int64 */
  currentOpusBandwidth?: number
  /** @format int64 */
  currentOpusBitRate?: number
  /** @format int64 */
  currentOpusComplexity?: number
  /** @format int64 */
  currentOpusMaxPacketSize?: number
  /** @format int64 */
  currentOpusVbrMode?: number
  /** @format int64 */
  incomingDiscarded?: number
  /** @format int64 */
  incomingOutOfTime?: number
  /** @format int64 */
  incomingPacketloss?: number
  /** @format int64 */
  incomingReceived?: number
  /** @format double */
  lastLatencyMeasured?: number
  /** @format int64 */
  latencyMeasurementCount?: number
  /** @format int64 */
  latencyPacketsDropped?: number
  /** @format int64 */
  latencyPacketsLost?: number
  /** @format int64 */
  latencyPacketsMalformed?: number
  /** @format int64 */
  latencyPacketsNegativeLatency?: number
  /** @format int64 */
  latencyPacketsSent?: number
  /** @format double */
  latencySum?: number
  /** @format double */
  maxLatency?: number
  /** @format double */
  minLatency?: number
  /** @format int64 */
  outgoingSent?: number
  /** @format int64 */
  plcOn?: number
  /** @format int64 */
  plcSyntheticFrames?: number
  /** @format double */
  rFactor?: number
  /** @format int64 */
  renderDeviceErrors?: number
  /** @format int64 */
  renderDeviceOverruns?: number
  /** @format int64 */
  renderDeviceUnderruns?: number
  /** @format double */
  sampleIntervalBegin?: number
  /** @format double */
  sampleIntervalEnd?: number
}

export enum VoiceChatCaptureDevicePermissionStatus {
  PromptForPermission = 'promptForPermission',
  PermissionDenied = 'permissionDenied',
  PermissionGranted = 'permissionGranted'
}

export interface VoiceChatCodecSettingsResource {
  /** @format int32 */
  codecBandwidth?: number
  /** @format int32 */
  codecBitrate?: number
  /** @format int32 */
  codecComplexity?: number
  /** @format int32 */
  codecVbrMode?: number
}

export enum VoiceChatConfigReadinessEnum {
  NotReady = 'NotReady',
  Ready = 'Ready',
  Disabled = 'Disabled'
}

export interface VoiceChatConfigResource {
  accessTokenUri?: string
  authTokenUri?: string
  jwt2gvtUrl?: string
  /** @format int32 */
  logLevel?: number
  logLevelName?: string
  logsPath?: string
  provider?: string
  useExternalAuth?: boolean
  voiceDomain?: string
  voiceServerUri?: string
}

export interface VoiceChatConfigStatus {
  readiness?: VoiceChatConfigReadinessEnum
}

export enum VoiceChatConfigType {
  Public = 'public',
  Player = 'player'
}

export interface VoiceChatDeviceResource {
  handle?: string
  is_current_device?: boolean
  is_default?: boolean
  is_effective_device?: boolean
  name?: string
}

export interface VoiceChatParticipantResource {
  /** @format int32 */
  energy?: number
  id?: string
  isMuted?: boolean
  isSpeaking?: boolean
  name?: string
  /** @format int32 */
  speakingTimestamp?: number
  uri?: string
  /** @format int32 */
  volume?: number
}

export interface VoiceChatPushToTalkResource {
  pttEnabled?: boolean
  pttKeyBinding?: string
}

export interface VoiceChatRsoAuthorizationResource {
  /** @format int64 */
  currentAccountId?: number
  currentPlatformId?: string
  subject?: string
}

export interface VoiceChatSessionResource {
  id?: string
  isMuted?: boolean
  isTransmitEnabled?: boolean
  participants?: VoiceChatParticipantResource[]
  status?: VoiceChatSessionStatus
  /** @format int32 */
  volume?: number
}

export enum VoiceChatSessionStatus {
  Active = 'active',
  OnHold = 'onHold'
}

export interface VoiceChatSettingsResource {
  currentCaptureDeviceHandle?: string
  currentRenderDeviceHandle?: string
  localMicMuted?: boolean
  loopbackEnabled?: boolean
  /** @format int32 */
  micLevel?: number
  /** @format int32 */
  speakerLevel?: number
  /** @format int32 */
  vadHangoverTime?: number
  /** @format int32 */
  vadSensitivity?: number
}

export interface VoiceChatStateResource {
  connected?: boolean
}

export enum VoiceChatStateType {
  Disconnected = 'disconnected',
  Connecting = 'connecting',
  Connected = 'connected',
  Disconnecting = 'disconnecting',
  Initialized = 'initialized',
  Shuttingdown = 'shuttingdown'
}

export interface VoiceChatUpdateCodecSettingsResource {
  /** @format int32 */
  codecBandwidth?: number
  /** @format int32 */
  codecBitrate?: number
  /** @format int32 */
  codecComplexity?: number
  /** @format int32 */
  codecVbrMode?: number
}

export interface VoiceChatUpdateParticipantResource {
  isMuted?: boolean
  /** @format int32 */
  volume?: number
}

export interface VoiceChatUpdateSettingsResource {
  currentCaptureDeviceHandle?: string
  currentRenderDeviceHandle?: string
  localMicMuted?: boolean
  loopbackEnabled?: boolean
  /** @format int32 */
  micLevel?: number
  /** @format int32 */
  speakerLevel?: number
  /** @format int32 */
  vadHangoverTime?: number
  /** @format int32 */
  vadSensitivity?: number
}

export interface VoiceChatVoiceErrorCounterResource {
  /** @format int64 */
  count?: number
  error?: VoiceChatVoiceErrorResource
  /** @format int64 */
  timeOfLastError?: number
}

export interface VoiceChatVoiceErrorResource {
  errorString?: string
  /** @format int64 */
  responseType?: number
  responseTypeString?: string
  /** @format int64 */
  returnCode?: number
  /** @format int64 */
  statusCode?: number
  statusString?: string
}

/** User Experience Settings Operating System Information */
export interface BasicOperatingSystemInfo {
  edition?: string
  platform?: string
  versionMajor?: string
  versionMinor?: string
}

/** User Experience Settings System Information */
export interface BasicSystemInfo {
  /** User Experience Settings Operating System Information */
  operatingSystem?: BasicOperatingSystemInfo
  /** @format int64 */
  physicalMemory?: number
  /** @format int32 */
  physicalProcessorCores?: number
  /** @format int32 */
  processorSpeed?: number
}

export interface Cookie {
  domain?: string
  /** @format int64 */
  expires?: number
  httponly?: boolean
  name?: string
  path?: string
  secure?: boolean
  url?: string
  value?: string
}

export type QueryParamsType = Record<string | number, any>
export type ResponseFormat = keyof Omit<Body, 'body' | 'bodyUsed'>

export interface FullRequestParams extends Omit<RequestInit, 'body'> {
  /** set parameter to `true` for call `securityWorker` for this request */
  secure?: boolean
  /** request path */
  path: string
  /** content type of request body */
  type?: ContentType
  /** query params */
  query?: QueryParamsType
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat
  /** request body */
  body?: unknown
  /** base url */
  baseUrl?: string
  /** request cancellation token */
  cancelToken?: CancelToken
}

export type RequestParams = Omit<FullRequestParams, 'body' | 'method' | 'query' | 'path'>

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string
  baseApiParams?: Omit<RequestParams, 'baseUrl' | 'cancelToken' | 'signal'>
  securityWorker?: (
    securityData: SecurityDataType | null
  ) => Promise<RequestParams | void> | RequestParams | void
  customFetch?: typeof fetch
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
  data: D
  error: E
}

type CancelToken = Symbol | string | number

export enum ContentType {
  Json = 'application/json',
  FormData = 'multipart/form-data',
  UrlEncoded = 'application/x-www-form-urlencoded',
  Text = 'text/plain'
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = ''
  private securityData: SecurityDataType | null = null
  private securityWorker?: ApiConfig<SecurityDataType>['securityWorker']
  private abortControllers = new Map<CancelToken, AbortController>()
  private customFetch = (...fetchParams: Parameters<typeof fetch>) => fetch(...fetchParams)

  private baseApiParams: RequestParams = {
    credentials: 'same-origin',
    headers: {},
    redirect: 'follow',
    referrerPolicy: 'no-referrer'
  }

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig)
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data
  }

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key)
    return `${encodedKey}=${encodeURIComponent(typeof value === 'number' ? value : `${value}`)}`
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key])
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key]
    return value.map((v: any) => this.encodeQueryParam(key, v)).join('&')
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {}
    const keys = Object.keys(query).filter((key) => 'undefined' !== typeof query[key])
    return keys
      .map((key) =>
        Array.isArray(query[key])
          ? this.addArrayQueryParam(query, key)
          : this.addQueryParam(query, key)
      )
      .join('&')
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery)
    return queryString ? `?${queryString}` : ''
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === 'object' || typeof input === 'string')
        ? JSON.stringify(input)
        : input,
    [ContentType.Text]: (input: any) =>
      input !== null && typeof input !== 'string' ? JSON.stringify(input) : input,
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key]
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === 'object' && property !== null
            ? JSON.stringify(property)
            : `${property}`
        )
        return formData
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input)
  }

  protected mergeRequestParams(params1: RequestParams, params2?: RequestParams): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {})
      }
    }
  }

  protected createAbortSignal = (cancelToken: CancelToken): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken)
      if (abortController) {
        return abortController.signal
      }
      return void 0
    }

    const abortController = new AbortController()
    this.abortControllers.set(cancelToken, abortController)
    return abortController.signal
  }

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken)

    if (abortController) {
      abortController.abort()
      this.abortControllers.delete(cancelToken)
    }
  }

  public request = async <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }: FullRequestParams): Promise<HttpResponse<T, E>> => {
    const secureParams =
      ((typeof secure === 'boolean' ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker(this.securityData))) ||
      {}
    const requestParams = this.mergeRequestParams(params, secureParams)
    const queryString = query && this.toQueryString(query)
    const payloadFormatter = this.contentFormatters[type || ContentType.Json]
    const responseFormat = format || requestParams.format

    return this.customFetch(
      `${baseUrl || this.baseUrl || ''}${path}${queryString ? `?${queryString}` : ''}`,
      {
        ...requestParams,
        headers: {
          ...(requestParams.headers || {}),
          ...(type && type !== ContentType.FormData ? { 'Content-Type': type } : {})
        },
        signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
        body: typeof body === 'undefined' || body === null ? null : payloadFormatter(body)
      }
    ).then(async (response) => {
      const r = response as HttpResponse<T, E>
      r.data = null as unknown as T
      r.error = null as unknown as E

      const data = !responseFormat
        ? r
        : await response[responseFormat]()
            .then((data) => {
              if (r.ok) {
                r.data = data
              } else {
                r.error = data
              }
              return r
            })
            .catch((e) => {
              r.error = e
              return r
            })

      if (cancelToken) {
        this.abortControllers.delete(cancelToken)
      }

      if (!response.ok) throw data
      return data
    })
  }
}

// /**
//  * @title No title
//  * @version 1.0.0
//  */
// export class Api<SecurityDataType extends unknown> extends HttpClient<SecurityDataType> {
//   asyncDelete = {
//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name AsyncDelete
//      * @summary Cancels the asynchronous operation or removes its completion status.
//      * @request POST:/AsyncDelete
//      */
//     asyncDelete: (
//       query: {
//         /**
//          * ID of the asynchronous operation to remove
//          * @format int32
//          */
//         asyncToken: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/AsyncDelete`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   asyncResult = {
//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name AsyncResult
//      * @summary Retrieves the result of a completed asynchronous operation.
//      * @request POST:/AsyncResult
//      */
//     asyncResult: (
//       query: {
//         /**
//          * ID of the asynchronous operation to check
//          * @format int32
//          */
//         asyncToken: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/AsyncResult`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   asyncStatus = {
//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name AsyncStatus
//      * @summary Retrieves details on the current state of an asynchronous operation.
//      * @request POST:/AsyncStatus
//      */
//     asyncStatus: (
//       query: {
//         /**
//          * ID of the asynchronous operation to check
//          * @format int32
//          */
//         asyncToken: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/AsyncStatus`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   cancel = {
//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name Cancel
//      * @summary Attempts to cancel an asynchronous operation
//      * @request POST:/Cancel
//      */
//     cancel: (
//       query: {
//         /**
//          * Operation to cancel
//          * @format int32
//          */
//         asyncToken: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/Cancel`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   exit = {
//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name Exit
//      * @summary Closes the connection.
//      * @request POST:/Exit
//      */
//     exit: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/Exit`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       })
//   }
//   help = {
//     /**
//      * @description With no arguments, returns a list of all available functions and types along with a short description. If a function or type is specified, returns detailed information about it.
//      *
//      * @tags builtin
//      * @name Help
//      * @summary Returns information on available functions and types
//      * @request POST:/Help
//      */
//     help: (
//       query?: {
//         /** Name of the function or type to describe */
//         target?: string
//         /** Format for returned information */
//         format?: 'Full' | 'Epytext' | 'Brief' | 'Console'
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/Help`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   loggingGetEntries = {
//     /**
//      * No description
//      *
//      * @name LoggingGetEntries
//      * @summary Gets all buffered log entries since the last call.
//      * @request POST:/LoggingGetEntries
//      */
//     loggingGetEntries: (params: RequestParams = {}) =>
//       this.request<LogEvent[], any>({
//         path: `/LoggingGetEntries`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       })
//   }
//   loggingMetrics = {
//     /**
//      * No description
//      *
//      * @name LoggingMetrics
//      * @summary Returns all metrics
//      * @request POST:/LoggingMetrics
//      */
//     loggingMetrics: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/LoggingMetrics`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       })
//   }
//   loggingMetricsMetadata = {
//     /**
//      * No description
//      *
//      * @name LoggingMetricsMetadata
//      * @summary Returns metadata for all metrics
//      * @request POST:/LoggingMetricsMetadata
//      */
//     loggingMetricsMetadata: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/LoggingMetricsMetadata`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       })
//   }
//   loggingStart = {
//     /**
//      * No description
//      *
//      * @name LoggingStart
//      * @summary Initializes the logging system.
//      * @request POST:/LoggingStart
//      */
//     loggingStart: (
//       query?: {
//         /** Specifies whether logs will be buffered for LoggingGetEntries to work */
//         buffered?: boolean
//         /** Minimum severity level to fire a log event */
//         severity?: 'Okay' | 'Warning' | 'Error' | 'Always'
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/LoggingStart`,
//         method: 'POST',
//         query: query,
//         ...params
//       })
//   }
//   loggingStop = {
//     /**
//      * No description
//      *
//      * @name LoggingStop
//      * @summary Finalizes the logging system.
//      * @request POST:/LoggingStop
//      */
//     loggingStop: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/LoggingStop`,
//         method: 'POST',
//         ...params
//       })
//   }
//   memoryPools = {
//     /**
//      * No description
//      *
//      * @name MemoryPools
//      * @summary Returns current pool usage
//      * @request POST:/MemoryPools
//      */
//     memoryPools: (
//       query?: {
//         /** Name of the context to find (optional) */
//         contextName?: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/MemoryPools`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   subscribe = {
//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name Subscribe
//      * @summary Subscribes to a given event
//      * @request POST:/Subscribe
//      */
//     subscribe: (
//       query: {
//         /** Name of the event to subscribe to */
//         eventName: string
//         /** Desired format to receive events in. If unspecified, events will be sent in the active result format at the time. */
//         format?: 'JSON' | 'YAML' | 'MsgPack'
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/Subscribe`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   unsubscribe = {
//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name Unsubscribe
//      * @summary Unsubscribes from a given event
//      * @request POST:/Unsubscribe
//      */
//     unsubscribe: (
//       query: {
//         /** Name of the event to unsubscribe from */
//         eventName: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/Unsubscribe`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   webSocketFormat = {
//     /**
//      * @description With no arguments, returns the current output format being used. If a format is specified, switches the console output to that format.
//      *
//      * @tags builtin
//      * @name WebSocketFormat
//      * @summary Controls the console output format
//      * @request POST:/WebSocketFormat
//      */
//     webSocketFormat: (
//       query?: {
//         /** Output format to switch to */
//         format?: 'JSON' | 'YAML' | 'MsgPack'
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/WebSocketFormat`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   antiAddiction = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-anti-addiction
//      * @name GetAntiAddictionV1PoliciesByPolicyTypeAntiAddictionState
//      * @request GET:/anti-addiction/v1/policies/{policyType}/anti-addiction-state
//      */
//     getAntiAddictionV1PoliciesByPolicyTypeAntiAddictionState: (
//       policyType: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolAntiAddictionAntiAddictionState, any>({
//         path: `/anti-addiction/v1/policies/${policyType}/anti-addiction-state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   async = {
//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name HttpAsyncResult
//      * @summary Retrieves the result of a completed asynchronous operation.
//      * @request GET:/async/v1/result/{asyncToken}
//      */
//     httpAsyncResult: (asyncToken: any, asyncToken: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/async/v1/result/${asyncToken}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name HttpAsyncDelete
//      * @summary Cancels the asynchronous operation or removes its completion status.
//      * @request DELETE:/async/v1/status/{asyncToken}
//      */
//     httpAsyncDelete: (asyncToken: any, asyncToken: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/async/v1/status/${asyncToken}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name HttpAsyncStatus
//      * @summary Retrieves details on the current state of an asynchronous operation.
//      * @request GET:/async/v1/status/{asyncToken}
//      */
//     httpAsyncStatus: (asyncToken: any, asyncToken: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/async/v1/status/${asyncToken}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   clientConfig = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin client-config
//      * @name GetClientConfigV1Config
//      * @request GET:/client-config/v1/config
//      */
//     getClientConfigV1Config: (
//       query: {
//         type: 'public' | 'player'
//         app?: string
//         version?: string
//         patchline?: string
//         region?: string
//         namespace?: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, Record<string, any>>, any>({
//         path: `/client-config/v1/config`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin client-config
//      * @name GetClientConfigV1ConfigByName
//      * @request GET:/client-config/v1/config/{name}
//      */
//     getClientConfigV1ConfigByName: (
//       name: any,
//       query: {
//         type: 'public' | 'player'
//         app?: string
//         version?: string
//         patchline?: string
//         region?: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/client-config/v1/config/${name}`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin client-config
//      * @name PutClientConfigV1EntitlementsToken
//      * @request PUT:/client-config/v1/entitlements-token
//      */
//     putClientConfigV1EntitlementsToken: (
//       data: ClientConfigEntitlementsUpdate,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/client-config/v1/entitlements-token`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin client-config
//      * @name PutClientConfigV1RefreshConfigStatus
//      * @request PUT:/client-config/v1/refresh-config-status
//      */
//     putClientConfigV1RefreshConfigStatus: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/client-config/v1/refresh-config-status`,
//         method: 'PUT',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin client-config
//      * @name GetClientConfigV1StatusByType
//      * @request GET:/client-config/v1/status/{type}
//      */
//     getClientConfigV1StatusByType: (type: any, params: RequestParams = {}) =>
//       this.request<ClientConfigConfigStatus, any>({
//         path: `/client-config/v1/status/${type}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin client-config
//      * @name GetClientConfigV2ConfigByName
//      * @request GET:/client-config/v2/config/{name}
//      */
//     getClientConfigV2ConfigByName: (name: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/client-config/v2/config/${name}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin client-config
//      * @name PutClientConfigV2NamespaceChanges
//      * @request PUT:/client-config/v2/namespace-changes
//      */
//     putClientConfigV2NamespaceChanges: (
//       data: ClientConfigConfigNamespaceUpdate,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/client-config/v2/namespace-changes`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin client-config
//      * @name GetClientConfigV2NamespaceByNamespace
//      * @request GET:/client-config/v2/namespace/{namespace}
//      */
//     getClientConfigV2NamespaceByNamespace: (namespace: any, params: RequestParams = {}) =>
//       this.request<Record<string, Record<string, any>>, any>({
//         path: `/client-config/v2/namespace/${namespace}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin client-config
//      * @name GetClientConfigV2NamespaceByNamespacePlayer
//      * @request GET:/client-config/v2/namespace/{namespace}/player
//      */
//     getClientConfigV2NamespaceByNamespacePlayer: (namespace: any, params: RequestParams = {}) =>
//       this.request<Record<string, Record<string, any>>, any>({
//         path: `/client-config/v2/namespace/${namespace}/player`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin client-config
//      * @name GetClientConfigV2NamespaceByNamespacePublic
//      * @request GET:/client-config/v2/namespace/{namespace}/public
//      */
//     getClientConfigV2NamespaceByNamespacePublic: (namespace: any, params: RequestParams = {}) =>
//       this.request<Record<string, Record<string, any>>, any>({
//         path: `/client-config/v2/namespace/${namespace}/public`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   cookieJar = {
//     /**
//      * No description
//      *
//      * @name GetCookieJarV1Cookies
//      * @summary Get all cookies.
//      * @request GET:/cookie-jar/v1/cookies
//      */
//     getCookieJarV1Cookies: (params: RequestParams = {}) =>
//       this.request<Cookie[], any>({
//         path: `/cookie-jar/v1/cookies`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostCookieJarV1Cookies
//      * @summary Set a cookie.
//      * @request POST:/cookie-jar/v1/cookies
//      */
//     postCookieJarV1Cookies: (data: Cookie[], params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/cookie-jar/v1/cookies`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   crashReporting = {
//     /**
//      * No description
//      *
//      * @name GetCrashReportingV1CrashStatus
//      * @summary Returns whether or not the game or client have crashed
//      * @request GET:/crash-reporting/v1/crash-status
//      */
//     getCrashReportingV1CrashStatus: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/crash-reporting/v1/crash-status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   dataStore = {
//     /**
//      * No description
//      *
//      * @name GetDataStoreV1InstallDir
//      * @summary Gets the current install directory (used internally.)
//      * @request GET:/data-store/v1/install-dir
//      */
//     getDataStoreV1InstallDir: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/data-store/v1/install-dir`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetDataStoreV1InstallSettingsByPath
//      * @summary Get the data for the specified key from the install settings.
//      * @request GET:/data-store/v1/install-settings/{path}
//      */
//     getDataStoreV1InstallSettingsByPath: (path: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/data-store/v1/install-settings/${path}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostDataStoreV1InstallSettingsByPath
//      * @summary Set the data for the specified key from the install settings.
//      * @request POST:/data-store/v1/install-settings/{path}
//      */
//     postDataStoreV1InstallSettingsByPath: (
//       path: any,
//       data: Record<string, any>,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/data-store/v1/install-settings/${path}`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetDataStoreV1SystemSettingsByPath
//      * @summary Get the setting for the specified key.
//      * @request GET:/data-store/v1/system-settings/{path}
//      */
//     getDataStoreV1SystemSettingsByPath: (path: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/data-store/v1/system-settings/${path}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   entitlements = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin entitlements
//      * @name GetEntitlementsV1Token
//      * @request GET:/entitlements/v1/token
//      */
//     getEntitlementsV1Token: (params: RequestParams = {}) =>
//       this.request<EntitlementsToken, any>({
//         path: `/entitlements/v1/token`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolAccountVerification = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-account-verification
//      * @name PostLolAccountVerificationV1Authenticate
//      * @request POST:/lol-account-verification/v1/authenticate
//      */
//     postLolAccountVerificationV1Authenticate: (
//       data: LolAccountVerificationAuthenticateRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolAccountVerificationAuthenticateResponse, any>({
//         path: `/lol-account-verification/v1/authenticate`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-account-verification
//      * @name GetLolAccountVerificationV1Device
//      * @request GET:/lol-account-verification/v1/device
//      */
//     getLolAccountVerificationV1Device: (params: RequestParams = {}) =>
//       this.request<LolAccountVerificationDeviceResponse, any>({
//         path: `/lol-account-verification/v1/device`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-account-verification
//      * @name PostLolAccountVerificationV1Invalidate
//      * @request POST:/lol-account-verification/v1/invalidate
//      */
//     postLolAccountVerificationV1Invalidate: (params: RequestParams = {}) =>
//       this.request<LolAccountVerificationInvalidateResponse, any>({
//         path: `/lol-account-verification/v1/invalidate`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-account-verification
//      * @name GetLolAccountVerificationV1IsVerified
//      * @request GET:/lol-account-verification/v1/is-verified
//      */
//     getLolAccountVerificationV1IsVerified: (params: RequestParams = {}) =>
//       this.request<LolAccountVerificationIsVerifiedResponse, any>({
//         path: `/lol-account-verification/v1/is-verified`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-account-verification
//      * @name PostLolAccountVerificationV1SendToken
//      * @request POST:/lol-account-verification/v1/send-token
//      */
//     postLolAccountVerificationV1SendToken: (
//       data: LolAccountVerificationSendTokenRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolAccountVerificationSendTokenResponse, any>({
//         path: `/lol-account-verification/v1/send-token`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-account-verification
//      * @name PostLolAccountVerificationV1Verify
//      * @request POST:/lol-account-verification/v1/verify
//      */
//     postLolAccountVerificationV1Verify: (
//       data: LolAccountVerificationVerifyRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolAccountVerificationVerifyResponse, any>({
//         path: `/lol-account-verification/v1/verify`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolActiveBoosts = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-active-boosts
//      * @name GetLolActiveBoostsV1ActiveBoosts
//      * @request GET:/lol-active-boosts/v1/active-boosts
//      */
//     getLolActiveBoostsV1ActiveBoosts: (params: RequestParams = {}) =>
//       this.request<LolActiveBoostsActiveBoosts, any>({
//         path: `/lol-active-boosts/v1/active-boosts`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolAntiAddiction = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-anti-addiction
//      * @name GetLolAntiAddictionV1AntiAddictionToken
//      * @request GET:/lol-anti-addiction/v1/anti-addiction-token
//      */
//     getLolAntiAddictionV1AntiAddictionToken: (params: RequestParams = {}) =>
//       this.request<LolAntiAddictionAntiAddictionToken, any>({
//         path: `/lol-anti-addiction/v1/anti-addiction-token`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolBanners = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-banners
//      * @name GetLolBannersV1CurrentSummonerFlags
//      * @request GET:/lol-banners/v1/current-summoner/flags
//      */
//     getLolBannersV1CurrentSummonerFlags: (params: RequestParams = {}) =>
//       this.request<LolBannersBannerFlag[], any>({
//         path: `/lol-banners/v1/current-summoner/flags`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-banners
//      * @name GetLolBannersV1CurrentSummonerFlagsEquipped
//      * @request GET:/lol-banners/v1/current-summoner/flags/equipped
//      */
//     getLolBannersV1CurrentSummonerFlagsEquipped: (params: RequestParams = {}) =>
//       this.request<LolBannersBannerFlag, any>({
//         path: `/lol-banners/v1/current-summoner/flags/equipped`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-banners
//      * @name PutLolBannersV1CurrentSummonerFlagsEquipped
//      * @request PUT:/lol-banners/v1/current-summoner/flags/equipped
//      */
//     putLolBannersV1CurrentSummonerFlagsEquipped: (
//       data: LolBannersBannerFlag,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolBannersBannerFlag, any>({
//         path: `/lol-banners/v1/current-summoner/flags/equipped`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-banners
//      * @name GetLolBannersV1CurrentSummonerFramesEquipped
//      * @request GET:/lol-banners/v1/current-summoner/frames/equipped
//      */
//     getLolBannersV1CurrentSummonerFramesEquipped: (params: RequestParams = {}) =>
//       this.request<LolBannersBannerFrame, any>({
//         path: `/lol-banners/v1/current-summoner/frames/equipped`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-banners
//      * @name GetLolBannersV1PlayersByPuuidFlagsEquipped
//      * @request GET:/lol-banners/v1/players/{puuid}/flags/equipped
//      */
//     getLolBannersV1PlayersByPuuidFlagsEquipped: (puuid: any, params: RequestParams = {}) =>
//       this.request<LolBannersBannerFlag, any>({
//         path: `/lol-banners/v1/players/${puuid}/flags/equipped`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolCareerStats = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name GetLolCareerStatsV1ChampionAveragesSeasonBySeasonByChampionIdByPositionByTierByQueue
//      * @request GET:/lol-career-stats/v1/champion-averages/season/{season}/{championId}/{position}/{tier}/{queue}
//      */
//     getLolCareerStatsV1ChampionAveragesSeasonBySeasonByChampionIdByPositionByTierByQueue: (
//       season: any,
//       championId: any,
//       position: any,
//       tier: any,
//       queue: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCareerStatsChampionQueueStatsResponse, any>({
//         path: `/lol-career-stats/v1/champion-averages/season/${season}/${championId}/${position}/${tier}/${queue}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name GetLolCareerStatsV1ChampionAveragesByChampionIdByPositionByTierByQueue
//      * @request GET:/lol-career-stats/v1/champion-averages/{championId}/{position}/{tier}/{queue}
//      */
//     getLolCareerStatsV1ChampionAveragesByChampionIdByPositionByTierByQueue: (
//       championId: any,
//       position: any,
//       tier: any,
//       queue: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCareerStatsChampionQueueStatsResponse, any>({
//         path: `/lol-career-stats/v1/champion-averages/${championId}/${position}/${tier}/${queue}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name GetLolCareerStatsV1ChampionExpertsSeasonBySeasonByChampionIdByPosition
//      * @request GET:/lol-career-stats/v1/champion-experts/season/{season}/{championId}/{position}
//      */
//     getLolCareerStatsV1ChampionExpertsSeasonBySeasonByChampionIdByPosition: (
//       season: any,
//       championId: any,
//       position: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCareerStatsExpertPlayer[], any>({
//         path: `/lol-career-stats/v1/champion-experts/season/${season}/${championId}/${position}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name GetLolCareerStatsV1ChampionExpertsByChampionIdByPosition
//      * @request GET:/lol-career-stats/v1/champion-experts/{championId}/{position}
//      */
//     getLolCareerStatsV1ChampionExpertsByChampionIdByPosition: (
//       championId: any,
//       position: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCareerStatsExpertPlayer[], any>({
//         path: `/lol-career-stats/v1/champion-experts/${championId}/${position}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name PostLolCareerStatsV1ChampionStatsPercentiles
//      * @request POST:/lol-career-stats/v1/champion-stats-percentiles
//      */
//     postLolCareerStatsV1ChampionStatsPercentiles: (
//       data: LolCareerStatsStatsQueryRequest[],
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCareerStatsStatisticsPercentilesResponse[], any>({
//         path: `/lol-career-stats/v1/champion-stats-percentiles`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name GetLolCareerStatsV1PositionAveragesSeasonBySeasonByPositionByTierByQueue
//      * @request GET:/lol-career-stats/v1/position-averages/season/{season}/{position}/{tier}/{queue}
//      */
//     getLolCareerStatsV1PositionAveragesSeasonBySeasonByPositionByTierByQueue: (
//       season: any,
//       position: any,
//       tier: any,
//       queue: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCareerStatsChampionQueueStatsResponse, any>({
//         path: `/lol-career-stats/v1/position-averages/season/${season}/${position}/${tier}/${queue}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name GetLolCareerStatsV1PositionAveragesByPositionByTierByQueue
//      * @request GET:/lol-career-stats/v1/position-averages/{position}/{tier}/{queue}
//      */
//     getLolCareerStatsV1PositionAveragesByPositionByTierByQueue: (
//       position: any,
//       tier: any,
//       queue: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCareerStatsChampionQueueStatsResponse, any>({
//         path: `/lol-career-stats/v1/position-averages/${position}/${tier}/${queue}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name GetLolCareerStatsV1PositionExpertsSeasonBySeasonByPosition
//      * @request GET:/lol-career-stats/v1/position-experts/season/{season}/{position}
//      */
//     getLolCareerStatsV1PositionExpertsSeasonBySeasonByPosition: (
//       season: any,
//       position: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCareerStatsExpertPlayer[], any>({
//         path: `/lol-career-stats/v1/position-experts/season/${season}/${position}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name GetLolCareerStatsV1PositionExpertsByPosition
//      * @request GET:/lol-career-stats/v1/position-experts/{position}
//      */
//     getLolCareerStatsV1PositionExpertsByPosition: (position: any, params: RequestParams = {}) =>
//       this.request<LolCareerStatsExpertPlayer[], any>({
//         path: `/lol-career-stats/v1/position-experts/${position}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name PostLolCareerStatsV1PositionStatsPercentiles
//      * @request POST:/lol-career-stats/v1/position-stats-percentiles
//      */
//     postLolCareerStatsV1PositionStatsPercentiles: (
//       data: LolCareerStatsPositionStatsQueryRequest[],
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCareerStatsStatisticsPercentilesResponse[], any>({
//         path: `/lol-career-stats/v1/position-stats-percentiles`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name GetLolCareerStatsV1SummonerGamesByPuuid
//      * @request GET:/lol-career-stats/v1/summoner-games/{puuid}
//      */
//     getLolCareerStatsV1SummonerGamesByPuuid: (puuid: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-career-stats/v1/summoner-games/${puuid}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name GetLolCareerStatsV1SummonerGamesByPuuidSeasonBySeason
//      * @request GET:/lol-career-stats/v1/summoner-games/{puuid}/season/{season}
//      */
//     getLolCareerStatsV1SummonerGamesByPuuidSeasonBySeason: (
//       puuid: any,
//       season: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-career-stats/v1/summoner-games/${puuid}/season/${season}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-career-stats
//      * @name GetLolCareerStatsV1SummonerStatsByPuuidBySeasonByQueueByPosition
//      * @request GET:/lol-career-stats/v1/summoner-stats/{puuid}/{season}/{queue}/{position}
//      */
//     getLolCareerStatsV1SummonerStatsByPuuidBySeasonByQueueByPosition: (
//       puuid: any,
//       season: any,
//       queue: any,
//       position: any,
//       query?: {
//         /** @format int32 */
//         championId?: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-career-stats/v1/summoner-stats/${puuid}/${season}/${queue}/${position}`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   lolCatalog = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-catalog
//      * @name GetLolCatalogV1ItemDetails
//      * @request GET:/lol-catalog/v1/item-details
//      */
//     getLolCatalogV1ItemDetails: (
//       query: {
//         inventoryType: string
//         /** @format int64 */
//         itemId: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCatalogCatalogPluginItemWithDetails, any>({
//         path: `/lol-catalog/v1/item-details`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-catalog
//      * @name GetLolCatalogV1Items
//      * @request GET:/lol-catalog/v1/items
//      */
//     getLolCatalogV1Items: (
//       query: {
//         inventoryType: string
//         itemIds: number[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCatalogItemChoiceDetails[], any>({
//         path: `/lol-catalog/v1/items`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-catalog
//      * @name GetLolCatalogV1ItemsByInventoryType
//      * @request GET:/lol-catalog/v1/items/{inventoryType}
//      */
//     getLolCatalogV1ItemsByInventoryType: (inventoryType: any, params: RequestParams = {}) =>
//       this.request<LolCatalogCatalogPluginItem[], any>({
//         path: `/lol-catalog/v1/items/${inventoryType}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolChallenges = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-challenges
//      * @name GetLolChallengesV1AvailableQueueIds
//      * @request GET:/lol-challenges/v1/available-queue-ids
//      */
//     getLolChallengesV1AvailableQueueIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-challenges/v1/available-queue-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-challenges
//      * @name GetLolChallengesV1ChallengesByProductLocalPlayer
//      * @request GET:/lol-challenges/v1/challenges/{product}/local-player
//      */
//     getLolChallengesV1ChallengesByProductLocalPlayer: (product: any, params: RequestParams = {}) =>
//       this.request<LolChallengesUIChallenge[], any>({
//         path: `/lol-challenges/v1/challenges/${product}/local-player`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-challenges
//      * @name GetLolChallengesV1LevelPoints
//      * @request GET:/lol-challenges/v1/level-points
//      */
//     getLolChallengesV1LevelPoints: (params: RequestParams = {}) =>
//       this.request<Record<string, number>, any>({
//         path: `/lol-challenges/v1/level-points`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-challenges
//      * @name GetLolChallengesV1MyUpdatedChallengesByGameId
//      * @request GET:/lol-challenges/v1/my-updated-challenges/{gameId}
//      */
//     getLolChallengesV1MyUpdatedChallengesByGameId: (gameId: any, params: RequestParams = {}) =>
//       this.request<LolChallengesUIChallenge[], any>({
//         path: `/lol-challenges/v1/my-updated-challenges/${gameId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-challenges
//      * @name PostLolChallengesV1ProcessGameByProductByGameId
//      * @request POST:/lol-challenges/v1/processGame/{product}/{gameId}
//      */
//     postLolChallengesV1ProcessGameByProductByGameId: (
//       product: any,
//       gameId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-challenges/v1/processGame/${product}/${gameId}`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-challenges
//      * @name GetLolChallengesV1SuggestedChallengesByProductLocalPlayer
//      * @request GET:/lol-challenges/v1/suggested-challenges/{product}/local-player
//      */
//     getLolChallengesV1SuggestedChallengesByProductLocalPlayer: (
//       product: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChallengesUIChallenge[], any>({
//         path: `/lol-challenges/v1/suggested-challenges/${product}/local-player`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-challenges
//      * @name GetLolChallengesV1SummaryPlayerDataByProductLocalPlayer
//      * @request GET:/lol-challenges/v1/summary-player-data/{product}/local-player
//      */
//     getLolChallengesV1SummaryPlayerDataByProductLocalPlayer: (
//       product: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChallengesUIPlayerSummary, any>({
//         path: `/lol-challenges/v1/summary-player-data/${product}/local-player`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-challenges
//      * @name GetLolChallengesV1SummaryPlayerDataByProductPlayerByPuuid
//      * @request GET:/lol-challenges/v1/summary-player-data/{product}/player/{puuid}
//      */
//     getLolChallengesV1SummaryPlayerDataByProductPlayerByPuuid: (
//       product: any,
//       puuid: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChallengesUIPlayerSummary, any>({
//         path: `/lol-challenges/v1/summary-player-data/${product}/player/${puuid}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-challenges
//      * @name GetLolChallengesV1SummaryPlayersDataByProductPlayers
//      * @request GET:/lol-challenges/v1/summary-players-data/{product}/players
//      */
//     getLolChallengesV1SummaryPlayersDataByProductPlayers: (
//       product: any,
//       query: {
//         puuids: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, LolChallengesUIPlayerSummary>, any>({
//         path: `/lol-challenges/v1/summary-players-data/${product}/players`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-challenges
//      * @name GetLolChallengesV1TitlesLocalPlayer
//      * @request GET:/lol-challenges/v1/titles/local-player
//      */
//     getLolChallengesV1TitlesLocalPlayer: (params: RequestParams = {}) =>
//       this.request<LolChallengesUITitle[], any>({
//         path: `/lol-challenges/v1/titles/local-player`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-challenges
//      * @name PostLolChallengesV1UpdatePlayerPreferencesByProduct
//      * @request POST:/lol-challenges/v1/update-player-preferences/{product}
//      */
//     postLolChallengesV1UpdatePlayerPreferencesByProduct: (
//       product: any,
//       data: LolChallengesChallengesPlayerPreferences,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-challenges/v1/update-player-preferences/${product}`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-challenges
//      * @name GetLolChallengesV1UpdatedChallengeByGameIdByPuuid
//      * @request GET:/lol-challenges/v1/updated-challenge/{gameId}/{puuid}
//      */
//     getLolChallengesV1UpdatedChallengeByGameIdByPuuid: (
//       gameId: any,
//       puuid: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChallengesUIChallenge, any>({
//         path: `/lol-challenges/v1/updated-challenge/${gameId}/${puuid}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolChampSelectLegacy = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name GetLolChampSelectLegacyV1BannableChampionIds
//      * @request GET:/lol-champ-select-legacy/v1/bannable-champion-ids
//      */
//     getLolChampSelectLegacyV1BannableChampionIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-champ-select-legacy/v1/bannable-champion-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name PostLolChampSelectLegacyV1BattleTrainingLaunch
//      * @request POST:/lol-champ-select-legacy/v1/battle-training/launch
//      */
//     postLolChampSelectLegacyV1BattleTrainingLaunch: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select-legacy/v1/battle-training/launch`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name GetLolChampSelectLegacyV1CurrentChampion
//      * @request GET:/lol-champ-select-legacy/v1/current-champion
//      */
//     getLolChampSelectLegacyV1CurrentChampion: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/lol-champ-select-legacy/v1/current-champion`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name GetLolChampSelectLegacyV1DisabledChampionIds
//      * @request GET:/lol-champ-select-legacy/v1/disabled-champion-ids
//      */
//     getLolChampSelectLegacyV1DisabledChampionIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-champ-select-legacy/v1/disabled-champion-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name GetLolChampSelectLegacyV1ImplementationActive
//      * @request GET:/lol-champ-select-legacy/v1/implementation-active
//      */
//     getLolChampSelectLegacyV1ImplementationActive: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-champ-select-legacy/v1/implementation-active`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name GetLolChampSelectLegacyV1PickableChampionIds
//      * @request GET:/lol-champ-select-legacy/v1/pickable-champion-ids
//      */
//     getLolChampSelectLegacyV1PickableChampionIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-champ-select-legacy/v1/pickable-champion-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name GetLolChampSelectLegacyV1PickableSkinIds
//      * @request GET:/lol-champ-select-legacy/v1/pickable-skin-ids
//      */
//     getLolChampSelectLegacyV1PickableSkinIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-champ-select-legacy/v1/pickable-skin-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name GetLolChampSelectLegacyV1Session
//      * @request GET:/lol-champ-select-legacy/v1/session
//      */
//     getLolChampSelectLegacyV1Session: (params: RequestParams = {}) =>
//       this.request<LolChampSelectLegacyChampSelectSession, any>({
//         path: `/lol-champ-select-legacy/v1/session`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name PatchLolChampSelectLegacyV1SessionActionsById
//      * @request PATCH:/lol-champ-select-legacy/v1/session/actions/{id}
//      */
//     patchLolChampSelectLegacyV1SessionActionsById: (
//       id: any,
//       data: LolChampSelectLegacyChampSelectAction,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select-legacy/v1/session/actions/${id}`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name PostLolChampSelectLegacyV1SessionActionsByIdComplete
//      * @request POST:/lol-champ-select-legacy/v1/session/actions/{id}/complete
//      */
//     postLolChampSelectLegacyV1SessionActionsByIdComplete: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select-legacy/v1/session/actions/${id}/complete`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name PatchLolChampSelectLegacyV1SessionMySelection
//      * @request PATCH:/lol-champ-select-legacy/v1/session/my-selection
//      */
//     patchLolChampSelectLegacyV1SessionMySelection: (
//       data: LolChampSelectLegacyChampSelectMySelection,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select-legacy/v1/session/my-selection`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name PostLolChampSelectLegacyV1SessionMySelectionReroll
//      * @request POST:/lol-champ-select-legacy/v1/session/my-selection/reroll
//      */
//     postLolChampSelectLegacyV1SessionMySelectionReroll: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select-legacy/v1/session/my-selection/reroll`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name GetLolChampSelectLegacyV1SessionTimer
//      * @request GET:/lol-champ-select-legacy/v1/session/timer
//      */
//     getLolChampSelectLegacyV1SessionTimer: (params: RequestParams = {}) =>
//       this.request<LolChampSelectLegacyChampSelectTimer, any>({
//         path: `/lol-champ-select-legacy/v1/session/timer`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name GetLolChampSelectLegacyV1SessionTrades
//      * @request GET:/lol-champ-select-legacy/v1/session/trades
//      */
//     getLolChampSelectLegacyV1SessionTrades: (params: RequestParams = {}) =>
//       this.request<LolChampSelectLegacyChampSelectTradeContract[], any>({
//         path: `/lol-champ-select-legacy/v1/session/trades`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name GetLolChampSelectLegacyV1SessionTradesById
//      * @request GET:/lol-champ-select-legacy/v1/session/trades/{id}
//      */
//     getLolChampSelectLegacyV1SessionTradesById: (id: any, params: RequestParams = {}) =>
//       this.request<LolChampSelectLegacyChampSelectTradeContract, any>({
//         path: `/lol-champ-select-legacy/v1/session/trades/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name PostLolChampSelectLegacyV1SessionTradesByIdAccept
//      * @request POST:/lol-champ-select-legacy/v1/session/trades/{id}/accept
//      */
//     postLolChampSelectLegacyV1SessionTradesByIdAccept: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select-legacy/v1/session/trades/${id}/accept`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name PostLolChampSelectLegacyV1SessionTradesByIdCancel
//      * @request POST:/lol-champ-select-legacy/v1/session/trades/{id}/cancel
//      */
//     postLolChampSelectLegacyV1SessionTradesByIdCancel: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select-legacy/v1/session/trades/${id}/cancel`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name PostLolChampSelectLegacyV1SessionTradesByIdDecline
//      * @request POST:/lol-champ-select-legacy/v1/session/trades/{id}/decline
//      */
//     postLolChampSelectLegacyV1SessionTradesByIdDecline: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select-legacy/v1/session/trades/${id}/decline`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name PostLolChampSelectLegacyV1SessionTradesByIdRequest
//      * @request POST:/lol-champ-select-legacy/v1/session/trades/{id}/request
//      */
//     postLolChampSelectLegacyV1SessionTradesByIdRequest: (id: any, params: RequestParams = {}) =>
//       this.request<LolChampSelectLegacyChampSelectTradeContract, any>({
//         path: `/lol-champ-select-legacy/v1/session/trades/${id}/request`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select-legacy
//      * @name GetLolChampSelectLegacyV1TeamBoost
//      * @request GET:/lol-champ-select-legacy/v1/team-boost
//      */
//     getLolChampSelectLegacyV1TeamBoost: (params: RequestParams = {}) =>
//       this.request<LolChampSelectLegacyTeamBoost, any>({
//         path: `/lol-champ-select-legacy/v1/team-boost`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolChampSelect = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1AllGridChampions
//      * @request GET:/lol-champ-select/v1/all-grid-champions
//      */
//     getLolChampSelectV1AllGridChampions: (params: RequestParams = {}) =>
//       this.request<LolChampSelectChampGridChampion[], any>({
//         path: `/lol-champ-select/v1/all-grid-champions`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1BannableChampionIds
//      * @request GET:/lol-champ-select/v1/bannable-champion-ids
//      */
//     getLolChampSelectV1BannableChampionIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-champ-select/v1/bannable-champion-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1BattleTrainingLaunch
//      * @request POST:/lol-champ-select/v1/battle-training/launch
//      */
//     postLolChampSelectV1BattleTrainingLaunch: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/battle-training/launch`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1CurrentChampion
//      * @request GET:/lol-champ-select/v1/current-champion
//      */
//     getLolChampSelectV1CurrentChampion: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/lol-champ-select/v1/current-champion`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1DisabledChampionIds
//      * @request GET:/lol-champ-select/v1/disabled-champion-ids
//      */
//     getLolChampSelectV1DisabledChampionIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-champ-select/v1/disabled-champion-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1GridChampionsByChampionId
//      * @request GET:/lol-champ-select/v1/grid-champions/{championId}
//      */
//     getLolChampSelectV1GridChampionsByChampionId: (championId: any, params: RequestParams = {}) =>
//       this.request<LolChampSelectChampGridChampion, any>({
//         path: `/lol-champ-select/v1/grid-champions/${championId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1MutedPlayers
//      * @request GET:/lol-champ-select/v1/muted-players
//      */
//     getLolChampSelectV1MutedPlayers: (params: RequestParams = {}) =>
//       this.request<LolChampSelectMutedPlayerInfo[], any>({
//         path: `/lol-champ-select/v1/muted-players`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1OngoingTrade
//      * @request GET:/lol-champ-select/v1/ongoing-trade
//      */
//     getLolChampSelectV1OngoingTrade: (params: RequestParams = {}) =>
//       this.request<LolChampSelectChampSelectTradeNotification, any>({
//         path: `/lol-champ-select/v1/ongoing-trade`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1OngoingTradeByIdClear
//      * @request POST:/lol-champ-select/v1/ongoing-trade/{id}/clear
//      */
//     postLolChampSelectV1OngoingTradeByIdClear: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/ongoing-trade/${id}/clear`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1PickableChampionIds
//      * @request GET:/lol-champ-select/v1/pickable-champion-ids
//      */
//     getLolChampSelectV1PickableChampionIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-champ-select/v1/pickable-champion-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1PickableSkinIds
//      * @request GET:/lol-champ-select/v1/pickable-skin-ids
//      */
//     getLolChampSelectV1PickableSkinIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-champ-select/v1/pickable-skin-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1PinDropNotification
//      * @request GET:/lol-champ-select/v1/pin-drop-notification
//      */
//     getLolChampSelectV1PinDropNotification: (params: RequestParams = {}) =>
//       this.request<LolChampSelectChampSelectPinDropNotification, any>({
//         path: `/lol-champ-select/v1/pin-drop-notification`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1RetrieveLatestGameDto
//      * @request POST:/lol-champ-select/v1/retrieve-latest-game-dto
//      */
//     postLolChampSelectV1RetrieveLatestGameDto: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/retrieve-latest-game-dto`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1Session
//      * @request GET:/lol-champ-select/v1/session
//      */
//     getLolChampSelectV1Session: (params: RequestParams = {}) =>
//       this.request<LolChampSelectChampSelectSession, any>({
//         path: `/lol-champ-select/v1/session`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PatchLolChampSelectV1SessionActionsById
//      * @request PATCH:/lol-champ-select/v1/session/actions/{id}
//      */
//     patchLolChampSelectV1SessionActionsById: (
//       id: any,
//       data: LolChampSelectChampSelectAction,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/session/actions/${id}`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1SessionActionsByIdComplete
//      * @request POST:/lol-champ-select/v1/session/actions/{id}/complete
//      */
//     postLolChampSelectV1SessionActionsByIdComplete: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/session/actions/${id}/complete`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1SessionBenchSwapByChampionId
//      * @request POST:/lol-champ-select/v1/session/bench/swap/{championId}
//      */
//     postLolChampSelectV1SessionBenchSwapByChampionId: (
//       championId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/session/bench/swap/${championId}`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PatchLolChampSelectV1SessionMySelection
//      * @request PATCH:/lol-champ-select/v1/session/my-selection
//      */
//     patchLolChampSelectV1SessionMySelection: (
//       data: LolChampSelectChampSelectMySelection,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/session/my-selection`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1SessionMySelectionReroll
//      * @request POST:/lol-champ-select/v1/session/my-selection/reroll
//      */
//     postLolChampSelectV1SessionMySelectionReroll: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/session/my-selection/reroll`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1SessionSimpleInventory
//      * @request POST:/lol-champ-select/v1/session/simple-inventory
//      */
//     postLolChampSelectV1SessionSimpleInventory: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/session/simple-inventory`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1SessionTimer
//      * @request GET:/lol-champ-select/v1/session/timer
//      */
//     getLolChampSelectV1SessionTimer: (params: RequestParams = {}) =>
//       this.request<LolChampSelectChampSelectTimer, any>({
//         path: `/lol-champ-select/v1/session/timer`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1SessionTrades
//      * @request GET:/lol-champ-select/v1/session/trades
//      */
//     getLolChampSelectV1SessionTrades: (params: RequestParams = {}) =>
//       this.request<LolChampSelectChampSelectTradeContract[], any>({
//         path: `/lol-champ-select/v1/session/trades`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1SessionTradesById
//      * @request GET:/lol-champ-select/v1/session/trades/{id}
//      */
//     getLolChampSelectV1SessionTradesById: (id: any, params: RequestParams = {}) =>
//       this.request<LolChampSelectChampSelectTradeContract, any>({
//         path: `/lol-champ-select/v1/session/trades/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1SessionTradesByIdAccept
//      * @request POST:/lol-champ-select/v1/session/trades/{id}/accept
//      */
//     postLolChampSelectV1SessionTradesByIdAccept: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/session/trades/${id}/accept`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1SessionTradesByIdCancel
//      * @request POST:/lol-champ-select/v1/session/trades/{id}/cancel
//      */
//     postLolChampSelectV1SessionTradesByIdCancel: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/session/trades/${id}/cancel`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1SessionTradesByIdDecline
//      * @request POST:/lol-champ-select/v1/session/trades/{id}/decline
//      */
//     postLolChampSelectV1SessionTradesByIdDecline: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/session/trades/${id}/decline`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1SessionTradesByIdRequest
//      * @request POST:/lol-champ-select/v1/session/trades/{id}/request
//      */
//     postLolChampSelectV1SessionTradesByIdRequest: (id: any, params: RequestParams = {}) =>
//       this.request<LolChampSelectChampSelectTradeContract, any>({
//         path: `/lol-champ-select/v1/session/trades/${id}/request`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1SfxNotifications
//      * @request GET:/lol-champ-select/v1/sfx-notifications
//      */
//     getLolChampSelectV1SfxNotifications: (params: RequestParams = {}) =>
//       this.request<LolChampSelectSfxNotification[], any>({
//         path: `/lol-champ-select/v1/sfx-notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1SkinCarouselSkins
//      * @request GET:/lol-champ-select/v1/skin-carousel-skins
//      */
//     getLolChampSelectV1SkinCarouselSkins: (params: RequestParams = {}) =>
//       this.request<LolChampSelectSkinSelectorSkin[], any>({
//         path: `/lol-champ-select/v1/skin-carousel-skins`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1SkinSelectorInfo
//      * @request GET:/lol-champ-select/v1/skin-selector-info
//      */
//     getLolChampSelectV1SkinSelectorInfo: (params: RequestParams = {}) =>
//       this.request<LolChampSelectSkinSelectorInfo, any>({
//         path: `/lol-champ-select/v1/skin-selector-info`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1SummonersBySlotId
//      * @request GET:/lol-champ-select/v1/summoners/{slotId}
//      */
//     getLolChampSelectV1SummonersBySlotId: (slotId: any, params: RequestParams = {}) =>
//       this.request<LolChampSelectChampSelectSummoner, any>({
//         path: `/lol-champ-select/v1/summoners/${slotId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name GetLolChampSelectV1TeamBoost
//      * @request GET:/lol-champ-select/v1/team-boost
//      */
//     getLolChampSelectV1TeamBoost: (params: RequestParams = {}) =>
//       this.request<LolChampSelectTeamBoost, any>({
//         path: `/lol-champ-select/v1/team-boost`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1TeamBoostPurchase
//      * @request POST:/lol-champ-select/v1/team-boost/purchase
//      */
//     postLolChampSelectV1TeamBoostPurchase: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/team-boost/purchase`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1ToggleFavoriteByChampionIdByPosition
//      * @request POST:/lol-champ-select/v1/toggle-favorite/{championId}/{position}
//      */
//     postLolChampSelectV1ToggleFavoriteByChampionIdByPosition: (
//       championId: any,
//       position: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/toggle-favorite/${championId}/${position}`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champ-select
//      * @name PostLolChampSelectV1TogglePlayerMuted
//      * @request POST:/lol-champ-select/v1/toggle-player-muted
//      */
//     postLolChampSelectV1TogglePlayerMuted: (
//       data: LolChampSelectMutedPlayerInfo,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-champ-select/v1/toggle-player-muted`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolChampions = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champions
//      * @name GetLolChampionsV1InventoriesBySummonerIdChampions
//      * @request GET:/lol-champions/v1/inventories/{summonerId}/champions
//      */
//     getLolChampionsV1InventoriesBySummonerIdChampions: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChampionsCollectionsChampion[], any>({
//         path: `/lol-champions/v1/inventories/${summonerId}/champions`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champions
//      * @name GetLolChampionsV1InventoriesBySummonerIdChampionsMinimal
//      * @request GET:/lol-champions/v1/inventories/{summonerId}/champions-minimal
//      */
//     getLolChampionsV1InventoriesBySummonerIdChampionsMinimal: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChampionsCollectionsChampionMinimal[], any>({
//         path: `/lol-champions/v1/inventories/${summonerId}/champions-minimal`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champions
//      * @name GetLolChampionsV1InventoriesBySummonerIdChampionsPlayableCount
//      * @request GET:/lol-champions/v1/inventories/{summonerId}/champions-playable-count
//      */
//     getLolChampionsV1InventoriesBySummonerIdChampionsPlayableCount: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChampionsCollectionsChampionPlayableCounts, any>({
//         path: `/lol-champions/v1/inventories/${summonerId}/champions-playable-count`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champions
//      * @name GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionId
//      * @request GET:/lol-champions/v1/inventories/{summonerId}/champions/{championId}
//      */
//     getLolChampionsV1InventoriesBySummonerIdChampionsByChampionId: (
//       summonerId: any,
//       championId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChampionsCollectionsChampion, any>({
//         path: `/lol-champions/v1/inventories/${summonerId}/champions/${championId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champions
//      * @name GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkins
//      * @request GET:/lol-champions/v1/inventories/{summonerId}/champions/{championId}/skins
//      */
//     getLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkins: (
//       summonerId: any,
//       championId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChampionsCollectionsChampionSkin[], any>({
//         path: `/lol-champions/v1/inventories/${summonerId}/champions/${championId}/skins`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champions
//      * @name GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkinsByChampionSkinId
//      * @request GET:/lol-champions/v1/inventories/{summonerId}/champions/{championId}/skins/{championSkinId}
//      */
//     getLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkinsByChampionSkinId: (
//       summonerId: any,
//       championId: any,
//       championSkinId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChampionsCollectionsChampionSkin, any>({
//         path: `/lol-champions/v1/inventories/${summonerId}/champions/${championId}/skins/${championSkinId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champions
//      * @name GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkinsBySkinIdChromas
//      * @request GET:/lol-champions/v1/inventories/{summonerId}/champions/{championId}/skins/{skinId}/chromas
//      */
//     getLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkinsBySkinIdChromas: (
//       summonerId: any,
//       championId: any,
//       skinId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChampionsCollectionsChampionChroma[], any>({
//         path: `/lol-champions/v1/inventories/${summonerId}/champions/${championId}/skins/${skinId}/chromas`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champions
//      * @name GetLolChampionsV1InventoriesBySummonerIdSkinsMinimal
//      * @request GET:/lol-champions/v1/inventories/{summonerId}/skins-minimal
//      */
//     getLolChampionsV1InventoriesBySummonerIdSkinsMinimal: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChampionsCollectionsChampionSkinMinimal[], any>({
//         path: `/lol-champions/v1/inventories/${summonerId}/skins-minimal`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-champions
//      * @name GetLolChampionsV1OwnedChampionsMinimal
//      * @request GET:/lol-champions/v1/owned-champions-minimal
//      */
//     getLolChampionsV1OwnedChampionsMinimal: (params: RequestParams = {}) =>
//       this.request<LolChampionsCollectionsChampionMinimal[], any>({
//         path: `/lol-champions/v1/owned-champions-minimal`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolChat = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1BlockedPlayers
//      * @request GET:/lol-chat/v1/blocked-players
//      */
//     getLolChatV1BlockedPlayers: (params: RequestParams = {}) =>
//       this.request<LolChatBlockedPlayerResource[], any>({
//         path: `/lol-chat/v1/blocked-players`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PostLolChatV1BlockedPlayers
//      * @request POST:/lol-chat/v1/blocked-players
//      */
//     postLolChatV1BlockedPlayers: (data: LolChatBlockedPlayerResource, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/blocked-players`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name DeleteLolChatV1BlockedPlayersById
//      * @request DELETE:/lol-chat/v1/blocked-players/{id}
//      */
//     deleteLolChatV1BlockedPlayersById: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/blocked-players/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1BlockedPlayersById
//      * @request GET:/lol-chat/v1/blocked-players/{id}
//      */
//     getLolChatV1BlockedPlayersById: (id: any, params: RequestParams = {}) =>
//       this.request<LolChatBlockedPlayerResource, any>({
//         path: `/lol-chat/v1/blocked-players/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1Config
//      * @request GET:/lol-chat/v1/config
//      */
//     getLolChatV1Config: (params: RequestParams = {}) =>
//       this.request<LolChatChatServiceDynamicClientConfig, any>({
//         path: `/lol-chat/v1/config`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1Conversations
//      * @request GET:/lol-chat/v1/conversations
//      */
//     getLolChatV1Conversations: (params: RequestParams = {}) =>
//       this.request<LolChatConversationResource[], any>({
//         path: `/lol-chat/v1/conversations`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PostLolChatV1Conversations
//      * @request POST:/lol-chat/v1/conversations
//      */
//     postLolChatV1Conversations: (data: LolChatConversationResource, params: RequestParams = {}) =>
//       this.request<LolChatConversationResource, any>({
//         path: `/lol-chat/v1/conversations`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name DeleteLolChatV1ConversationsActive
//      * @request DELETE:/lol-chat/v1/conversations/active
//      */
//     deleteLolChatV1ConversationsActive: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/conversations/active`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1ConversationsActive
//      * @request GET:/lol-chat/v1/conversations/active
//      */
//     getLolChatV1ConversationsActive: (params: RequestParams = {}) =>
//       this.request<LolChatActiveConversationResource, any>({
//         path: `/lol-chat/v1/conversations/active`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PutLolChatV1ConversationsActive
//      * @request PUT:/lol-chat/v1/conversations/active
//      */
//     putLolChatV1ConversationsActive: (
//       data: LolChatActiveConversationResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/conversations/active`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1ConversationsNotify
//      * @request GET:/lol-chat/v1/conversations/notify
//      */
//     getLolChatV1ConversationsNotify: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-chat/v1/conversations/notify`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name DeleteLolChatV1ConversationsById
//      * @request DELETE:/lol-chat/v1/conversations/{id}
//      */
//     deleteLolChatV1ConversationsById: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/conversations/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1ConversationsById
//      * @request GET:/lol-chat/v1/conversations/{id}
//      */
//     getLolChatV1ConversationsById: (id: any, params: RequestParams = {}) =>
//       this.request<LolChatConversationResource, any>({
//         path: `/lol-chat/v1/conversations/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PutLolChatV1ConversationsById
//      * @request PUT:/lol-chat/v1/conversations/{id}
//      */
//     putLolChatV1ConversationsById: (
//       id: any,
//       data: LolChatConversationResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChatConversationResource, any>({
//         path: `/lol-chat/v1/conversations/${id}`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PostLolChatV1ConversationsByIdClosed
//      * @request POST:/lol-chat/v1/conversations/{id}/closed
//      */
//     postLolChatV1ConversationsByIdClosed: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/conversations/${id}/closed`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PutLolChatV1ConversationsByIdClosed
//      * @request PUT:/lol-chat/v1/conversations/{id}/closed
//      */
//     putLolChatV1ConversationsByIdClosed: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/conversations/${id}/closed`,
//         method: 'PUT',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name DeleteLolChatV1ConversationsByIdMessages
//      * @request DELETE:/lol-chat/v1/conversations/{id}/messages
//      */
//     deleteLolChatV1ConversationsByIdMessages: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/conversations/${id}/messages`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1ConversationsByIdMessages
//      * @request GET:/lol-chat/v1/conversations/{id}/messages
//      */
//     getLolChatV1ConversationsByIdMessages: (id: any, params: RequestParams = {}) =>
//       this.request<LolChatConversationMessageResource[], any>({
//         path: `/lol-chat/v1/conversations/${id}/messages`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PostLolChatV1ConversationsByIdMessages
//      * @request POST:/lol-chat/v1/conversations/{id}/messages
//      */
//     postLolChatV1ConversationsByIdMessages: (
//       id: any,
//       data: LolChatConversationMessageResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChatConversationMessageResource, any>({
//         path: `/lol-chat/v1/conversations/${id}/messages`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1ConversationsByIdParticipants
//      * @request GET:/lol-chat/v1/conversations/{id}/participants
//      */
//     getLolChatV1ConversationsByIdParticipants: (id: any, params: RequestParams = {}) =>
//       this.request<LolChatUserResource[], any>({
//         path: `/lol-chat/v1/conversations/${id}/participants`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PostLolChatV1ConversationsByIdParticipants
//      * @request POST:/lol-chat/v1/conversations/{id}/participants
//      */
//     postLolChatV1ConversationsByIdParticipants: (
//       id: any,
//       data: LolChatUserResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/conversations/${id}/participants`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1ConversationsByIdParticipantsByPid
//      * @request GET:/lol-chat/v1/conversations/{id}/participants/{pid}
//      */
//     getLolChatV1ConversationsByIdParticipantsByPid: (
//       id: any,
//       pid: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChatUserResource, any>({
//         path: `/lol-chat/v1/conversations/${id}/participants/${pid}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1Errors
//      * @request GET:/lol-chat/v1/errors
//      */
//     getLolChatV1Errors: (params: RequestParams = {}) =>
//       this.request<LolChatErrorResource[], any>({
//         path: `/lol-chat/v1/errors`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name DeleteLolChatV1ErrorsById
//      * @request DELETE:/lol-chat/v1/errors/{id}
//      */
//     deleteLolChatV1ErrorsById: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/errors/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1FriendCounts
//      * @request GET:/lol-chat/v1/friend-counts
//      */
//     getLolChatV1FriendCounts: (params: RequestParams = {}) =>
//       this.request<LolChatFriendCountsResource, any>({
//         path: `/lol-chat/v1/friend-counts`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1FriendExistsBySummonerId
//      * @request GET:/lol-chat/v1/friend-exists/{summonerId}
//      */
//     getLolChatV1FriendExistsBySummonerId: (summonerId: any, params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-chat/v1/friend-exists/${summonerId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1FriendGroups
//      * @request GET:/lol-chat/v1/friend-groups
//      */
//     getLolChatV1FriendGroups: (params: RequestParams = {}) =>
//       this.request<LolChatGroupResource[], any>({
//         path: `/lol-chat/v1/friend-groups`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PostLolChatV1FriendGroups
//      * @request POST:/lol-chat/v1/friend-groups
//      */
//     postLolChatV1FriendGroups: (data: LolChatGroupResource, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/friend-groups`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PutLolChatV1FriendGroupsOrder
//      * @request PUT:/lol-chat/v1/friend-groups/order
//      */
//     putLolChatV1FriendGroupsOrder: (data: LolChatFriendGroupOrder, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/friend-groups/order`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name DeleteLolChatV1FriendGroupsById
//      * @request DELETE:/lol-chat/v1/friend-groups/{id}
//      */
//     deleteLolChatV1FriendGroupsById: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/friend-groups/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1FriendGroupsById
//      * @request GET:/lol-chat/v1/friend-groups/{id}
//      */
//     getLolChatV1FriendGroupsById: (id: any, params: RequestParams = {}) =>
//       this.request<LolChatGroupResource, any>({
//         path: `/lol-chat/v1/friend-groups/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PutLolChatV1FriendGroupsById
//      * @request PUT:/lol-chat/v1/friend-groups/{id}
//      */
//     putLolChatV1FriendGroupsById: (
//       id: any,
//       data: LolChatGroupResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/friend-groups/${id}`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1FriendGroupsByIdFriends
//      * @request GET:/lol-chat/v1/friend-groups/{id}/friends
//      */
//     getLolChatV1FriendGroupsByIdFriends: (id: any, params: RequestParams = {}) =>
//       this.request<LolChatFriendResource[], any>({
//         path: `/lol-chat/v1/friend-groups/${id}/friends`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1FriendRequests
//      * @request GET:/lol-chat/v1/friend-requests
//      */
//     getLolChatV1FriendRequests: (params: RequestParams = {}) =>
//       this.request<LolChatFriendRequestResource[], any>({
//         path: `/lol-chat/v1/friend-requests`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PostLolChatV1FriendRequests
//      * @request POST:/lol-chat/v1/friend-requests
//      */
//     postLolChatV1FriendRequests: (data: LolChatFriendRequestResource, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/friend-requests`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name DeleteLolChatV1FriendRequestsById
//      * @request DELETE:/lol-chat/v1/friend-requests/{id}
//      */
//     deleteLolChatV1FriendRequestsById: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/friend-requests/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PutLolChatV1FriendRequestsById
//      * @request PUT:/lol-chat/v1/friend-requests/{id}
//      */
//     putLolChatV1FriendRequestsById: (
//       id: any,
//       data: LolChatFriendRequestResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/friend-requests/${id}`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1Friends
//      * @request GET:/lol-chat/v1/friends
//      */
//     getLolChatV1Friends: (params: RequestParams = {}) =>
//       this.request<LolChatFriendResource[], any>({
//         path: `/lol-chat/v1/friends`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name DeleteLolChatV1FriendsById
//      * @request DELETE:/lol-chat/v1/friends/{id}
//      */
//     deleteLolChatV1FriendsById: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/friends/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1FriendsById
//      * @request GET:/lol-chat/v1/friends/{id}
//      */
//     getLolChatV1FriendsById: (id: any, params: RequestParams = {}) =>
//       this.request<LolChatFriendResource, any>({
//         path: `/lol-chat/v1/friends/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PutLolChatV1FriendsById
//      * @request PUT:/lol-chat/v1/friends/{id}
//      */
//     putLolChatV1FriendsById: (id: any, data: LolChatFriendResource, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/friends/${id}`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1Me
//      * @request GET:/lol-chat/v1/me
//      */
//     getLolChatV1Me: (params: RequestParams = {}) =>
//       this.request<LolChatUserResource, any>({
//         path: `/lol-chat/v1/me`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PutLolChatV1Me
//      * @request PUT:/lol-chat/v1/me
//      */
//     putLolChatV1Me: (data: LolChatUserResource, params: RequestParams = {}) =>
//       this.request<LolChatUserResource, any>({
//         path: `/lol-chat/v1/me`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1Resources
//      * @request GET:/lol-chat/v1/resources
//      */
//     getLolChatV1Resources: (params: RequestParams = {}) =>
//       this.request<LolChatProductMetadataMap, any>({
//         path: `/lol-chat/v1/resources`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name DeleteLolChatV1Session
//      * @request DELETE:/lol-chat/v1/session
//      */
//     deleteLolChatV1Session: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/session`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1Session
//      * @request GET:/lol-chat/v1/session
//      */
//     getLolChatV1Session: (params: RequestParams = {}) =>
//       this.request<LolChatSessionResource, any>({
//         path: `/lol-chat/v1/session`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PostLolChatV1SessionPlain
//      * @request POST:/lol-chat/v1/session/plain
//      */
//     postLolChatV1SessionPlain: (data: LolChatAuthResourcePlain, params: RequestParams = {}) =>
//       this.request<LolChatSessionResource, any>({
//         path: `/lol-chat/v1/session/plain`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PostLolChatV1SessionRso
//      * @request POST:/lol-chat/v1/session/rso
//      */
//     postLolChatV1SessionRso: (
//       data: LolChatAuthResourceRsoAccessToken,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolChatSessionResource, any>({
//         path: `/lol-chat/v1/session/rso`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1Settings
//      * @request GET:/lol-chat/v1/settings
//      */
//     getLolChatV1Settings: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/settings`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PutLolChatV1Settings
//      * @request PUT:/lol-chat/v1/settings
//      */
//     putLolChatV1Settings: (
//       data: Record<string, any>,
//       query?: {
//         doAsync?: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/settings`,
//         method: 'PUT',
//         query: query,
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name DeleteLolChatV1SettingsByKey
//      * @request DELETE:/lol-chat/v1/settings/{key}
//      */
//     deleteLolChatV1SettingsByKey: (
//       key: any,
//       query?: {
//         doAsync?: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/settings/${key}`,
//         method: 'DELETE',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name GetLolChatV1SettingsByKey
//      * @request GET:/lol-chat/v1/settings/{key}
//      */
//     getLolChatV1SettingsByKey: (key: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/settings/${key}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-chat
//      * @name PutLolChatV1SettingsByKey
//      * @request PUT:/lol-chat/v1/settings/{key}
//      */
//     putLolChatV1SettingsByKey: (
//       key: any,
//       data: Record<string, any>,
//       query?: {
//         doAsync?: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-chat/v1/settings/${key}`,
//         method: 'PUT',
//         query: query,
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolClash = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1AllTournaments
//      * @request GET:/lol-clash/v1/all-tournaments
//      */
//     getLolClashV1AllTournaments: (params: RequestParams = {}) =>
//       this.request<TournamentDTO[], any>({
//         path: `/lol-clash/v1/all-tournaments`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1BracketByBracketId
//      * @request GET:/lol-clash/v1/bracket/{bracketId}
//      */
//     getLolClashV1BracketByBracketId: (bracketId: any, params: RequestParams = {}) =>
//       this.request<LolClashBracket, any>({
//         path: `/lol-clash/v1/bracket/${bracketId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1CheckinAllowed
//      * @request GET:/lol-clash/v1/checkin-allowed
//      */
//     getLolClashV1CheckinAllowed: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-clash/v1/checkin-allowed`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1CurrentTournamentIds
//      * @request GET:/lol-clash/v1/currentTournamentIds
//      */
//     getLolClashV1CurrentTournamentIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-clash/v1/currentTournamentIds`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1DisabledConfig
//      * @request GET:/lol-clash/v1/disabled-config
//      */
//     getLolClashV1DisabledConfig: (params: RequestParams = {}) =>
//       this.request<LolClashClashDisabledConfig, any>({
//         path: `/lol-clash/v1/disabled-config`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1Enabled
//      * @request GET:/lol-clash/v1/enabled
//      */
//     getLolClashV1Enabled: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-clash/v1/enabled`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1EogPlayerUpdate
//      * @request GET:/lol-clash/v1/eog-player-update
//      */
//     getLolClashV1EogPlayerUpdate: (params: RequestParams = {}) =>
//       this.request<LolClashEogPlayerUpdateDTO, any>({
//         path: `/lol-clash/v1/eog-player-update`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1EogPlayerUpdateAcknowledge
//      * @request POST:/lol-clash/v1/eog-player-update/acknowledge
//      */
//     postLolClashV1EogPlayerUpdateAcknowledge: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/eog-player-update/acknowledge`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1EventByUuid
//      * @request GET:/lol-clash/v1/event/{uuid}
//      */
//     getLolClashV1EventByUuid: (uuid: any, params: RequestParams = {}) =>
//       this.request<ClashEventData, any>({
//         path: `/lol-clash/v1/event/${uuid}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1Events
//      * @request POST:/lol-clash/v1/events
//      */
//     postLolClashV1Events: (data: string[], params: RequestParams = {}) =>
//       this.request<Record<string, ClashEventData>, any>({
//         path: `/lol-clash/v1/events`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1GameEnd
//      * @request GET:/lol-clash/v1/game-end
//      */
//     getLolClashV1GameEnd: (params: RequestParams = {}) =>
//       this.request<LolClashTournamentGameEnd, any>({
//         path: `/lol-clash/v1/game-end`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1GameEndAcknowledge
//      * @request POST:/lol-clash/v1/game-end/acknowledge
//      */
//     postLolClashV1GameEndAcknowledge: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/game-end/acknowledge`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1Historyandwinners
//      * @request GET:/lol-clash/v1/historyandwinners
//      */
//     getLolClashV1Historyandwinners: (params: RequestParams = {}) =>
//       this.request<LolClashTournamentHistoryAndWinners, any>({
//         path: `/lol-clash/v1/historyandwinners`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1Iconconfig
//      * @request GET:/lol-clash/v1/iconconfig
//      */
//     getLolClashV1Iconconfig: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/iconconfig`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1InvitedRosterIds
//      * @request GET:/lol-clash/v1/invited-roster-ids
//      */
//     getLolClashV1InvitedRosterIds: (params: RequestParams = {}) =>
//       this.request<string[], any>({
//         path: `/lol-clash/v1/invited-roster-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1LftPlayer
//      * @request POST:/lol-clash/v1/lft/player
//      */
//     postLolClashV1LftPlayer: (data: LolClashLftState, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/lft/player`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1LftPlayerFind
//      * @request POST:/lol-clash/v1/lft/player/find
//      */
//     postLolClashV1LftPlayerFind: (data: LolClashFindPlayers, params: RequestParams = {}) =>
//       this.request<PlayerFinderDTO[], any>({
//         path: `/lol-clash/v1/lft/player/find`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1LftTeam
//      * @request POST:/lol-clash/v1/lft/team
//      */
//     postLolClashV1LftTeam: (data: LolClashTeamOpenState, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/lft/team`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1LftTeamFetchRequests
//      * @request POST:/lol-clash/v1/lft/team/fetch-requests
//      */
//     postLolClashV1LftTeamFetchRequests: (data: number, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/lft/team/fetch-requests`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1LftTeamFind
//      * @request POST:/lol-clash/v1/lft/team/find
//      */
//     postLolClashV1LftTeamFind: (data: LolClashFindTeams, params: RequestParams = {}) =>
//       this.request<OpenedTeamDTO[], any>({
//         path: `/lol-clash/v1/lft/team/find`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1LftTeamRequests
//      * @request GET:/lol-clash/v1/lft/team/requests
//      */
//     getLolClashV1LftTeamRequests: (params: RequestParams = {}) =>
//       this.request<PendingOpenedTeamDTO[], any>({
//         path: `/lol-clash/v1/lft/team/requests`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1LftTeamByRosterIdRequest
//      * @request POST:/lol-clash/v1/lft/team/{rosterId}/request
//      */
//     postLolClashV1LftTeamByRosterIdRequest: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/lft/team/${rosterId}/request`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1Notifications
//      * @request GET:/lol-clash/v1/notifications
//      */
//     getLolClashV1Notifications: (params: RequestParams = {}) =>
//       this.request<LolClashPlayerNotificationData, any>({
//         path: `/lol-clash/v1/notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1NotificationsAcknowledge
//      * @request POST:/lol-clash/v1/notifications/acknowledge
//      */
//     postLolClashV1NotificationsAcknowledge: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/notifications/acknowledge`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1Ping
//      * @request GET:/lol-clash/v1/ping
//      */
//     getLolClashV1Ping: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/ping`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1Player
//      * @request GET:/lol-clash/v1/player
//      */
//     getLolClashV1Player: (params: RequestParams = {}) =>
//       this.request<LolClashPlayerData, any>({
//         path: `/lol-clash/v1/player`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1PlayerChatRosters
//      * @request GET:/lol-clash/v1/player/chat-rosters
//      */
//     getLolClashV1PlayerChatRosters: (params: RequestParams = {}) =>
//       this.request<LolClashPlayerChatRoster[], any>({
//         path: `/lol-clash/v1/player/chat-rosters`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1PlayerHistory
//      * @request GET:/lol-clash/v1/player/history
//      */
//     getLolClashV1PlayerHistory: (params: RequestParams = {}) =>
//       this.request<LolClashRosterStats[], any>({
//         path: `/lol-clash/v1/player/history`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1PlaymodeRestricted
//      * @request GET:/lol-clash/v1/playmode-restricted
//      */
//     getLolClashV1PlaymodeRestricted: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-clash/v1/playmode-restricted`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1Ready
//      * @request GET:/lol-clash/v1/ready
//      */
//     getLolClashV1Ready: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-clash/v1/ready`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1Refresh
//      * @request POST:/lol-clash/v1/refresh
//      */
//     postLolClashV1Refresh: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/refresh`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1Rewards
//      * @request GET:/lol-clash/v1/rewards
//      */
//     getLolClashV1Rewards: (params: RequestParams = {}) =>
//       this.request<LolClashPlayerRewards, any>({
//         path: `/lol-clash/v1/rewards`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1RosterByRosterId
//      * @request GET:/lol-clash/v1/roster/{rosterId}
//      */
//     getLolClashV1RosterByRosterId: (rosterId: any, params: RequestParams = {}) =>
//       this.request<LolClashRoster, any>({
//         path: `/lol-clash/v1/roster/${rosterId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdAccept
//      * @request POST:/lol-clash/v1/roster/{rosterId}/accept
//      */
//     postLolClashV1RosterByRosterIdAccept: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/accept`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdCancelWithdraw
//      * @request POST:/lol-clash/v1/roster/{rosterId}/cancel-withdraw
//      */
//     postLolClashV1RosterByRosterIdCancelWithdraw: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/cancel-withdraw`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdChangeAllDetails
//      * @request POST:/lol-clash/v1/roster/{rosterId}/change-all-details
//      */
//     postLolClashV1RosterByRosterIdChangeAllDetails: (
//       rosterId: any,
//       data: LolClashRosterDetails,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/change-all-details`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdChangeIcon
//      * @request POST:/lol-clash/v1/roster/{rosterId}/change-icon
//      */
//     postLolClashV1RosterByRosterIdChangeIcon: (
//       rosterId: any,
//       data: LolClashChangeIconRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/change-icon`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdChangeName
//      * @request POST:/lol-clash/v1/roster/{rosterId}/change-name
//      */
//     postLolClashV1RosterByRosterIdChangeName: (
//       rosterId: any,
//       data: LolClashChangeNameRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/change-name`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdChangeShortName
//      * @request POST:/lol-clash/v1/roster/{rosterId}/change-short-name
//      */
//     postLolClashV1RosterByRosterIdChangeShortName: (
//       rosterId: any,
//       data: LolClashChangeNameRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/change-short-name`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdDecline
//      * @request POST:/lol-clash/v1/roster/{rosterId}/decline
//      */
//     postLolClashV1RosterByRosterIdDecline: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/decline`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdDisband
//      * @request POST:/lol-clash/v1/roster/{rosterId}/disband
//      */
//     postLolClashV1RosterByRosterIdDisband: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/disband`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdInvite
//      * @request POST:/lol-clash/v1/roster/{rosterId}/invite
//      */
//     postLolClashV1RosterByRosterIdInvite: (
//       rosterId: any,
//       data: number[],
//       params: RequestParams = {}
//     ) =>
//       this.request<LolClashClientFailedInvite[], any>({
//         path: `/lol-clash/v1/roster/${rosterId}/invite`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdKick
//      * @request POST:/lol-clash/v1/roster/{rosterId}/kick
//      */
//     postLolClashV1RosterByRosterIdKick: (
//       rosterId: any,
//       data: LolClashKickRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/kick`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdLeave
//      * @request POST:/lol-clash/v1/roster/{rosterId}/leave
//      */
//     postLolClashV1RosterByRosterIdLeave: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/leave`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdLockin
//      * @request POST:/lol-clash/v1/roster/{rosterId}/lockin
//      */
//     postLolClashV1RosterByRosterIdLockin: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/lockin`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdSetPosition
//      * @request POST:/lol-clash/v1/roster/{rosterId}/set-position
//      */
//     postLolClashV1RosterByRosterIdSetPosition: (
//       rosterId: any,
//       data: LolClashSetPositionRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/set-position`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdSetTicket
//      * @request POST:/lol-clash/v1/roster/{rosterId}/set-ticket
//      */
//     postLolClashV1RosterByRosterIdSetTicket: (
//       rosterId: any,
//       data: LolClashSetTicketRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/set-ticket`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1RosterByRosterIdStats
//      * @request GET:/lol-clash/v1/roster/{rosterId}/stats
//      */
//     getLolClashV1RosterByRosterIdStats: (rosterId: any, params: RequestParams = {}) =>
//       this.request<LolClashRosterStats, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/stats`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdSubstituteAccept
//      * @request POST:/lol-clash/v1/roster/{rosterId}/substitute/accept
//      */
//     postLolClashV1RosterByRosterIdSubstituteAccept: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/substitute/accept`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdSubstituteDecline
//      * @request POST:/lol-clash/v1/roster/{rosterId}/substitute/decline
//      */
//     postLolClashV1RosterByRosterIdSubstituteDecline: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/substitute/decline`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdSubstituteInvite
//      * @request POST:/lol-clash/v1/roster/{rosterId}/substitute/invite
//      */
//     postLolClashV1RosterByRosterIdSubstituteInvite: (
//       rosterId: any,
//       data: LolClashInviteSubRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolClashClientFailedInvite[], any>({
//         path: `/lol-clash/v1/roster/${rosterId}/substitute/invite`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdSubstituteReclaim
//      * @request POST:/lol-clash/v1/roster/{rosterId}/substitute/reclaim
//      */
//     postLolClashV1RosterByRosterIdSubstituteReclaim: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/substitute/reclaim`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdSubstituteBySummonerIdRevoke
//      * @request POST:/lol-clash/v1/roster/{rosterId}/substitute/{summonerId}/revoke
//      */
//     postLolClashV1RosterByRosterIdSubstituteBySummonerIdRevoke: (
//       rosterId: any,
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/substitute/${summonerId}/revoke`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdSuggest
//      * @request POST:/lol-clash/v1/roster/{rosterId}/suggest
//      */
//     postLolClashV1RosterByRosterIdSuggest: (
//       rosterId: any,
//       data: number[],
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/suggest`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdSuggestBySummonerIdAccept
//      * @request POST:/lol-clash/v1/roster/{rosterId}/suggest/{summonerId}/accept
//      */
//     postLolClashV1RosterByRosterIdSuggestBySummonerIdAccept: (
//       rosterId: any,
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/suggest/${summonerId}/accept`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdSuggestBySummonerIdDecline
//      * @request POST:/lol-clash/v1/roster/{rosterId}/suggest/{summonerId}/decline
//      */
//     postLolClashV1RosterByRosterIdSuggestBySummonerIdDecline: (
//       rosterId: any,
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/suggest/${summonerId}/decline`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdSuggestBySummonerIdRevoke
//      * @request POST:/lol-clash/v1/roster/{rosterId}/suggest/{summonerId}/revoke
//      */
//     postLolClashV1RosterByRosterIdSuggestBySummonerIdRevoke: (
//       rosterId: any,
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/suggest/${summonerId}/revoke`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdTicketOfferBySummonerIdAccept
//      * @request POST:/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/accept
//      */
//     postLolClashV1RosterByRosterIdTicketOfferBySummonerIdAccept: (
//       rosterId: any,
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/ticket-offer/${summonerId}/accept`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdTicketOfferBySummonerIdDecline
//      * @request POST:/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/decline
//      */
//     postLolClashV1RosterByRosterIdTicketOfferBySummonerIdDecline: (
//       rosterId: any,
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/ticket-offer/${summonerId}/decline`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdTicketOfferBySummonerIdOffer
//      * @request POST:/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/offer
//      */
//     postLolClashV1RosterByRosterIdTicketOfferBySummonerIdOffer: (
//       rosterId: any,
//       summonerId: any,
//       data: LolClashOfferTicketRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/ticket-offer/${summonerId}/offer`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdTicketOfferBySummonerIdRevoke
//      * @request POST:/lol-clash/v1/roster/{rosterId}/ticket-offer/{summonerId}/revoke
//      */
//     postLolClashV1RosterByRosterIdTicketOfferBySummonerIdRevoke: (
//       rosterId: any,
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/ticket-offer/${summonerId}/revoke`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdTransferCaptain
//      * @request POST:/lol-clash/v1/roster/{rosterId}/transfer-captain
//      */
//     postLolClashV1RosterByRosterIdTransferCaptain: (
//       rosterId: any,
//       data: number,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/transfer-captain`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdUnlockin
//      * @request POST:/lol-clash/v1/roster/{rosterId}/unlockin
//      */
//     postLolClashV1RosterByRosterIdUnlockin: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/unlockin`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdUnwithdraw
//      * @request POST:/lol-clash/v1/roster/{rosterId}/unwithdraw
//      */
//     postLolClashV1RosterByRosterIdUnwithdraw: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/unwithdraw`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdUpdateLogos
//      * @request POST:/lol-clash/v1/roster/{rosterId}/update-logos
//      */
//     postLolClashV1RosterByRosterIdUpdateLogos: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/update-logos`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1RosterByRosterIdWithdraw
//      * @request POST:/lol-clash/v1/roster/{rosterId}/withdraw
//      */
//     postLolClashV1RosterByRosterIdWithdraw: (rosterId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/roster/${rosterId}/withdraw`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1ScoutingChampions
//      * @request GET:/lol-clash/v1/scouting/champions
//      */
//     getLolClashV1ScoutingChampions: (
//       query: {
//         summonerIds: number[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolClashScoutingChampions[], any>({
//         path: `/lol-clash/v1/scouting/champions`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1ScoutingMatchhistory
//      * @request GET:/lol-clash/v1/scouting/matchhistory
//      */
//     getLolClashV1ScoutingMatchhistory: (
//       query: {
//         summonerIds: number[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/scouting/matchhistory`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1SeasonRewardsBySeasonId
//      * @request GET:/lol-clash/v1/season-rewards/{seasonId}
//      */
//     getLolClashV1SeasonRewardsBySeasonId: (seasonId: any, params: RequestParams = {}) =>
//       this.request<ClashSeasonRewardResult, any>({
//         path: `/lol-clash/v1/season-rewards/${seasonId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1SimpleStateFlags
//      * @request GET:/lol-clash/v1/simple-state-flags
//      */
//     getLolClashV1SimpleStateFlags: (params: RequestParams = {}) =>
//       this.request<LolClashSimpleStateFlag[], any>({
//         path: `/lol-clash/v1/simple-state-flags`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1SimpleStateFlagsByIdAcknowledge
//      * @request POST:/lol-clash/v1/simple-state-flags/{id}/acknowledge
//      */
//     postLolClashV1SimpleStateFlagsByIdAcknowledge: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/simple-state-flags/${id}/acknowledge`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1ThirdpartyTeamData
//      * @request GET:/lol-clash/v1/thirdparty/team-data
//      */
//     getLolClashV1ThirdpartyTeamData: (params: RequestParams = {}) =>
//       this.request<LolClashThirdPartyApiRoster, any>({
//         path: `/lol-clash/v1/thirdparty/team-data`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1Time
//      * @request GET:/lol-clash/v1/time
//      */
//     getLolClashV1Time: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/lol-clash/v1/time`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1TournamentStateInfo
//      * @request GET:/lol-clash/v1/tournament-state-info
//      */
//     getLolClashV1TournamentStateInfo: (params: RequestParams = {}) =>
//       this.request<LolClashTournamentStateInfo[], any>({
//         path: `/lol-clash/v1/tournament-state-info`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1TournamentSummary
//      * @request GET:/lol-clash/v1/tournament-summary
//      */
//     getLolClashV1TournamentSummary: (params: RequestParams = {}) =>
//       this.request<LolClashTournamentSummary[], any>({
//         path: `/lol-clash/v1/tournament-summary`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1TournamentCancelled
//      * @request GET:/lol-clash/v1/tournament/cancelled
//      */
//     getLolClashV1TournamentCancelled: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-clash/v1/tournament/cancelled`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1TournamentGetAllPlayerTiers
//      * @request GET:/lol-clash/v1/tournament/get-all-player-tiers
//      */
//     getLolClashV1TournamentGetAllPlayerTiers: (params: RequestParams = {}) =>
//       this.request<PlayerTierDTO[], any>({
//         path: `/lol-clash/v1/tournament/get-all-player-tiers`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1TournamentByTournamentId
//      * @request GET:/lol-clash/v1/tournament/{tournamentId}
//      */
//     getLolClashV1TournamentByTournamentId: (tournamentId: any, params: RequestParams = {}) =>
//       this.request<LolClashTournament, any>({
//         path: `/lol-clash/v1/tournament/${tournamentId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1TournamentByTournamentIdCreateRoster
//      * @request POST:/lol-clash/v1/tournament/{tournamentId}/create-roster
//      */
//     postLolClashV1TournamentByTournamentIdCreateRoster: (
//       tournamentId: any,
//       data: LolClashRosterDetails,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/tournament/${tournamentId}/create-roster`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1TournamentByTournamentIdGetPlayerTiers
//      * @request GET:/lol-clash/v1/tournament/{tournamentId}/get-player-tiers
//      */
//     getLolClashV1TournamentByTournamentIdGetPlayerTiers: (
//       tournamentId: any,
//       query: {
//         summonerIds: number[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<PlayerTierDTO[], any>({
//         path: `/lol-clash/v1/tournament/${tournamentId}/get-player-tiers`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1TournamentByTournamentIdPlayer
//      * @request GET:/lol-clash/v1/tournament/{tournamentId}/player
//      */
//     getLolClashV1TournamentByTournamentIdPlayer: (tournamentId: any, params: RequestParams = {}) =>
//       this.request<LolClashPlayerTournamentData, any>({
//         path: `/lol-clash/v1/tournament/${tournamentId}/player`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1TournamentByTournamentIdPlayerHonorRestricted
//      * @request GET:/lol-clash/v1/tournament/{tournamentId}/player-honor-restricted
//      */
//     getLolClashV1TournamentByTournamentIdPlayerHonorRestricted: (
//       tournamentId?: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<boolean, any>({
//         path: `/lol-clash/v1/tournament/${tournamentId}/player-honor-restricted`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1TournamentByTournamentIdStateInfo
//      * @request GET:/lol-clash/v1/tournament/{tournamentId}/stateInfo
//      */
//     getLolClashV1TournamentByTournamentIdStateInfo: (
//       tournamentId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolClashTournamentStateInfo, any>({
//         path: `/lol-clash/v1/tournament/${tournamentId}/stateInfo`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1TournamentByTournamentIdWinners
//      * @request GET:/lol-clash/v1/tournament/{tournamentId}/winners
//      */
//     getLolClashV1TournamentByTournamentIdWinners: (tournamentId: any, params: RequestParams = {}) =>
//       this.request<LolClashTournamentWinnerHistory, any>({
//         path: `/lol-clash/v1/tournament/${tournamentId}/winners`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1UpdateLogos
//      * @request POST:/lol-clash/v1/update-logos
//      */
//     postLolClashV1UpdateLogos: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/update-logos`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1Visible
//      * @request GET:/lol-clash/v1/visible
//      */
//     getLolClashV1Visible: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-clash/v1/visible`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name DeleteLolClashV1Voice
//      * @request DELETE:/lol-clash/v1/voice
//      */
//     deleteLolClashV1Voice: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/voice`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1Voice
//      * @request POST:/lol-clash/v1/voice
//      */
//     postLolClashV1Voice: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/voice`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name DeleteLolClashV1VoiceDelayByDelaySeconds
//      * @request DELETE:/lol-clash/v1/voice-delay/{delaySeconds}
//      */
//     deleteLolClashV1VoiceDelayByDelaySeconds: (delaySeconds: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/voice-delay/${delaySeconds}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name PostLolClashV1VoiceDelayByDelaySeconds
//      * @request POST:/lol-clash/v1/voice-delay/{delaySeconds}
//      */
//     postLolClashV1VoiceDelayByDelaySeconds: (delaySeconds: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-clash/v1/voice-delay/${delaySeconds}`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV1VoiceEnabled
//      * @request GET:/lol-clash/v1/voice-enabled
//      */
//     getLolClashV1VoiceEnabled: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-clash/v1/voice-enabled`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-clash
//      * @name GetLolClashV2PlaymodeRestricted
//      * @request GET:/lol-clash/v2/playmode-restricted
//      */
//     getLolClashV2PlaymodeRestricted: (params: RequestParams = {}) =>
//       this.request<LolClashPlaymodeRestrictedInfo, any>({
//         path: `/lol-clash/v2/playmode-restricted`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolClientConfig = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-client-config
//      * @name GetLolClientConfigV3ClientConfigByName
//      * @request GET:/lol-client-config/v3/client-config/{name}
//      */
//     getLolClientConfigV3ClientConfigByName: (name: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-client-config/v3/client-config/${name}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolCollections = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-collections
//      * @name GetLolCollectionsV1InventoriesChestEligibility
//      * @request GET:/lol-collections/v1/inventories/chest-eligibility
//      */
//     getLolCollectionsV1InventoriesChestEligibility: (params: RequestParams = {}) =>
//       this.request<LolCollectionsCollectionsChestEligibility, any>({
//         path: `/lol-collections/v1/inventories/chest-eligibility`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-collections
//      * @name GetLolCollectionsV1InventoriesLocalPlayerChampionMasteryScore
//      * @request GET:/lol-collections/v1/inventories/local-player/champion-mastery-score
//      */
//     getLolCollectionsV1InventoriesLocalPlayerChampionMasteryScore: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/lol-collections/v1/inventories/local-player/champion-mastery-score`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-collections
//      * @name GetLolCollectionsV1InventoriesScouting
//      * @request GET:/lol-collections/v1/inventories/scouting
//      */
//     getLolCollectionsV1InventoriesScouting: (data: number[], params: RequestParams = {}) =>
//       this.request<RankedScoutingDTO[], any>({
//         path: `/lol-collections/v1/inventories/scouting`,
//         method: 'GET',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-collections
//      * @name GetLolCollectionsV1InventoriesBySummonerIdBackdrop
//      * @request GET:/lol-collections/v1/inventories/{summonerId}/backdrop
//      */
//     getLolCollectionsV1InventoriesBySummonerIdBackdrop: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCollectionsCollectionsSummonerBackdrop, any>({
//         path: `/lol-collections/v1/inventories/${summonerId}/backdrop`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-collections
//      * @name GetLolCollectionsV1InventoriesBySummonerIdChampionMastery
//      * @request GET:/lol-collections/v1/inventories/{summonerId}/champion-mastery
//      */
//     getLolCollectionsV1InventoriesBySummonerIdChampionMastery: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCollectionsCollectionsChampionMastery[], any>({
//         path: `/lol-collections/v1/inventories/${summonerId}/champion-mastery`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-collections
//      * @name GetLolCollectionsV1InventoriesBySummonerIdChampionMasteryTop
//      * @request GET:/lol-collections/v1/inventories/{summonerId}/champion-mastery/top
//      */
//     getLolCollectionsV1InventoriesBySummonerIdChampionMasteryTop: (
//       summonerId: any,
//       query: {
//         /** @format int64 */
//         limit: number
//         sortRule?: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCollectionsCollectionsTopChampionMasteries, any>({
//         path: `/lol-collections/v1/inventories/${summonerId}/champion-mastery/top`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-collections
//      * @name GetLolCollectionsV1InventoriesBySummonerIdSpells
//      * @request GET:/lol-collections/v1/inventories/{summonerId}/spells
//      */
//     getLolCollectionsV1InventoriesBySummonerIdSpells: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCollectionsCollectionsSummonerSpells, any>({
//         path: `/lol-collections/v1/inventories/${summonerId}/spells`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-collections
//      * @name PutLolCollectionsV1InventoriesBySummonerIdVerification
//      * @request PUT:/lol-collections/v1/inventories/{summonerId}/verification
//      */
//     putLolCollectionsV1InventoriesBySummonerIdVerification: (
//       summonerId: any,
//       data: string,
//       params: RequestParams = {}
//     ) =>
//       this.request<string, any>({
//         path: `/lol-collections/v1/inventories/${summonerId}/verification`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-collections
//      * @name GetLolCollectionsV1InventoriesBySummonerIdWardSkins
//      * @request GET:/lol-collections/v1/inventories/{summonerId}/ward-skins
//      */
//     getLolCollectionsV1InventoriesBySummonerIdWardSkins: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCollectionsCollectionsWardSkin[], any>({
//         path: `/lol-collections/v1/inventories/${summonerId}/ward-skins`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-collections
//      * @name GetLolCollectionsV1InventoriesBySummonerIdWardSkinsByWardSkinId
//      * @request GET:/lol-collections/v1/inventories/{summonerId}/ward-skins/{wardSkinId}
//      */
//     getLolCollectionsV1InventoriesBySummonerIdWardSkinsByWardSkinId: (
//       summonerId: any,
//       wardSkinId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolCollectionsCollectionsWardSkin, any>({
//         path: `/lol-collections/v1/inventories/${summonerId}/ward-skins/${wardSkinId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolContentTargeting = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-content-targeting
//      * @name GetLolContentTargetingV1Filters
//      * @request GET:/lol-content-targeting/v1/filters
//      */
//     getLolContentTargetingV1Filters: (params: RequestParams = {}) =>
//       this.request<LolContentTargetingContentTargetingFilterResponse, any>({
//         path: `/lol-content-targeting/v1/filters`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-content-targeting
//      * @name GetLolContentTargetingV1Locale
//      * @request GET:/lol-content-targeting/v1/locale
//      */
//     getLolContentTargetingV1Locale: (params: RequestParams = {}) =>
//       this.request<LolContentTargetingContentTargetingLocaleResponse, any>({
//         path: `/lol-content-targeting/v1/locale`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-content-targeting
//      * @name GetLolContentTargetingV1ProtectedFilters
//      * @request GET:/lol-content-targeting/v1/protected_filters
//      */
//     getLolContentTargetingV1ProtectedFilters: (params: RequestParams = {}) =>
//       this.request<LolContentTargetingContentTargetingFilterResponse, any>({
//         path: `/lol-content-targeting/v1/protected_filters`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-content-targeting
//      * @name PutLolContentTargetingV1TftExperimentBucket
//      * @request PUT:/lol-content-targeting/v1/tft_experiment_bucket
//      */
//     putLolContentTargetingV1TftExperimentBucket: (data: number, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-content-targeting/v1/tft_experiment_bucket`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolCosmetics = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-cosmetics
//      * @name GetLolCosmeticsV1InventoriesBySetNameCompanions
//      * @request GET:/lol-cosmetics/v1/inventories/{setName}/companions
//      */
//     getLolCosmeticsV1InventoriesBySetNameCompanions: (setName: any, params: RequestParams = {}) =>
//       this.request<LolCosmeticsCompanionsGroupedViewModel, any>({
//         path: `/lol-cosmetics/v1/inventories/${setName}/companions`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-cosmetics
//      * @name GetLolCosmeticsV1InventoriesBySetNameDamageSkins
//      * @request GET:/lol-cosmetics/v1/inventories/{setName}/damage-skins
//      */
//     getLolCosmeticsV1InventoriesBySetNameDamageSkins: (setName: any, params: RequestParams = {}) =>
//       this.request<LolCosmeticsTFTDamageSkinGroupedViewModel, any>({
//         path: `/lol-cosmetics/v1/inventories/${setName}/damage-skins`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-cosmetics
//      * @name GetLolCosmeticsV1InventoriesBySetNameMapSkins
//      * @request GET:/lol-cosmetics/v1/inventories/{setName}/map-skins
//      */
//     getLolCosmeticsV1InventoriesBySetNameMapSkins: (setName: any, params: RequestParams = {}) =>
//       this.request<LolCosmeticsTFTMapSkinGroupedViewModel, any>({
//         path: `/lol-cosmetics/v1/inventories/${setName}/map-skins`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-cosmetics
//      * @name PatchLolCosmeticsV1RecentByType
//      * @request PATCH:/lol-cosmetics/v1/recent/{type}
//      */
//     patchLolCosmeticsV1RecentByType: (type: any, data: string[], params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-cosmetics/v1/recent/${type}`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-cosmetics
//      * @name DeleteLolCosmeticsV1SelectionCompanion
//      * @request DELETE:/lol-cosmetics/v1/selection/companion
//      */
//     deleteLolCosmeticsV1SelectionCompanion: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-cosmetics/v1/selection/companion`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-cosmetics
//      * @name PutLolCosmeticsV1SelectionCompanion
//      * @request PUT:/lol-cosmetics/v1/selection/companion
//      */
//     putLolCosmeticsV1SelectionCompanion: (data: number, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-cosmetics/v1/selection/companion`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-cosmetics
//      * @name DeleteLolCosmeticsV1SelectionTftDamageSkin
//      * @request DELETE:/lol-cosmetics/v1/selection/tft-damage-skin
//      */
//     deleteLolCosmeticsV1SelectionTftDamageSkin: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-cosmetics/v1/selection/tft-damage-skin`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-cosmetics
//      * @name PutLolCosmeticsV1SelectionTftDamageSkin
//      * @request PUT:/lol-cosmetics/v1/selection/tft-damage-skin
//      */
//     putLolCosmeticsV1SelectionTftDamageSkin: (data: number, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-cosmetics/v1/selection/tft-damage-skin`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-cosmetics
//      * @name DeleteLolCosmeticsV1SelectionTftMapSkin
//      * @request DELETE:/lol-cosmetics/v1/selection/tft-map-skin
//      */
//     deleteLolCosmeticsV1SelectionTftMapSkin: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-cosmetics/v1/selection/tft-map-skin`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-cosmetics
//      * @name PutLolCosmeticsV1SelectionTftMapSkin
//      * @request PUT:/lol-cosmetics/v1/selection/tft-map-skin
//      */
//     putLolCosmeticsV1SelectionTftMapSkin: (data: number, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-cosmetics/v1/selection/tft-map-skin`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolEmailVerification = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-email-verification
//      * @name PostLolEmailVerificationV1ConfirmEmail
//      * @request POST:/lol-email-verification/v1/confirm-email
//      */
//     postLolEmailVerificationV1ConfirmEmail: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-email-verification/v1/confirm-email`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-email-verification
//      * @name GetLolEmailVerificationV1Email
//      * @request GET:/lol-email-verification/v1/email
//      */
//     getLolEmailVerificationV1Email: (params: RequestParams = {}) =>
//       this.request<LolEmailVerificationEmailVerificationSession, any>({
//         path: `/lol-email-verification/v1/email`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-email-verification
//      * @name PutLolEmailVerificationV1Email
//      * @request PUT:/lol-email-verification/v1/email
//      */
//     putLolEmailVerificationV1Email: (
//       data: LolEmailVerificationEmailUpdate,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-email-verification/v1/email`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolEndOfGame = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-end-of-game
//      * @name GetLolEndOfGameV1ChampionMasteryUpdates
//      * @request GET:/lol-end-of-game/v1/champion-mastery-updates
//      */
//     getLolEndOfGameV1ChampionMasteryUpdates: (params: RequestParams = {}) =>
//       this.request<LolEndOfGameChampionMasteryUpdate, any>({
//         path: `/lol-end-of-game/v1/champion-mastery-updates`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-end-of-game
//      * @name GetLolEndOfGameV1EogStatsBlock
//      * @request GET:/lol-end-of-game/v1/eog-stats-block
//      */
//     getLolEndOfGameV1EogStatsBlock: (params: RequestParams = {}) =>
//       this.request<LolEndOfGameEndOfGameStats, any>({
//         path: `/lol-end-of-game/v1/eog-stats-block`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-end-of-game
//      * @name GetLolEndOfGameV1GameclientEogStatsBlock
//      * @request GET:/lol-end-of-game/v1/gameclient-eog-stats-block
//      */
//     getLolEndOfGameV1GameclientEogStatsBlock: (params: RequestParams = {}) =>
//       this.request<LolEndOfGameGameClientEndOfGameStats, any>({
//         path: `/lol-end-of-game/v1/gameclient-eog-stats-block`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-end-of-game
//      * @name PostLolEndOfGameV1GameclientEogStatsBlock
//      * @request POST:/lol-end-of-game/v1/gameclient-eog-stats-block
//      */
//     postLolEndOfGameV1GameclientEogStatsBlock: (
//       data: LolEndOfGameGameClientEndOfGameStats,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-end-of-game/v1/gameclient-eog-stats-block`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-end-of-game
//      * @name GetLolEndOfGameV1ReportedPlayers
//      * @request GET:/lol-end-of-game/v1/reported-players
//      */
//     getLolEndOfGameV1ReportedPlayers: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-end-of-game/v1/reported-players`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-end-of-game
//      * @name PostLolEndOfGameV1StateDismissStats
//      * @request POST:/lol-end-of-game/v1/state/dismiss-stats
//      */
//     postLolEndOfGameV1StateDismissStats: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-end-of-game/v1/state/dismiss-stats`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-end-of-game
//      * @name GetLolEndOfGameV1TftEogStats
//      * @request GET:/lol-end-of-game/v1/tft-eog-stats
//      */
//     getLolEndOfGameV1TftEogStats: (params: RequestParams = {}) =>
//       this.request<LolEndOfGameTFTEndOfGameViewModel, any>({
//         path: `/lol-end-of-game/v1/tft-eog-stats`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-end-of-game
//      * @name PostLolEndOfGameV2PlayerComplaints
//      * @request POST:/lol-end-of-game/v2/player-complaints
//      */
//     postLolEndOfGameV2PlayerComplaints: (
//       data: LolEndOfGameEndOfGamePlayerComplaintV2,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolEndOfGameEndOfGamePlayerComplaintV2, any>({
//         path: `/lol-end-of-game/v2/player-complaints`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolEsportStreamNotifications = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-esport-stream-notifications
//      * @name GetLolEsportStreamNotificationsV1LiveStreams
//      * @request GET:/lol-esport-stream-notifications/v1/live-streams
//      */
//     getLolEsportStreamNotificationsV1LiveStreams: (params: RequestParams = {}) =>
//       this.request<LolEsportStreamNotificationsESportsLiveStreams, any>({
//         path: `/lol-esport-stream-notifications/v1/live-streams`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-esport-stream-notifications
//      * @name PostLolEsportStreamNotificationsV1SendStats
//      * @request POST:/lol-esport-stream-notifications/v1/send-stats
//      */
//     postLolEsportStreamNotificationsV1SendStats: (
//       eventType: any,
//       matchId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-esport-stream-notifications/v1/send-stats`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-esport-stream-notifications
//      * @name GetLolEsportStreamNotificationsV1StreamUrl
//      * @request GET:/lol-esport-stream-notifications/v1/stream-url
//      */
//     getLolEsportStreamNotificationsV1StreamUrl: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-esport-stream-notifications/v1/stream-url`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolGameClientChat = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-client-chat
//      * @name GetLolGameClientChatV1Buddies
//      * @request GET:/lol-game-client-chat/v1/buddies
//      */
//     getLolGameClientChatV1Buddies: (params: RequestParams = {}) =>
//       this.request<string[], any>({
//         path: `/lol-game-client-chat/v1/buddies`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-client-chat
//      * @name GetLolGameClientChatV1IgnoredSummoners
//      * @request GET:/lol-game-client-chat/v1/ignored-summoners
//      */
//     getLolGameClientChatV1IgnoredSummoners: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-game-client-chat/v1/ignored-summoners`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-client-chat
//      * @name PostLolGameClientChatV1InstantMessages
//      * @request POST:/lol-game-client-chat/v1/instant-messages
//      */
//     postLolGameClientChatV1InstantMessages: (
//       query: {
//         summonerName: string
//         message: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-game-client-chat/v1/instant-messages`,
//         method: 'POST',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-client-chat
//      * @name GetLolGameClientChatV1MutedSummoners
//      * @request GET:/lol-game-client-chat/v1/muted-summoners
//      */
//     getLolGameClientChatV1MutedSummoners: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-game-client-chat/v1/muted-summoners`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-client-chat
//      * @name PostLolGameClientChatV1PartyMessages
//      * @request POST:/lol-game-client-chat/v1/party-messages
//      */
//     postLolGameClientChatV1PartyMessages: (
//       query: {
//         message: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-game-client-chat/v1/party-messages`,
//         method: 'POST',
//         query: query,
//         ...params
//       })
//   }
//   lolGameQueues = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-queues
//      * @name GetLolGameQueuesV1Custom
//      * @request GET:/lol-game-queues/v1/custom
//      */
//     getLolGameQueuesV1Custom: (params: RequestParams = {}) =>
//       this.request<LolGameQueuesQueueCustomGame, any>({
//         path: `/lol-game-queues/v1/custom`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-queues
//      * @name GetLolGameQueuesV1CustomNonDefault
//      * @request GET:/lol-game-queues/v1/custom-non-default
//      */
//     getLolGameQueuesV1CustomNonDefault: (params: RequestParams = {}) =>
//       this.request<LolGameQueuesQueueCustomGame, any>({
//         path: `/lol-game-queues/v1/custom-non-default`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-queues
//      * @name GetLolGameQueuesV1GameTypeConfigByGameTypeConfigId
//      * @request GET:/lol-game-queues/v1/game-type-config/{gameTypeConfigId}
//      */
//     getLolGameQueuesV1GameTypeConfigByGameTypeConfigId: (
//       gameTypeConfigId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolGameQueuesQueueGameTypeConfig, any>({
//         path: `/lol-game-queues/v1/game-type-config/${gameTypeConfigId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-queues
//      * @name GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIdMapByMapId
//      * @request GET:/lol-game-queues/v1/game-type-config/{gameTypeConfigId}/map/{mapId}
//      */
//     getLolGameQueuesV1GameTypeConfigByGameTypeConfigIdMapByMapId: (
//       gameTypeConfigId: any,
//       mapId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolGameQueuesQueueGameTypeConfig, any>({
//         path: `/lol-game-queues/v1/game-type-config/${gameTypeConfigId}/map/${mapId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-queues
//      * @name GetLolGameQueuesV1Queues
//      * @request GET:/lol-game-queues/v1/queues
//      */
//     getLolGameQueuesV1Queues: (params: RequestParams = {}) =>
//       this.request<LolGameQueuesQueue[], any>({
//         path: `/lol-game-queues/v1/queues`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-queues
//      * @name GetLolGameQueuesV1QueuesTypeByQueueType
//      * @request GET:/lol-game-queues/v1/queues/type/{queueType}
//      */
//     getLolGameQueuesV1QueuesTypeByQueueType: (queueType: any, params: RequestParams = {}) =>
//       this.request<LolGameQueuesQueue, any>({
//         path: `/lol-game-queues/v1/queues/type/${queueType}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-queues
//      * @name GetLolGameQueuesV1QueuesById
//      * @request GET:/lol-game-queues/v1/queues/{id}
//      */
//     getLolGameQueuesV1QueuesById: (id: any, params: RequestParams = {}) =>
//       this.request<LolGameQueuesQueue, any>({
//         path: `/lol-game-queues/v1/queues/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolGameSettings = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-settings
//      * @name GetLolGameSettingsV1Didreset
//      * @request GET:/lol-game-settings/v1/didreset
//      */
//     getLolGameSettingsV1Didreset: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-game-settings/v1/didreset`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-settings
//      * @name GetLolGameSettingsV1GameSettings
//      * @request GET:/lol-game-settings/v1/game-settings
//      */
//     getLolGameSettingsV1GameSettings: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-game-settings/v1/game-settings`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-settings
//      * @name PatchLolGameSettingsV1GameSettings
//      * @request PATCH:/lol-game-settings/v1/game-settings
//      */
//     patchLolGameSettingsV1GameSettings: (data: Record<string, any>, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-game-settings/v1/game-settings`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-settings
//      * @name GetLolGameSettingsV1GameSettingsSchema
//      * @request GET:/lol-game-settings/v1/game-settings-schema
//      */
//     getLolGameSettingsV1GameSettingsSchema: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-game-settings/v1/game-settings-schema`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-settings
//      * @name GetLolGameSettingsV1InputSettings
//      * @request GET:/lol-game-settings/v1/input-settings
//      */
//     getLolGameSettingsV1InputSettings: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-game-settings/v1/input-settings`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-settings
//      * @name PatchLolGameSettingsV1InputSettings
//      * @request PATCH:/lol-game-settings/v1/input-settings
//      */
//     patchLolGameSettingsV1InputSettings: (data: Record<string, any>, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-game-settings/v1/input-settings`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-settings
//      * @name GetLolGameSettingsV1InputSettingsSchema
//      * @request GET:/lol-game-settings/v1/input-settings-schema
//      */
//     getLolGameSettingsV1InputSettingsSchema: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-game-settings/v1/input-settings-schema`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-settings
//      * @name GetLolGameSettingsV1Ready
//      * @request GET:/lol-game-settings/v1/ready
//      */
//     getLolGameSettingsV1Ready: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-game-settings/v1/ready`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-settings
//      * @name PostLolGameSettingsV1ReloadPostGame
//      * @request POST:/lol-game-settings/v1/reload-post-game
//      */
//     postLolGameSettingsV1ReloadPostGame: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-game-settings/v1/reload-post-game`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-game-settings
//      * @name PostLolGameSettingsV1Save
//      * @request POST:/lol-game-settings/v1/save
//      */
//     postLolGameSettingsV1Save: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-game-settings/v1/save`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       })
//   }
//   lolGameflow = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1AckFailedToLaunch
//      * @request POST:/lol-gameflow/v1/ack-failed-to-launch
//      */
//     postLolGameflowV1AckFailedToLaunch: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/ack-failed-to-launch`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1ActivePatcherLock
//      * @request GET:/lol-gameflow/v1/active-patcher-lock
//      */
//     getLolGameflowV1ActivePatcherLock: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-gameflow/v1/active-patcher-lock`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1Availability
//      * @request GET:/lol-gameflow/v1/availability
//      */
//     getLolGameflowV1Availability: (params: RequestParams = {}) =>
//       this.request<LolGameflowGameflowAvailability, any>({
//         path: `/lol-gameflow/v1/availability`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1BasicTutorial
//      * @request GET:/lol-gameflow/v1/basic-tutorial
//      */
//     getLolGameflowV1BasicTutorial: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-gameflow/v1/basic-tutorial`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1BasicTutorialStart
//      * @request POST:/lol-gameflow/v1/basic-tutorial/start
//      */
//     postLolGameflowV1BasicTutorialStart: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-gameflow/v1/basic-tutorial/start`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1BattleTraining
//      * @request GET:/lol-gameflow/v1/battle-training
//      */
//     getLolGameflowV1BattleTraining: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-gameflow/v1/battle-training`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1BattleTrainingStart
//      * @request POST:/lol-gameflow/v1/battle-training/start
//      */
//     postLolGameflowV1BattleTrainingStart: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-gameflow/v1/battle-training/start`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1BattleTrainingStop
//      * @request POST:/lol-gameflow/v1/battle-training/stop
//      */
//     postLolGameflowV1BattleTrainingStop: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-gameflow/v1/battle-training/stop`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1ClientReceivedMessage
//      * @request POST:/lol-gameflow/v1/client-received-message
//      */
//     postLolGameflowV1ClientReceivedMessage: (data: string, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/client-received-message`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1EarlyExit
//      * @request POST:/lol-gameflow/v1/early-exit
//      */
//     postLolGameflowV1EarlyExit: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-gameflow/v1/early-exit`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name DeleteLolGameflowV1EarlyExitNotificationsEog
//      * @request DELETE:/lol-gameflow/v1/early-exit-notifications/eog
//      */
//     deleteLolGameflowV1EarlyExitNotificationsEog: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/early-exit-notifications/eog`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1EarlyExitNotificationsEog
//      * @request GET:/lol-gameflow/v1/early-exit-notifications/eog
//      */
//     getLolGameflowV1EarlyExitNotificationsEog: (params: RequestParams = {}) =>
//       this.request<Record<string, any>[], any>({
//         path: `/lol-gameflow/v1/early-exit-notifications/eog`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name DeleteLolGameflowV1EarlyExitNotificationsEogByKey
//      * @request DELETE:/lol-gameflow/v1/early-exit-notifications/eog/{key}
//      */
//     deleteLolGameflowV1EarlyExitNotificationsEogByKey: (key: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/early-exit-notifications/eog/${key}`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name DeleteLolGameflowV1EarlyExitNotificationsMissions
//      * @request DELETE:/lol-gameflow/v1/early-exit-notifications/missions
//      */
//     deleteLolGameflowV1EarlyExitNotificationsMissions: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/early-exit-notifications/missions`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1EarlyExitNotificationsMissions
//      * @request GET:/lol-gameflow/v1/early-exit-notifications/missions
//      */
//     getLolGameflowV1EarlyExitNotificationsMissions: (params: RequestParams = {}) =>
//       this.request<Record<string, any>[], any>({
//         path: `/lol-gameflow/v1/early-exit-notifications/missions`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name DeleteLolGameflowV1EarlyExitNotificationsMissionsByKey
//      * @request DELETE:/lol-gameflow/v1/early-exit-notifications/missions/{key}
//      */
//     deleteLolGameflowV1EarlyExitNotificationsMissionsByKey: (
//       key: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/early-exit-notifications/missions/${key}`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1ExtraGameClientArgs
//      * @request GET:/lol-gameflow/v1/extra-game-client-args
//      */
//     getLolGameflowV1ExtraGameClientArgs: (params: RequestParams = {}) =>
//       this.request<string[], any>({
//         path: `/lol-gameflow/v1/extra-game-client-args`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1ExtraGameClientArgs
//      * @request POST:/lol-gameflow/v1/extra-game-client-args
//      */
//     postLolGameflowV1ExtraGameClientArgs: (data: string[], params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/extra-game-client-args`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1GameflowMetadataPlayerStatus
//      * @request GET:/lol-gameflow/v1/gameflow-metadata/player-status
//      */
//     getLolGameflowV1GameflowMetadataPlayerStatus: (params: RequestParams = {}) =>
//       this.request<LolGameflowPlayerStatus, any>({
//         path: `/lol-gameflow/v1/gameflow-metadata/player-status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1GameflowMetadataPlayerStatus
//      * @request POST:/lol-gameflow/v1/gameflow-metadata/player-status
//      */
//     postLolGameflowV1GameflowMetadataPlayerStatus: (
//       data: LolGameflowPlayerStatus,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/gameflow-metadata/player-status`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1GameflowMetadataRegistrationStatus
//      * @request GET:/lol-gameflow/v1/gameflow-metadata/registration-status
//      */
//     getLolGameflowV1GameflowMetadataRegistrationStatus: (params: RequestParams = {}) =>
//       this.request<LolGameflowRegistrationStatus, any>({
//         path: `/lol-gameflow/v1/gameflow-metadata/registration-status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1GameflowMetadataRegistrationStatus
//      * @request POST:/lol-gameflow/v1/gameflow-metadata/registration-status
//      */
//     postLolGameflowV1GameflowMetadataRegistrationStatus: (
//       data: LolGameflowRegistrationStatus,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/gameflow-metadata/registration-status`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1GameflowPhase
//      * @request GET:/lol-gameflow/v1/gameflow-phase
//      */
//     getLolGameflowV1GameflowPhase: (params: RequestParams = {}) =>
//       this.request<LolGameflowGameflowPhase, any>({
//         path: `/lol-gameflow/v1/gameflow-phase`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1PreEndGameTransition
//      * @request POST:/lol-gameflow/v1/pre-end-game-transition
//      */
//     postLolGameflowV1PreEndGameTransition: (
//       query: {
//         enabled: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/pre-end-game-transition`,
//         method: 'POST',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1Reconnect
//      * @request POST:/lol-gameflow/v1/reconnect
//      */
//     postLolGameflowV1Reconnect: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-gameflow/v1/reconnect`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1Session
//      * @request GET:/lol-gameflow/v1/session
//      */
//     getLolGameflowV1Session: (params: RequestParams = {}) =>
//       this.request<LolGameflowGameflowSession, any>({
//         path: `/lol-gameflow/v1/session`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1SessionDodge
//      * @request POST:/lol-gameflow/v1/session/dodge
//      */
//     postLolGameflowV1SessionDodge: (
//       data: LolGameflowGameflowGameDodge,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/session/dodge`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1SessionEvent
//      * @request POST:/lol-gameflow/v1/session/event
//      */
//     postLolGameflowV1SessionEvent: (data: string, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/session/event`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1SessionGameConfiguration
//      * @request POST:/lol-gameflow/v1/session/game-configuration
//      */
//     postLolGameflowV1SessionGameConfiguration: (
//       data: LolGameflowQueue,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/session/game-configuration`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1SessionPerPositionSummonerSpellsDisallowed
//      * @request GET:/lol-gameflow/v1/session/per-position-summoner-spells/disallowed
//      */
//     getLolGameflowV1SessionPerPositionSummonerSpellsDisallowed: (params: RequestParams = {}) =>
//       this.request<Record<string, LolGameflowGameModeSpellList>, any>({
//         path: `/lol-gameflow/v1/session/per-position-summoner-spells/disallowed`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1SessionPerPositionSummonerSpellsDisallowedAsString
//      * @request GET:/lol-gameflow/v1/session/per-position-summoner-spells/disallowed/as-string
//      */
//     getLolGameflowV1SessionPerPositionSummonerSpellsDisallowedAsString: (
//       params: RequestParams = {}
//     ) =>
//       this.request<string, any>({
//         path: `/lol-gameflow/v1/session/per-position-summoner-spells/disallowed/as-string`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1SessionPerPositionSummonerSpellsRequired
//      * @request GET:/lol-gameflow/v1/session/per-position-summoner-spells/required
//      */
//     getLolGameflowV1SessionPerPositionSummonerSpellsRequired: (params: RequestParams = {}) =>
//       this.request<Record<string, LolGameflowGameModeSpellList>, any>({
//         path: `/lol-gameflow/v1/session/per-position-summoner-spells/required`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1SessionPerPositionSummonerSpellsRequiredAsString
//      * @request GET:/lol-gameflow/v1/session/per-position-summoner-spells/required/as-string
//      */
//     getLolGameflowV1SessionPerPositionSummonerSpellsRequiredAsString: (
//       params: RequestParams = {}
//     ) =>
//       this.request<string, any>({
//         path: `/lol-gameflow/v1/session/per-position-summoner-spells/required/as-string`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1SessionRequestEnterGameflow
//      * @request POST:/lol-gameflow/v1/session/request-enter-gameflow
//      */
//     postLolGameflowV1SessionRequestEnterGameflow: (data: string, params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-gameflow/v1/session/request-enter-gameflow`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1SessionRequestLobby
//      * @request POST:/lol-gameflow/v1/session/request-lobby
//      */
//     postLolGameflowV1SessionRequestLobby: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-gameflow/v1/session/request-lobby`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1SessionRequestTournamentCheckin
//      * @request POST:/lol-gameflow/v1/session/request-tournament-checkin
//      */
//     postLolGameflowV1SessionRequestTournamentCheckin: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-gameflow/v1/session/request-tournament-checkin`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1SessionTournamentEnded
//      * @request POST:/lol-gameflow/v1/session/tournament-ended
//      */
//     postLolGameflowV1SessionTournamentEnded: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/session/tournament-ended`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1Spectate
//      * @request GET:/lol-gameflow/v1/spectate
//      */
//     getLolGameflowV1Spectate: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-gameflow/v1/spectate`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1SpectateDelayedLaunch
//      * @request GET:/lol-gameflow/v1/spectate/delayed-launch
//      */
//     getLolGameflowV1SpectateDelayedLaunch: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/spectate/delayed-launch`,
//         method: 'GET',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1SpectateLaunch
//      * @request POST:/lol-gameflow/v1/spectate/launch
//      */
//     postLolGameflowV1SpectateLaunch: (data: string, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-gameflow/v1/spectate/launch`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1SpectateQuit
//      * @request POST:/lol-gameflow/v1/spectate/quit
//      */
//     postLolGameflowV1SpectateQuit: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-gameflow/v1/spectate/quit`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1Tick
//      * @request POST:/lol-gameflow/v1/tick
//      */
//     postLolGameflowV1Tick: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-gameflow/v1/tick`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name GetLolGameflowV1Watch
//      * @request GET:/lol-gameflow/v1/watch
//      */
//     getLolGameflowV1Watch: (params: RequestParams = {}) =>
//       this.request<LolGameflowGameflowWatchPhase, any>({
//         path: `/lol-gameflow/v1/watch`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV1WatchLaunch
//      * @request POST:/lol-gameflow/v1/watch/launch
//      */
//     postLolGameflowV1WatchLaunch: (data: string[], params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-gameflow/v1/watch/launch`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-gameflow
//      * @name PostLolGameflowV2SpectateLaunch
//      * @request POST:/lol-gameflow/v2/spectate/launch
//      */
//     postLolGameflowV2SpectateLaunch: (
//       data: LolGameflowSpectateGameInfoResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-gameflow/v2/spectate/launch`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolGeoinfo = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-geoinfo
//      * @name GetLolGeoinfoV1Getlocation
//      * @request GET:/lol-geoinfo/v1/getlocation
//      */
//     getLolGeoinfoV1Getlocation: (
//       query: {
//         ip_address: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolGeoinfoGeoInfo, any>({
//         path: `/lol-geoinfo/v1/getlocation`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-geoinfo
//      * @name GetLolGeoinfoV1Whereami
//      * @request GET:/lol-geoinfo/v1/whereami
//      */
//     getLolGeoinfoV1Whereami: (params: RequestParams = {}) =>
//       this.request<LolGeoinfoGeoInfoResponse, any>({
//         path: `/lol-geoinfo/v1/whereami`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolHighlights = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-highlights
//      * @name GetLolHighlightsV1Config
//      * @request GET:/lol-highlights/v1/config
//      */
//     getLolHighlightsV1Config: (params: RequestParams = {}) =>
//       this.request<LolHighlightsHighlightsConfig, any>({
//         path: `/lol-highlights/v1/config`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-highlights
//      * @name PostLolHighlightsV1FileBrowserByHighlightId
//      * @request POST:/lol-highlights/v1/file-browser/{highlightId}
//      */
//     postLolHighlightsV1FileBrowserByHighlightId: (highlightId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-highlights/v1/file-browser/${highlightId}`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-highlights
//      * @name GetLolHighlightsV1Highlights
//      * @request GET:/lol-highlights/v1/highlights
//      */
//     getLolHighlightsV1Highlights: (params: RequestParams = {}) =>
//       this.request<LolHighlightsHighlight[], any>({
//         path: `/lol-highlights/v1/highlights`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-highlights
//      * @name PostLolHighlightsV1Highlights
//      * @request POST:/lol-highlights/v1/highlights
//      */
//     postLolHighlightsV1Highlights: (params: RequestParams = {}) =>
//       this.request<LolHighlightsHighlight[], any>({
//         path: `/lol-highlights/v1/highlights`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-highlights
//      * @name GetLolHighlightsV1HighlightsFolderPath
//      * @request GET:/lol-highlights/v1/highlights-folder-path
//      */
//     getLolHighlightsV1HighlightsFolderPath: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-highlights/v1/highlights-folder-path`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-highlights
//      * @name GetLolHighlightsV1HighlightsFolderPathDefault
//      * @request GET:/lol-highlights/v1/highlights-folder-path/default
//      */
//     getLolHighlightsV1HighlightsFolderPathDefault: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-highlights/v1/highlights-folder-path/default`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-highlights
//      * @name DeleteLolHighlightsV1HighlightsById
//      * @request DELETE:/lol-highlights/v1/highlights/{id}
//      */
//     deleteLolHighlightsV1HighlightsById: (id: any, params: RequestParams = {}) =>
//       this.request<LolHighlightsHighlight, any>({
//         path: `/lol-highlights/v1/highlights/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-highlights
//      * @name GetLolHighlightsV1HighlightsById
//      * @request GET:/lol-highlights/v1/highlights/{id}
//      */
//     getLolHighlightsV1HighlightsById: (id: any, params: RequestParams = {}) =>
//       this.request<LolHighlightsHighlight, any>({
//         path: `/lol-highlights/v1/highlights/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-highlights
//      * @name PutLolHighlightsV1HighlightsById
//      * @request PUT:/lol-highlights/v1/highlights/{id}
//      */
//     putLolHighlightsV1HighlightsById: (
//       id: any,
//       data: LolHighlightsHighlight,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolHighlightsHighlight, any>({
//         path: `/lol-highlights/v1/highlights/${id}`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolHonorV2 = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name GetLolHonorV2V1Ballot
//      * @request GET:/lol-honor-v2/v1/ballot
//      */
//     getLolHonorV2V1Ballot: (params: RequestParams = {}) =>
//       this.request<LolHonorV2Ballot, any>({
//         path: `/lol-honor-v2/v1/ballot`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name GetLolHonorV2V1Config
//      * @request GET:/lol-honor-v2/v1/config
//      */
//     getLolHonorV2V1Config: (params: RequestParams = {}) =>
//       this.request<LolHonorV2HonorConfig, any>({
//         path: `/lol-honor-v2/v1/config`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name PostLolHonorV2V1HonorPlayer
//      * @request POST:/lol-honor-v2/v1/honor-player
//      */
//     postLolHonorV2V1HonorPlayer: (
//       data: LolHonorV2ApiHonorPlayerServerRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<string, any>({
//         path: `/lol-honor-v2/v1/honor-player`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name GetLolHonorV2V1LateRecognition
//      * @request GET:/lol-honor-v2/v1/late-recognition
//      */
//     getLolHonorV2V1LateRecognition: (params: RequestParams = {}) =>
//       this.request<LolHonorV2Honor[], any>({
//         path: `/lol-honor-v2/v1/late-recognition`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name PostLolHonorV2V1LateRecognitionAck
//      * @request POST:/lol-honor-v2/v1/late-recognition/ack
//      */
//     postLolHonorV2V1LateRecognitionAck: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-honor-v2/v1/late-recognition/ack`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name GetLolHonorV2V1LatestEligibleGame
//      * @request GET:/lol-honor-v2/v1/latest-eligible-game
//      */
//     getLolHonorV2V1LatestEligibleGame: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/lol-honor-v2/v1/latest-eligible-game`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name GetLolHonorV2V1LevelChange
//      * @request GET:/lol-honor-v2/v1/level-change
//      */
//     getLolHonorV2V1LevelChange: (params: RequestParams = {}) =>
//       this.request<LolHonorV2VendedHonorChange, any>({
//         path: `/lol-honor-v2/v1/level-change`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name PostLolHonorV2V1LevelChangeAck
//      * @request POST:/lol-honor-v2/v1/level-change/ack
//      */
//     postLolHonorV2V1LevelChangeAck: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-honor-v2/v1/level-change/ack`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name GetLolHonorV2V1MutualHonor
//      * @request GET:/lol-honor-v2/v1/mutual-honor
//      */
//     getLolHonorV2V1MutualHonor: (params: RequestParams = {}) =>
//       this.request<LolHonorV2MutualHonor, any>({
//         path: `/lol-honor-v2/v1/mutual-honor`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name PostLolHonorV2V1MutualHonorAck
//      * @request POST:/lol-honor-v2/v1/mutual-honor/ack
//      */
//     postLolHonorV2V1MutualHonorAck: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-honor-v2/v1/mutual-honor/ack`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name GetLolHonorV2V1Profile
//      * @request GET:/lol-honor-v2/v1/profile
//      */
//     getLolHonorV2V1Profile: (params: RequestParams = {}) =>
//       this.request<LolHonorV2ProfileInfo, any>({
//         path: `/lol-honor-v2/v1/profile`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name GetLolHonorV2V1Recognition
//      * @request GET:/lol-honor-v2/v1/recognition
//      */
//     getLolHonorV2V1Recognition: (params: RequestParams = {}) =>
//       this.request<LolHonorV2Honor[], any>({
//         path: `/lol-honor-v2/v1/recognition`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name GetLolHonorV2V1RewardGranted
//      * @request GET:/lol-honor-v2/v1/reward-granted
//      */
//     getLolHonorV2V1RewardGranted: (params: RequestParams = {}) =>
//       this.request<LolHonorV2VendedReward, any>({
//         path: `/lol-honor-v2/v1/reward-granted`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name PostLolHonorV2V1RewardGrantedAck
//      * @request POST:/lol-honor-v2/v1/reward-granted/ack
//      */
//     postLolHonorV2V1RewardGrantedAck: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-honor-v2/v1/reward-granted/ack`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name GetLolHonorV2V1TeamChoices
//      * @request GET:/lol-honor-v2/v1/team-choices
//      */
//     getLolHonorV2V1TeamChoices: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-honor-v2/v1/team-choices`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-honor-v2
//      * @name GetLolHonorV2V1VoteCompletion
//      * @request GET:/lol-honor-v2/v1/vote-completion
//      */
//     getLolHonorV2V1VoteCompletion: (params: RequestParams = {}) =>
//       this.request<LolHonorV2VoteCompletion, any>({
//         path: `/lol-honor-v2/v1/vote-completion`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolHovercard = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-hovercard
//      * @name GetLolHovercardV1FriendInfoBySummonerBySummonerId
//      * @request GET:/lol-hovercard/v1/friend-info-by-summoner/{summonerId}
//      */
//     getLolHovercardV1FriendInfoBySummonerBySummonerId: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolHovercardHovercardUserInfo, any>({
//         path: `/lol-hovercard/v1/friend-info-by-summoner/${summonerId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-hovercard
//      * @name GetLolHovercardV1FriendInfoByPuuid
//      * @request GET:/lol-hovercard/v1/friend-info/{puuid}
//      */
//     getLolHovercardV1FriendInfoByPuuid: (puuid: any, params: RequestParams = {}) =>
//       this.request<LolHovercardHovercardUserInfo, any>({
//         path: `/lol-hovercard/v1/friend-info/${puuid}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolInventory = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1ChampSelectInventory
//      * @request GET:/lol-inventory/v1/champSelectInventory
//      */
//     getLolInventoryV1ChampSelectInventory: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-inventory/v1/champSelectInventory`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1InitialConfigurationComplete
//      * @request GET:/lol-inventory/v1/initial-configuration-complete
//      */
//     getLolInventoryV1InitialConfigurationComplete: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-inventory/v1/initial-configuration-complete`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1Inventory
//      * @request GET:/lol-inventory/v1/inventory
//      */
//     getLolInventoryV1Inventory: (
//       query: {
//         inventoryTypes: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolInventoryInventoryItemWithPayload[], any>({
//         path: `/lol-inventory/v1/inventory`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1InventoryEmotes
//      * @request GET:/lol-inventory/v1/inventory/emotes
//      */
//     getLolInventoryV1InventoryEmotes: (params: RequestParams = {}) =>
//       this.request<LolInventoryInventoryItemWithPayload[], any>({
//         path: `/lol-inventory/v1/inventory/emotes`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name PostLolInventoryV1NotificationAcknowledge
//      * @request POST:/lol-inventory/v1/notification/acknowledge
//      */
//     postLolInventoryV1NotificationAcknowledge: (data: number, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-inventory/v1/notification/acknowledge`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1NotificationsByInventoryType
//      * @request GET:/lol-inventory/v1/notifications/{inventoryType}
//      */
//     getLolInventoryV1NotificationsByInventoryType: (
//       inventoryType: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolInventoryInventoryNotification[], any>({
//         path: `/lol-inventory/v1/notifications/${inventoryType}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1PlayersByPuuidInventory
//      * @request GET:/lol-inventory/v1/players/{puuid}/inventory
//      */
//     getLolInventoryV1PlayersByPuuidInventory: (
//       puuid: any,
//       query: {
//         inventoryTypes: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolInventoryInventoryItemWithPayload[], any>({
//         path: `/lol-inventory/v1/players/${puuid}/inventory`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1SignedInventory
//      * @request GET:/lol-inventory/v1/signedInventory
//      */
//     getLolInventoryV1SignedInventory: (
//       query: {
//         inventoryTypes: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, string>, any>({
//         path: `/lol-inventory/v1/signedInventory`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1SignedInventorySimple
//      * @request GET:/lol-inventory/v1/signedInventory/simple
//      */
//     getLolInventoryV1SignedInventorySimple: (
//       query: {
//         inventoryTypes: string[]
//         queryParams?: Record<string, string>
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<string, any>({
//         path: `/lol-inventory/v1/signedInventory/simple`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1SignedInventoryTournamentlogos
//      * @request GET:/lol-inventory/v1/signedInventory/tournamentlogos
//      */
//     getLolInventoryV1SignedInventoryTournamentlogos: (params: RequestParams = {}) =>
//       this.request<Record<string, string>, any>({
//         path: `/lol-inventory/v1/signedInventory/tournamentlogos`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1SignedInventoryCache
//      * @request GET:/lol-inventory/v1/signedInventoryCache
//      */
//     getLolInventoryV1SignedInventoryCache: (params: RequestParams = {}) =>
//       this.request<Record<string, LolInventoryInventoryCacheEntry>, any>({
//         path: `/lol-inventory/v1/signedInventoryCache`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1SignedWallet
//      * @request GET:/lol-inventory/v1/signedWallet
//      */
//     getLolInventoryV1SignedWallet: (
//       query: {
//         currencyTypes: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, string>, any>({
//         path: `/lol-inventory/v1/signedWallet`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1SignedWalletByCurrencyType
//      * @request GET:/lol-inventory/v1/signedWallet/{currencyType}
//      */
//     getLolInventoryV1SignedWalletByCurrencyType: (currencyType: any, params: RequestParams = {}) =>
//       this.request<Record<string, string>, any>({
//         path: `/lol-inventory/v1/signedWallet/${currencyType}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1Wallet
//      * @request GET:/lol-inventory/v1/wallet
//      */
//     getLolInventoryV1Wallet: (
//       query: {
//         currencyTypes: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, number>, any>({
//         path: `/lol-inventory/v1/wallet`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV1WalletByCurrencyType
//      * @request GET:/lol-inventory/v1/wallet/{currencyType}
//      */
//     getLolInventoryV1WalletByCurrencyType: (currencyType: any, params: RequestParams = {}) =>
//       this.request<Record<string, number>, any>({
//         path: `/lol-inventory/v1/wallet/${currencyType}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-inventory
//      * @name GetLolInventoryV2InventoryByInventoryType
//      * @request GET:/lol-inventory/v2/inventory/{inventoryType}
//      */
//     getLolInventoryV2InventoryByInventoryType: (inventoryType: any, params: RequestParams = {}) =>
//       this.request<LolInventoryInventoryItemWithPayload[], any>({
//         path: `/lol-inventory/v2/inventory/${inventoryType}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolItemSets = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-item-sets
//      * @name GetLolItemSetsV1ItemSetsBySummonerIdSets
//      * @request GET:/lol-item-sets/v1/item-sets/{summonerId}/sets
//      */
//     getLolItemSetsV1ItemSetsBySummonerIdSets: (summonerId: any, params: RequestParams = {}) =>
//       this.request<LolItemSetsItemSets, any>({
//         path: `/lol-item-sets/v1/item-sets/${summonerId}/sets`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-item-sets
//      * @name PostLolItemSetsV1ItemSetsBySummonerIdSets
//      * @request POST:/lol-item-sets/v1/item-sets/{summonerId}/sets
//      */
//     postLolItemSetsV1ItemSetsBySummonerIdSets: (
//       summonerId: any,
//       data: LolItemSetsItemSet,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-item-sets/v1/item-sets/${summonerId}/sets`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-item-sets
//      * @name PutLolItemSetsV1ItemSetsBySummonerIdSets
//      * @request PUT:/lol-item-sets/v1/item-sets/{summonerId}/sets
//      */
//     putLolItemSetsV1ItemSetsBySummonerIdSets: (
//       summonerId: any,
//       data: LolItemSetsItemSets,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-item-sets/v1/item-sets/${summonerId}/sets`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-item-sets
//      * @name PostLolItemSetsV1ItemSetsBySummonerIdValidate
//      * @request POST:/lol-item-sets/v1/item-sets/{summonerId}/validate
//      */
//     postLolItemSetsV1ItemSetsBySummonerIdValidate: (
//       summonerId: any,
//       data: LolItemSetsValidateItemSetNameInput,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolItemSetsValidateItemSetNameResponse, any>({
//         path: `/lol-item-sets/v1/item-sets/${summonerId}/validate`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolKickout = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-kickout
//      * @name GetLolKickoutV1Notification
//      * @request GET:/lol-kickout/v1/notification
//      */
//     getLolKickoutV1Notification: (params: RequestParams = {}) =>
//       this.request<LolKickoutKickoutMessage, any>({
//         path: `/lol-kickout/v1/notification`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolKrPlaytimeReminder = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-kr-playtime-reminder
//      * @name GetLolKrPlaytimeReminderV1Message
//      * @request GET:/lol-kr-playtime-reminder/v1/message
//      */
//     getLolKrPlaytimeReminderV1Message: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-kr-playtime-reminder/v1/message`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-kr-playtime-reminder
//      * @name GetLolKrPlaytimeReminderV1Playtime
//      * @request GET:/lol-kr-playtime-reminder/v1/playtime
//      */
//     getLolKrPlaytimeReminderV1Playtime: (params: RequestParams = {}) =>
//       this.request<LolKrPlaytimeReminderPlaytimeReminder, any>({
//         path: `/lol-kr-playtime-reminder/v1/playtime`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolKrShutdownLaw = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-kr-shutdown-law
//      * @name GetLolKrShutdownLawV1CustomStatus
//      * @request GET:/lol-kr-shutdown-law/v1/custom-status
//      */
//     getLolKrShutdownLawV1CustomStatus: (params: RequestParams = {}) =>
//       this.request<LolKrShutdownLawQueueShutdownStatus, any>({
//         path: `/lol-kr-shutdown-law/v1/custom-status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-kr-shutdown-law
//      * @name GetLolKrShutdownLawV1DisabledQueues
//      * @request GET:/lol-kr-shutdown-law/v1/disabled-queues
//      */
//     getLolKrShutdownLawV1DisabledQueues: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-kr-shutdown-law/v1/disabled-queues`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-kr-shutdown-law
//      * @name GetLolKrShutdownLawV1Notification
//      * @request GET:/lol-kr-shutdown-law/v1/notification
//      */
//     getLolKrShutdownLawV1Notification: (params: RequestParams = {}) =>
//       this.request<LolKrShutdownLawShutdownLawNotification, any>({
//         path: `/lol-kr-shutdown-law/v1/notification`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-kr-shutdown-law
//      * @name GetLolKrShutdownLawV1QueueStatusByQueueId
//      * @request GET:/lol-kr-shutdown-law/v1/queue-status/{queue_id}
//      */
//     getLolKrShutdownLawV1QueueStatusByQueueId: (queueId: any, params: RequestParams = {}) =>
//       this.request<LolKrShutdownLawQueueShutdownStatus, any>({
//         path: `/lol-kr-shutdown-law/v1/queue-status/${queueId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-kr-shutdown-law
//      * @name GetLolKrShutdownLawV1RatingScreen
//      * @request GET:/lol-kr-shutdown-law/v1/rating-screen
//      */
//     getLolKrShutdownLawV1RatingScreen: (params: RequestParams = {}) =>
//       this.request<LolKrShutdownLawRatingScreenInfo, any>({
//         path: `/lol-kr-shutdown-law/v1/rating-screen`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-kr-shutdown-law
//      * @name PostLolKrShutdownLawV1RatingScreenAcknowledge
//      * @request POST:/lol-kr-shutdown-law/v1/rating-screen/acknowledge
//      */
//     postLolKrShutdownLawV1RatingScreenAcknowledge: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-kr-shutdown-law/v1/rating-screen/acknowledge`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-kr-shutdown-law
//      * @name GetLolKrShutdownLawV1Status
//      * @request GET:/lol-kr-shutdown-law/v1/status
//      */
//     getLolKrShutdownLawV1Status: (params: RequestParams = {}) =>
//       this.request<LolKrShutdownLawAllQueueShutdownStatus, any>({
//         path: `/lol-kr-shutdown-law/v1/status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolLeagueSession = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-league-session
//      * @name GetLolLeagueSessionV1LeagueSessionToken
//      * @request GET:/lol-league-session/v1/league-session-token
//      */
//     getLolLeagueSessionV1LeagueSessionToken: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-league-session/v1/league-session-token`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolLeaverBuster = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-leaver-buster
//      * @name GetLolLeaverBusterV1Notifications
//      * @request GET:/lol-leaver-buster/v1/notifications
//      */
//     getLolLeaverBusterV1Notifications: (params: RequestParams = {}) =>
//       this.request<LolLeaverBusterLeaverBusterNotificationResource[], any>({
//         path: `/lol-leaver-buster/v1/notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-leaver-buster
//      * @name DeleteLolLeaverBusterV1NotificationsById
//      * @request DELETE:/lol-leaver-buster/v1/notifications/{id}
//      */
//     deleteLolLeaverBusterV1NotificationsById: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-leaver-buster/v1/notifications/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-leaver-buster
//      * @name GetLolLeaverBusterV1NotificationsById
//      * @request GET:/lol-leaver-buster/v1/notifications/{id}
//      */
//     getLolLeaverBusterV1NotificationsById: (id: any, params: RequestParams = {}) =>
//       this.request<LolLeaverBusterLeaverBusterNotificationResource, any>({
//         path: `/lol-leaver-buster/v1/notifications/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolLicenseAgreement = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-license-agreement
//      * @name GetLolLicenseAgreementV1Agreements
//      * @request GET:/lol-license-agreement/v1/agreements
//      */
//     getLolLicenseAgreementV1Agreements: (params: RequestParams = {}) =>
//       this.request<LolLicenseAgreementLicenseAgreement[], any>({
//         path: `/lol-license-agreement/v1/agreements`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-license-agreement
//      * @name PostLolLicenseAgreementV1AgreementsByIdAccept
//      * @request POST:/lol-license-agreement/v1/agreements/{id}/accept
//      */
//     postLolLicenseAgreementV1AgreementsByIdAccept: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-license-agreement/v1/agreements/${id}/accept`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-license-agreement
//      * @name PostLolLicenseAgreementV1AgreementsByIdDecline
//      * @request POST:/lol-license-agreement/v1/agreements/{id}/decline
//      */
//     postLolLicenseAgreementV1AgreementsByIdDecline: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-license-agreement/v1/agreements/${id}/decline`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-license-agreement
//      * @name GetLolLicenseAgreementV1AllAgreements
//      * @request GET:/lol-license-agreement/v1/all-agreements
//      */
//     getLolLicenseAgreementV1AllAgreements: (params: RequestParams = {}) =>
//       this.request<LolLicenseAgreementLicenseAgreement[], any>({
//         path: `/lol-license-agreement/v1/all-agreements`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-license-agreement
//      * @name GetLolLicenseAgreementV1ServeLocation
//      * @request GET:/lol-license-agreement/v1/serve-location
//      */
//     getLolLicenseAgreementV1ServeLocation: (params: RequestParams = {}) =>
//       this.request<LolLicenseAgreementLicenseServeLocation, any>({
//         path: `/lol-license-agreement/v1/serve-location`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolLoadouts = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loadouts
//      * @name GetLolLoadoutsV1LoadoutsReady
//      * @request GET:/lol-loadouts/v1/loadouts-ready
//      */
//     getLolLoadoutsV1LoadoutsReady: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-loadouts/v1/loadouts-ready`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loadouts
//      * @name PostLolLoadoutsV4Loadouts
//      * @request POST:/lol-loadouts/v4/loadouts
//      */
//     postLolLoadoutsV4Loadouts: (data: LolLoadoutsCreateLoadoutDTO, params: RequestParams = {}) =>
//       this.request<LolLoadoutsScopedLoadout, any>({
//         path: `/lol-loadouts/v4/loadouts`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loadouts
//      * @name GetLolLoadoutsV4LoadoutsScopeAccount
//      * @request GET:/lol-loadouts/v4/loadouts/scope/account
//      */
//     getLolLoadoutsV4LoadoutsScopeAccount: (params: RequestParams = {}) =>
//       this.request<LolLoadoutsScopedLoadout[], any>({
//         path: `/lol-loadouts/v4/loadouts/scope/account`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loadouts
//      * @name GetLolLoadoutsV4LoadoutsScopeByScopeByScopeItemId
//      * @request GET:/lol-loadouts/v4/loadouts/scope/{scope}/{scopeItemId}
//      */
//     getLolLoadoutsV4LoadoutsScopeByScopeByScopeItemId: (
//       scope: any,
//       scopeItemId?: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLoadoutsScopedLoadout[], any>({
//         path: `/lol-loadouts/v4/loadouts/scope/${scope}/${scopeItemId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loadouts
//      * @name DeleteLolLoadoutsV4LoadoutsById
//      * @request DELETE:/lol-loadouts/v4/loadouts/{id}
//      */
//     deleteLolLoadoutsV4LoadoutsById: (id: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-loadouts/v4/loadouts/${id}`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loadouts
//      * @name PatchLolLoadoutsV4LoadoutsById
//      * @request PATCH:/lol-loadouts/v4/loadouts/{id}
//      */
//     patchLolLoadoutsV4LoadoutsById: (
//       id: any,
//       data: LolLoadoutsUpdateLoadoutDTO,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLoadoutsScopedLoadout, any>({
//         path: `/lol-loadouts/v4/loadouts/${id}`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loadouts
//      * @name PutLolLoadoutsV4LoadoutsById
//      * @request PUT:/lol-loadouts/v4/loadouts/{id}
//      */
//     putLolLoadoutsV4LoadoutsById: (
//       id: any,
//       data: LolLoadoutsUpdateLoadoutDTO,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLoadoutsScopedLoadout, any>({
//         path: `/lol-loadouts/v4/loadouts/${id}`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loadouts
//      * @name GetLolLoadoutsV4LoadoutsByLoadoutId
//      * @request GET:/lol-loadouts/v4/loadouts/{loadoutId}
//      */
//     getLolLoadoutsV4LoadoutsByLoadoutId: (loadoutId: any, params: RequestParams = {}) =>
//       this.request<LolLoadoutsScopedLoadout, any>({
//         path: `/lol-loadouts/v4/loadouts/${loadoutId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolLobbyTeamBuilder = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1BannableChampionIds
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/bannable-champion-ids
//      */
//     getLolLobbyTeamBuilderChampSelectV1BannableChampionIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/bannable-champion-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1CurrentChampion
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/current-champion
//      */
//     getLolLobbyTeamBuilderChampSelectV1CurrentChampion: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/current-champion`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1DisabledChampionIds
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/disabled-champion-ids
//      */
//     getLolLobbyTeamBuilderChampSelectV1DisabledChampionIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/disabled-champion-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1HasAutoAssignedSmite
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/has-auto-assigned-smite
//      */
//     getLolLobbyTeamBuilderChampSelectV1HasAutoAssignedSmite: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/has-auto-assigned-smite`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1ImplementationActive
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/implementation-active
//      */
//     getLolLobbyTeamBuilderChampSelectV1ImplementationActive: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/implementation-active`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1MatchToken
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/match-token
//      */
//     getLolLobbyTeamBuilderChampSelectV1MatchToken: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/match-token`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1PickableChampionIds
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/pickable-champion-ids
//      */
//     getLolLobbyTeamBuilderChampSelectV1PickableChampionIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/pickable-champion-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1PickableSkinIds
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/pickable-skin-ids
//      */
//     getLolLobbyTeamBuilderChampSelectV1PickableSkinIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/pickable-skin-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1Preferences
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/preferences
//      */
//     getLolLobbyTeamBuilderChampSelectV1Preferences: (params: RequestParams = {}) =>
//       this.request<LolLobbyTeamBuilderChampionSelectPreferences, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/preferences`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PostLolLobbyTeamBuilderChampSelectV1RetrieveLatestGameDto
//      * @request POST:/lol-lobby-team-builder/champ-select/v1/retrieve-latest-game-dto
//      */
//     postLolLobbyTeamBuilderChampSelectV1RetrieveLatestGameDto: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/retrieve-latest-game-dto`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1SendingLoadoutsGcosEnabled
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/sending-loadouts-gcos-enabled
//      */
//     getLolLobbyTeamBuilderChampSelectV1SendingLoadoutsGcosEnabled: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/sending-loadouts-gcos-enabled`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1Session
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/session
//      */
//     getLolLobbyTeamBuilderChampSelectV1Session: (params: RequestParams = {}) =>
//       this.request<LolLobbyTeamBuilderChampSelectSession, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PatchLolLobbyTeamBuilderChampSelectV1SessionActionsById
//      * @request PATCH:/lol-lobby-team-builder/champ-select/v1/session/actions/{id}
//      */
//     patchLolLobbyTeamBuilderChampSelectV1SessionActionsById: (
//       id: any,
//       data: LolLobbyTeamBuilderChampSelectAction,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session/actions/${id}`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PostLolLobbyTeamBuilderChampSelectV1SessionActionsByIdComplete
//      * @request POST:/lol-lobby-team-builder/champ-select/v1/session/actions/{id}/complete
//      */
//     postLolLobbyTeamBuilderChampSelectV1SessionActionsByIdComplete: (
//       id: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session/actions/${id}/complete`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PostLolLobbyTeamBuilderChampSelectV1SessionBenchSwapByChampionId
//      * @request POST:/lol-lobby-team-builder/champ-select/v1/session/bench/swap/{championId}
//      */
//     postLolLobbyTeamBuilderChampSelectV1SessionBenchSwapByChampionId: (
//       championId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session/bench/swap/${championId}`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PatchLolLobbyTeamBuilderChampSelectV1SessionMySelection
//      * @request PATCH:/lol-lobby-team-builder/champ-select/v1/session/my-selection
//      */
//     patchLolLobbyTeamBuilderChampSelectV1SessionMySelection: (
//       data: LolLobbyTeamBuilderChampSelectMySelection,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session/my-selection`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PostLolLobbyTeamBuilderChampSelectV1SessionMySelectionReroll
//      * @request POST:/lol-lobby-team-builder/champ-select/v1/session/my-selection/reroll
//      */
//     postLolLobbyTeamBuilderChampSelectV1SessionMySelectionReroll: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session/my-selection/reroll`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1SessionTimer
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/session/timer
//      */
//     getLolLobbyTeamBuilderChampSelectV1SessionTimer: (params: RequestParams = {}) =>
//       this.request<LolLobbyTeamBuilderChampSelectTimer, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session/timer`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1SessionTrades
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/session/trades
//      */
//     getLolLobbyTeamBuilderChampSelectV1SessionTrades: (params: RequestParams = {}) =>
//       this.request<LolLobbyTeamBuilderChampSelectTradeContract[], any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session/trades`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1SessionTradesById
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/session/trades/{id}
//      */
//     getLolLobbyTeamBuilderChampSelectV1SessionTradesById: (id: any, params: RequestParams = {}) =>
//       this.request<LolLobbyTeamBuilderChampSelectTradeContract, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session/trades/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdAccept
//      * @request POST:/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/accept
//      */
//     postLolLobbyTeamBuilderChampSelectV1SessionTradesByIdAccept: (
//       id: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session/trades/${id}/accept`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdCancel
//      * @request POST:/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/cancel
//      */
//     postLolLobbyTeamBuilderChampSelectV1SessionTradesByIdCancel: (
//       id: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session/trades/${id}/cancel`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdDecline
//      * @request POST:/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/decline
//      */
//     postLolLobbyTeamBuilderChampSelectV1SessionTradesByIdDecline: (
//       id: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session/trades/${id}/decline`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdRequest
//      * @request POST:/lol-lobby-team-builder/champ-select/v1/session/trades/{id}/request
//      */
//     postLolLobbyTeamBuilderChampSelectV1SessionTradesByIdRequest: (
//       id: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLobbyTeamBuilderChampSelectTradeContract, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/session/trades/${id}/request`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PostLolLobbyTeamBuilderChampSelectV1SimpleInventory
//      * @request POST:/lol-lobby-team-builder/champ-select/v1/simple-inventory
//      */
//     postLolLobbyTeamBuilderChampSelectV1SimpleInventory: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/simple-inventory`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderChampSelectV1TeamBoost
//      * @request GET:/lol-lobby-team-builder/champ-select/v1/team-boost
//      */
//     getLolLobbyTeamBuilderChampSelectV1TeamBoost: (params: RequestParams = {}) =>
//       this.request<LolLobbyTeamBuilderTeamBoost, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/team-boost`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PostLolLobbyTeamBuilderChampSelectV1TeamBoostPurchase
//      * @request POST:/lol-lobby-team-builder/champ-select/v1/team-boost/purchase
//      */
//     postLolLobbyTeamBuilderChampSelectV1TeamBoostPurchase: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby-team-builder/champ-select/v1/team-boost/purchase`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name GetLolLobbyTeamBuilderV1Matchmaking
//      * @request GET:/lol-lobby-team-builder/v1/matchmaking
//      */
//     getLolLobbyTeamBuilderV1Matchmaking: (params: RequestParams = {}) =>
//       this.request<LolLobbyTeamBuilderMatchmakingSearchResource, any>({
//         path: `/lol-lobby-team-builder/v1/matchmaking`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PostLolLobbyTeamBuilderV1ReadyCheckAccept
//      * @request POST:/lol-lobby-team-builder/v1/ready-check/accept
//      */
//     postLolLobbyTeamBuilderV1ReadyCheckAccept: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby-team-builder/v1/ready-check/accept`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby-team-builder
//      * @name PostLolLobbyTeamBuilderV1ReadyCheckDecline
//      * @request POST:/lol-lobby-team-builder/v1/ready-check/decline
//      */
//     postLolLobbyTeamBuilderV1ReadyCheckDecline: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby-team-builder/v1/ready-check/decline`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       })
//   }
//   lolLobby = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV1AutofillDisplayed
//      * @request GET:/lol-lobby/v1/autofill-displayed
//      */
//     getLolLobbyV1AutofillDisplayed: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-lobby/v1/autofill-displayed`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PutLolLobbyV1AutofillDisplayed
//      * @request PUT:/lol-lobby/v1/autofill-displayed
//      */
//     putLolLobbyV1AutofillDisplayed: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-lobby/v1/autofill-displayed`,
//         method: 'PUT',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name DeleteLolLobbyV1Clash
//      * @request DELETE:/lol-lobby/v1/clash
//      */
//     deleteLolLobbyV1Clash: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v1/clash`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV1Clash
//      * @request POST:/lol-lobby/v1/clash
//      */
//     postLolLobbyV1Clash: (data: string, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v1/clash`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV1CustomGames
//      * @request GET:/lol-lobby/v1/custom-games
//      */
//     getLolLobbyV1CustomGames: (params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyCustomGame[], any>({
//         path: `/lol-lobby/v1/custom-games`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV1CustomGamesRefresh
//      * @request POST:/lol-lobby/v1/custom-games/refresh
//      */
//     postLolLobbyV1CustomGamesRefresh: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v1/custom-games/refresh`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV1CustomGamesById
//      * @request GET:/lol-lobby/v1/custom-games/{id}
//      */
//     getLolLobbyV1CustomGamesById: (id: any, params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyCustomGame, any>({
//         path: `/lol-lobby/v1/custom-games/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV1CustomGamesByIdJoin
//      * @request POST:/lol-lobby/v1/custom-games/{id}/join
//      */
//     postLolLobbyV1CustomGamesByIdJoin: (
//       id: any,
//       data: LolLobbyLobbyCustomJoinParameters,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v1/custom-games/${id}/join`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV1LobbyAvailability
//      * @request GET:/lol-lobby/v1/lobby/availability
//      */
//     getLolLobbyV1LobbyAvailability: (params: RequestParams = {}) =>
//       this.request<LolLobbyQueueAvailability, any>({
//         path: `/lol-lobby/v1/lobby/availability`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV1LobbyCountdown
//      * @request GET:/lol-lobby/v1/lobby/countdown
//      */
//     getLolLobbyV1LobbyCountdown: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/lol-lobby/v1/lobby/countdown`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV1LobbyCustomBots
//      * @request POST:/lol-lobby/v1/lobby/custom/bots
//      */
//     postLolLobbyV1LobbyCustomBots: (data: LolLobbyLobbyBotParams, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v1/lobby/custom/bots`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name DeleteLolLobbyV1LobbyCustomBotsBySummonerInternalName
//      * @request DELETE:/lol-lobby/v1/lobby/custom/bots/{summonerInternalName}
//      */
//     deleteLolLobbyV1LobbyCustomBotsBySummonerInternalName: (
//       summonerInternalName: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v1/lobby/custom/bots/${summonerInternalName}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV1LobbyCustomBotsBySummonerInternalName
//      * @request POST:/lol-lobby/v1/lobby/custom/bots/{summonerInternalName}
//      */
//     postLolLobbyV1LobbyCustomBotsBySummonerInternalName: (
//       summonerInternalName: any,
//       data: LolLobbyLobbyBotParams,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v1/lobby/custom/bots/${summonerInternalName}`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV1LobbyCustomCancelChampSelect
//      * @request POST:/lol-lobby/v1/lobby/custom/cancel-champ-select
//      */
//     postLolLobbyV1LobbyCustomCancelChampSelect: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v1/lobby/custom/cancel-champ-select`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV1LobbyCustomStartChampSelect
//      * @request POST:/lol-lobby/v1/lobby/custom/start-champ-select
//      */
//     postLolLobbyV1LobbyCustomStartChampSelect: (params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyCustomChampSelectStartResponse, any>({
//         path: `/lol-lobby/v1/lobby/custom/start-champ-select`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV1LobbyCustomSwitchTeams
//      * @request POST:/lol-lobby/v1/lobby/custom/switch-teams
//      */
//     postLolLobbyV1LobbyCustomSwitchTeams: (
//       query?: {
//         team?: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v1/lobby/custom/switch-teams`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV1LobbyInvitations
//      * @request GET:/lol-lobby/v1/lobby/invitations
//      */
//     getLolLobbyV1LobbyInvitations: (params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyInvitation[], any>({
//         path: `/lol-lobby/v1/lobby/invitations`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV1LobbyInvitations
//      * @request POST:/lol-lobby/v1/lobby/invitations
//      */
//     postLolLobbyV1LobbyInvitations: (data: LolLobbyLobbyInvitation, params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyInvitation, any>({
//         path: `/lol-lobby/v1/lobby/invitations`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV1LobbyInvitationsById
//      * @request GET:/lol-lobby/v1/lobby/invitations/{id}
//      */
//     getLolLobbyV1LobbyInvitationsById: (id: any, params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyInvitation, any>({
//         path: `/lol-lobby/v1/lobby/invitations/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PutLolLobbyV1LobbyMembersLocalMemberPositionPreferences
//      * @request PUT:/lol-lobby/v1/lobby/members/localMember/position-preferences
//      */
//     putLolLobbyV1LobbyMembersLocalMemberPositionPreferences: (
//       data: LolLobbyLobbyPositionPreferences,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v1/lobby/members/localMember/position-preferences`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PutLolLobbyV1PartiesActive
//      * @request PUT:/lol-lobby/v1/parties/active
//      */
//     putLolLobbyV1PartiesActive: (data: number, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-lobby/v1/parties/active`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV1PartiesGamemode
//      * @request GET:/lol-lobby/v1/parties/gamemode
//      */
//     getLolLobbyV1PartiesGamemode: (params: RequestParams = {}) =>
//       this.request<LolLobbyGameModeDto, any>({
//         path: `/lol-lobby/v1/parties/gamemode`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PutLolLobbyV1PartiesMetadata
//      * @request PUT:/lol-lobby/v1/parties/metadata
//      */
//     putLolLobbyV1PartiesMetadata: (
//       data: LolLobbyPartyMemberMetadataDto,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-lobby/v1/parties/metadata`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV1PartiesPlayer
//      * @request GET:/lol-lobby/v1/parties/player
//      */
//     getLolLobbyV1PartiesPlayer: (params: RequestParams = {}) =>
//       this.request<LolLobbyPlayerDto, any>({
//         path: `/lol-lobby/v1/parties/player`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PutLolLobbyV1PartiesQueue
//      * @request PUT:/lol-lobby/v1/parties/queue
//      */
//     putLolLobbyV1PartiesQueue: (data: number, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-lobby/v1/parties/queue`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PutLolLobbyV1PartiesReady
//      * @request PUT:/lol-lobby/v1/parties/ready
//      */
//     putLolLobbyV1PartiesReady: (data: number, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-lobby/v1/parties/ready`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PutLolLobbyV1PartiesByPartyIdMembersByPuuidRole
//      * @request PUT:/lol-lobby/v1/parties/{partyId}/members/{puuid}/role
//      */
//     putLolLobbyV1PartiesByPartyIdMembersByPuuidRole: (
//       partyId: any,
//       puuid: any,
//       data: string,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-lobby/v1/parties/${partyId}/members/${puuid}/role`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV1PartyRewards
//      * @request GET:/lol-lobby/v1/party-rewards
//      */
//     getLolLobbyV1PartyRewards: (params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyPartyRewards, any>({
//         path: `/lol-lobby/v1/party-rewards`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV1TournamentsByIdJoin
//      * @request POST:/lol-lobby/v1/tournaments/{id}/join
//      */
//     postLolLobbyV1TournamentsByIdJoin: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v1/tournaments/${id}/join`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2CommsMembers
//      * @request GET:/lol-lobby/v2/comms/members
//      */
//     getLolLobbyV2CommsMembers: (params: RequestParams = {}) =>
//       this.request<LolLobbyPremadePartyDto, any>({
//         path: `/lol-lobby/v2/comms/members`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2CommsToken
//      * @request GET:/lol-lobby/v2/comms/token
//      */
//     getLolLobbyV2CommsToken: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-lobby/v2/comms/token`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2EligibilityGameSelectEligibilityHash
//      * @request GET:/lol-lobby/v2/eligibility/game-select-eligibility-hash
//      */
//     getLolLobbyV2EligibilityGameSelectEligibilityHash: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/lol-lobby/v2/eligibility/game-select-eligibility-hash`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2EligibilityInitialConfigurationComplete
//      * @request GET:/lol-lobby/v2/eligibility/initial-configuration-complete
//      */
//     getLolLobbyV2EligibilityInitialConfigurationComplete: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-lobby/v2/eligibility/initial-configuration-complete`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2EligibilityParty
//      * @request POST:/lol-lobby/v2/eligibility/party
//      */
//     postLolLobbyV2EligibilityParty: (params: RequestParams = {}) =>
//       this.request<LolLobbyEligibility[], any>({
//         path: `/lol-lobby/v2/eligibility/party`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2EligibilitySelf
//      * @request POST:/lol-lobby/v2/eligibility/self
//      */
//     postLolLobbyV2EligibilitySelf: (params: RequestParams = {}) =>
//       this.request<LolLobbyEligibility[], any>({
//         path: `/lol-lobby/v2/eligibility/self`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2EogInvitations
//      * @request POST:/lol-lobby/v2/eog-invitations
//      */
//     postLolLobbyV2EogInvitations: (
//       data: LolLobbyLobbyInvitationDto[],
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLobbyLobbyInvitationDto[], any>({
//         path: `/lol-lobby/v2/eog-invitations`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name DeleteLolLobbyV2Lobby
//      * @request DELETE:/lol-lobby/v2/lobby
//      */
//     deleteLolLobbyV2Lobby: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-lobby/v2/lobby`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2Lobby
//      * @request GET:/lol-lobby/v2/lobby
//      */
//     getLolLobbyV2Lobby: (params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyDto, any>({
//         path: `/lol-lobby/v2/lobby`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2Lobby
//      * @request POST:/lol-lobby/v2/lobby
//      */
//     postLolLobbyV2Lobby: (data: LolLobbyLobbyChangeGameDto, params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyDto, any>({
//         path: `/lol-lobby/v2/lobby`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2LobbyCustomAvailableBots
//      * @request GET:/lol-lobby/v2/lobby/custom/available-bots
//      */
//     getLolLobbyV2LobbyCustomAvailableBots: (params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyBotChampion[], any>({
//         path: `/lol-lobby/v2/lobby/custom/available-bots`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2LobbyCustomBotsEnabled
//      * @request GET:/lol-lobby/v2/lobby/custom/bots-enabled
//      */
//     getLolLobbyV2LobbyCustomBotsEnabled: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-lobby/v2/lobby/custom/bots-enabled`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2LobbyInvitations
//      * @request GET:/lol-lobby/v2/lobby/invitations
//      */
//     getLolLobbyV2LobbyInvitations: (params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyInvitationDto[], any>({
//         path: `/lol-lobby/v2/lobby/invitations`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2LobbyInvitations
//      * @request POST:/lol-lobby/v2/lobby/invitations
//      */
//     postLolLobbyV2LobbyInvitations: (
//       data: LolLobbyLobbyInvitationDto[],
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLobbyLobbyInvitationDto[], any>({
//         path: `/lol-lobby/v2/lobby/invitations`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name DeleteLolLobbyV2LobbyMatchmakingSearch
//      * @request DELETE:/lol-lobby/v2/lobby/matchmaking/search
//      */
//     deleteLolLobbyV2LobbyMatchmakingSearch: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v2/lobby/matchmaking/search`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2LobbyMatchmakingSearch
//      * @request POST:/lol-lobby/v2/lobby/matchmaking/search
//      */
//     postLolLobbyV2LobbyMatchmakingSearch: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v2/lobby/matchmaking/search`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2LobbyMatchmakingSearchState
//      * @request GET:/lol-lobby/v2/lobby/matchmaking/search-state
//      */
//     getLolLobbyV2LobbyMatchmakingSearchState: (params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyMatchmakingSearchResource, any>({
//         path: `/lol-lobby/v2/lobby/matchmaking/search-state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2LobbyMembers
//      * @request GET:/lol-lobby/v2/lobby/members
//      */
//     getLolLobbyV2LobbyMembers: (params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyParticipantDto[], any>({
//         path: `/lol-lobby/v2/lobby/members`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PutLolLobbyV2LobbyMembersLocalMemberPositionPreferences
//      * @request PUT:/lol-lobby/v2/lobby/members/localMember/position-preferences
//      */
//     putLolLobbyV2LobbyMembersLocalMemberPositionPreferences: (
//       data: LolLobbyLobbyPositionPreferences,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v2/lobby/members/localMember/position-preferences`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2LobbyMembersBySummonerIdGrantInvite
//      * @request POST:/lol-lobby/v2/lobby/members/{summonerId}/grant-invite
//      */
//     postLolLobbyV2LobbyMembersBySummonerIdGrantInvite: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<number, any>({
//         path: `/lol-lobby/v2/lobby/members/${summonerId}/grant-invite`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2LobbyMembersBySummonerIdKick
//      * @request POST:/lol-lobby/v2/lobby/members/{summonerId}/kick
//      */
//     postLolLobbyV2LobbyMembersBySummonerIdKick: (summonerId: any, params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/lol-lobby/v2/lobby/members/${summonerId}/kick`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2LobbyMembersBySummonerIdPromote
//      * @request POST:/lol-lobby/v2/lobby/members/{summonerId}/promote
//      */
//     postLolLobbyV2LobbyMembersBySummonerIdPromote: (summonerId: any, params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/lol-lobby/v2/lobby/members/${summonerId}/promote`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2LobbyMembersBySummonerIdRevokeInvite
//      * @request POST:/lol-lobby/v2/lobby/members/{summonerId}/revoke-invite
//      */
//     postLolLobbyV2LobbyMembersBySummonerIdRevokeInvite: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<number, any>({
//         path: `/lol-lobby/v2/lobby/members/${summonerId}/revoke-invite`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PutLolLobbyV2LobbyPartyType
//      * @request PUT:/lol-lobby/v2/lobby/partyType
//      */
//     putLolLobbyV2LobbyPartyType: (data: string, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v2/lobby/partyType`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2LobbyTeamByTeam
//      * @request POST:/lol-lobby/v2/lobby/team/{team}
//      */
//     postLolLobbyV2LobbyTeamByTeam: (team: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-lobby/v2/lobby/team/${team}`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2MatchmakingQuickSearch
//      * @request POST:/lol-lobby/v2/matchmaking/quick-search
//      */
//     postLolLobbyV2MatchmakingQuickSearch: (
//       data: LolLobbyLobbyChangeGameDto,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v2/matchmaking/quick-search`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2Notifications
//      * @request GET:/lol-lobby/v2/notifications
//      */
//     getLolLobbyV2Notifications: (params: RequestParams = {}) =>
//       this.request<LolLobbyLobbyNotification[], any>({
//         path: `/lol-lobby/v2/notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2Notifications
//      * @request POST:/lol-lobby/v2/notifications
//      */
//     postLolLobbyV2Notifications: (data: LolLobbyLobbyNotification, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-lobby/v2/notifications`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name DeleteLolLobbyV2NotificationsByNotificationId
//      * @request DELETE:/lol-lobby/v2/notifications/{notificationId}
//      */
//     deleteLolLobbyV2NotificationsByNotificationId: (
//       notificationId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v2/notifications/${notificationId}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2PartiesOverridesEnabledForTeamBuilderQueues
//      * @request POST:/lol-lobby/v2/parties/overrides/EnabledForTeamBuilderQueues
//      */
//     postLolLobbyV2PartiesOverridesEnabledForTeamBuilderQueues: (
//       query: {
//         enabledForTeambuilderQueues: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-lobby/v2/parties/overrides/EnabledForTeamBuilderQueues`,
//         method: 'POST',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2PartyActive
//      * @request GET:/lol-lobby/v2/party-active
//      */
//     getLolLobbyV2PartyActive: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-lobby/v2/party-active`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2PartyEogStatus
//      * @request GET:/lol-lobby/v2/party/eog-status
//      */
//     getLolLobbyV2PartyEogStatus: (params: RequestParams = {}) =>
//       this.request<LolLobbyPartyStatusDto, any>({
//         path: `/lol-lobby/v2/party/eog-status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2PartyByPartyIdJoin
//      * @request POST:/lol-lobby/v2/party/{partyId}/join
//      */
//     postLolLobbyV2PartyByPartyIdJoin: (
//       partyId: any,
//       data: LolLobbyCustomJoinOptionsDto,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v2/party/${partyId}/join`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2PlayAgain
//      * @request POST:/lol-lobby/v2/play-again
//      */
//     postLolLobbyV2PlayAgain: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v2/play-again`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2PlayAgainDecline
//      * @request POST:/lol-lobby/v2/play-again-decline
//      */
//     postLolLobbyV2PlayAgainDecline: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v2/play-again-decline`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2ReceivedInvitations
//      * @request GET:/lol-lobby/v2/received-invitations
//      */
//     getLolLobbyV2ReceivedInvitations: (params: RequestParams = {}) =>
//       this.request<LolLobbyReceivedInvitationDto[], any>({
//         path: `/lol-lobby/v2/received-invitations`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2ReceivedInvitationsByInvitationIdAccept
//      * @request POST:/lol-lobby/v2/received-invitations/{invitationId}/accept
//      */
//     postLolLobbyV2ReceivedInvitationsByInvitationIdAccept: (
//       invitationId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-lobby/v2/received-invitations/${invitationId}/accept`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name PostLolLobbyV2ReceivedInvitationsByInvitationIdDecline
//      * @request POST:/lol-lobby/v2/received-invitations/{invitationId}/decline
//      */
//     postLolLobbyV2ReceivedInvitationsByInvitationIdDecline: (
//       invitationId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-lobby/v2/received-invitations/${invitationId}/decline`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-lobby
//      * @name GetLolLobbyV2RegistrationStatus
//      * @request GET:/lol-lobby/v2/registration-status
//      */
//     getLolLobbyV2RegistrationStatus: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-lobby/v2/registration-status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolLogin = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name GetLolLoginV1AccountState
//      * @request GET:/lol-login/v1/account-state
//      */
//     getLolLoginV1AccountState: (params: RequestParams = {}) =>
//       this.request<LolLoginAccountStateResource, any>({
//         path: `/lol-login/v1/account-state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name PostLolLoginV1AccountState
//      * @request POST:/lol-login/v1/account-state
//      */
//     postLolLoginV1AccountState: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-login/v1/account-state`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name PostLolLoginV1ChangeSummonerName
//      * @request POST:/lol-login/v1/change-summoner-name
//      */
//     postLolLoginV1ChangeSummonerName: (data: string, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-login/v1/change-summoner-name`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name PostLolLoginV1DeleteRsoOnClose
//      * @request POST:/lol-login/v1/delete-rso-on-close
//      */
//     postLolLoginV1DeleteRsoOnClose: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-login/v1/delete-rso-on-close`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name PostLolLoginV1LeagueSessionStatus
//      * @request POST:/lol-login/v1/leagueSessionStatus
//      */
//     postLolLoginV1LeagueSessionStatus: (
//       data: LolLoginLeagueSessionStatus,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-login/v1/leagueSessionStatus`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name GetLolLoginV1LoginConnectionState
//      * @request GET:/lol-login/v1/login-connection-state
//      */
//     getLolLoginV1LoginConnectionState: (params: RequestParams = {}) =>
//       this.request<LolLoginLoginConnectionState, any>({
//         path: `/lol-login/v1/login-connection-state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name GetLolLoginV1LoginDataPacket
//      * @request GET:/lol-login/v1/login-data-packet
//      */
//     getLolLoginV1LoginDataPacket: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-login/v1/login-data-packet`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name GetLolLoginV1LoginInGameCreds
//      * @request GET:/lol-login/v1/login-in-game-creds
//      */
//     getLolLoginV1LoginInGameCreds: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-login/v1/login-in-game-creds`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name GetLolLoginV1LoginPlatformCredentials
//      * @request GET:/lol-login/v1/login-platform-credentials
//      */
//     getLolLoginV1LoginPlatformCredentials: (params: RequestParams = {}) =>
//       this.request<LolLoginPlatformGeneratedCredentials, any>({
//         path: `/lol-login/v1/login-platform-credentials`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name GetLolLoginV1LoginQueueState
//      * @request GET:/lol-login/v1/login-queue-state
//      */
//     getLolLoginV1LoginQueueState: (params: RequestParams = {}) =>
//       this.request<LolLoginLoginQueue, any>({
//         path: `/lol-login/v1/login-queue-state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name DeleteLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName
//      * @request DELETE:/lol-login/v1/service-proxy-async-requests/{serviceName}/{methodName}
//      */
//     deleteLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName: (
//       serviceName: any,
//       methodName: any,
//       query: {
//         /** @format int32 */
//         pluginId: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-login/v1/service-proxy-async-requests/${serviceName}/${methodName}`,
//         method: 'DELETE',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name PostLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName
//      * @request POST:/lol-login/v1/service-proxy-async-requests/{serviceName}/{methodName}
//      */
//     postLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName: (
//       serviceName: any,
//       methodName: any,
//       query: {
//         /** @format int32 */
//         pluginId: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-login/v1/service-proxy-async-requests/${serviceName}/${methodName}`,
//         method: 'POST',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name PostLolLoginV1ServiceProxyUuidRequests
//      * @request POST:/lol-login/v1/service-proxy-uuid-requests
//      */
//     postLolLoginV1ServiceProxyUuidRequests: (
//       query: {
//         serviceName: string
//         methodName: string
//         /** @format int32 */
//         pluginId: number
//         /** @format int64 */
//         timeoutMillis: number
//         payload: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<string, any>({
//         path: `/lol-login/v1/service-proxy-uuid-requests`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name DeleteLolLoginV1Session
//      * @request DELETE:/lol-login/v1/session
//      */
//     deleteLolLoginV1Session: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-login/v1/session`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name GetLolLoginV1Session
//      * @request GET:/lol-login/v1/session
//      */
//     getLolLoginV1Session: (params: RequestParams = {}) =>
//       this.request<LolLoginLoginSession, any>({
//         path: `/lol-login/v1/session`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name PostLolLoginV1Session
//      * @request POST:/lol-login/v1/session
//      */
//     postLolLoginV1Session: (data: LolLoginUsernameAndPassword, params: RequestParams = {}) =>
//       this.request<LolLoginLoginSession, any>({
//         path: `/lol-login/v1/session`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name PostLolLoginV1SessionInvoke
//      * @request POST:/lol-login/v1/session/invoke
//      */
//     postLolLoginV1SessionInvoke: (
//       query: {
//         destination: string
//         method: string
//       },
//       data: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLoginLcdsResponse, any>({
//         path: `/lol-login/v1/session/invoke`,
//         method: 'POST',
//         query: query,
//         body: data,
//         type: ContentType.UrlEncoded,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name DeleteLolLoginV1ShutdownLocksByLockName
//      * @request DELETE:/lol-login/v1/shutdown-locks/{lockName}
//      */
//     deleteLolLoginV1ShutdownLocksByLockName: (lockName: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-login/v1/shutdown-locks/${lockName}`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name PutLolLoginV1ShutdownLocksByLockName
//      * @request PUT:/lol-login/v1/shutdown-locks/{lockName}
//      */
//     putLolLoginV1ShutdownLocksByLockName: (lockName: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-login/v1/shutdown-locks/${lockName}`,
//         method: 'PUT',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name PostLolLoginV1SummonerSession
//      * @request POST:/lol-login/v1/summoner-session
//      */
//     postLolLoginV1SummonerSession: (
//       data: LolLoginSummonerSessionResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-login/v1/summoner-session`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name PostLolLoginV1SummonerSessionFailed
//      * @request POST:/lol-login/v1/summoner-session-failed
//      */
//     postLolLoginV1SummonerSessionFailed: (data: number, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-login/v1/summoner-session-failed`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name GetLolLoginV1Wallet
//      * @request GET:/lol-login/v1/wallet
//      */
//     getLolLoginV1Wallet: (params: RequestParams = {}) =>
//       this.request<LolLoginLoginSessionWallet, any>({
//         path: `/lol-login/v1/wallet`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-login
//      * @name GetLolLoginV2LeagueSessionInitToken
//      * @request GET:/lol-login/v2/league-session-init-token
//      */
//     getLolLoginV2LeagueSessionInitToken: (params: RequestParams = {}) =>
//       this.request<LolLoginLeagueSessionTokenEnvelope, any>({
//         path: `/lol-login/v2/league-session-init-token`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolLoot = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1CurrencyConfiguration
//      * @request GET:/lol-loot/v1/currency-configuration
//      */
//     getLolLootV1CurrencyConfiguration: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-loot/v1/currency-configuration`,
//         method: 'GET',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1Enabled
//      * @request GET:/lol-loot/v1/enabled
//      */
//     getLolLootV1Enabled: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-loot/v1/enabled`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1LootGrants
//      * @request GET:/lol-loot/v1/loot-grants
//      */
//     getLolLootV1LootGrants: (params: RequestParams = {}) =>
//       this.request<LolLootLootGrantNotification[], any>({
//         path: `/lol-loot/v1/loot-grants`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name DeleteLolLootV1LootGrantsById
//      * @request DELETE:/lol-loot/v1/loot-grants/{id}
//      */
//     deleteLolLootV1LootGrantsById: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-loot/v1/loot-grants/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1LootItems
//      * @request GET:/lol-loot/v1/loot-items
//      */
//     getLolLootV1LootItems: (params: RequestParams = {}) =>
//       this.request<LolLootLootItem[], any>({
//         path: `/lol-loot/v1/loot-items`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1LootOddsByRecipeName
//      * @request GET:/lol-loot/v1/loot-odds/{recipeName}
//      */
//     getLolLootV1LootOddsByRecipeName: (recipeName: any, params: RequestParams = {}) =>
//       this.request<LolLootVerboseLootOddsResponse, any>({
//         path: `/lol-loot/v1/loot-odds/${recipeName}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1Milestones
//      * @request GET:/lol-loot/v1/milestones
//      */
//     getLolLootV1Milestones: (
//       query: {
//         minimizeResponse: boolean
//         includeInactive?: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLootLootMilestones[], any>({
//         path: `/lol-loot/v1/milestones`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1MilestonesCounters
//      * @request GET:/lol-loot/v1/milestones/counters
//      */
//     getLolLootV1MilestonesCounters: (params: RequestParams = {}) =>
//       this.request<LolLootLootMilestonesCounter[], any>({
//         path: `/lol-loot/v1/milestones/counters`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1MilestonesItems
//      * @request GET:/lol-loot/v1/milestones/items
//      */
//     getLolLootV1MilestonesItems: (params: RequestParams = {}) =>
//       this.request<string[], any>({
//         path: `/lol-loot/v1/milestones/items`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1MilestonesByLootMilestonesId
//      * @request GET:/lol-loot/v1/milestones/{lootMilestonesId}
//      */
//     getLolLootV1MilestonesByLootMilestonesId: (
//       lootMilestonesId: any,
//       query?: {
//         includeInactive?: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLootLootMilestones, any>({
//         path: `/lol-loot/v1/milestones/${lootMilestonesId}`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name PostLolLootV1MilestonesByLootMilestonesIdClaim
//      * @request POST:/lol-loot/v1/milestones/{lootMilestonesId}/claim
//      */
//     postLolLootV1MilestonesByLootMilestonesIdClaim: (
//       lootMilestonesId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-loot/v1/milestones/${lootMilestonesId}/claim`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1MilestonesByLootMilestonesIdClaimProgress
//      * @request GET:/lol-loot/v1/milestones/{lootMilestonesId}/claimProgress
//      */
//     getLolLootV1MilestonesByLootMilestonesIdClaimProgress: (
//       lootMilestonesId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLootLootMilestonesClaimResponse, any>({
//         path: `/lol-loot/v1/milestones/${lootMilestonesId}/claimProgress`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1MilestonesByLootMilestonesIdCounter
//      * @request GET:/lol-loot/v1/milestones/{lootMilestonesId}/counter
//      */
//     getLolLootV1MilestonesByLootMilestonesIdCounter: (
//       lootMilestonesId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLootLootMilestonesCounter, any>({
//         path: `/lol-loot/v1/milestones/${lootMilestonesId}/counter`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1NewPlayerCheckDone
//      * @request GET:/lol-loot/v1/new-player-check-done
//      */
//     getLolLootV1NewPlayerCheckDone: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-loot/v1/new-player-check-done`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name PostLolLootV1NewPlayerCheckDoneByNewValue
//      * @request POST:/lol-loot/v1/new-player-check-done/{newValue}
//      */
//     postLolLootV1NewPlayerCheckDoneByNewValue: (newValue: any, params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-loot/v1/new-player-check-done/${newValue}`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1PlayerDisplayCategories
//      * @request GET:/lol-loot/v1/player-display-categories
//      */
//     getLolLootV1PlayerDisplayCategories: (params: RequestParams = {}) =>
//       this.request<string[], any>({
//         path: `/lol-loot/v1/player-display-categories`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1PlayerLoot
//      * @request GET:/lol-loot/v1/player-loot
//      */
//     getLolLootV1PlayerLoot: (params: RequestParams = {}) =>
//       this.request<LolLootPlayerLoot[], any>({
//         path: `/lol-loot/v1/player-loot`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1PlayerLootMap
//      * @request GET:/lol-loot/v1/player-loot-map
//      */
//     getLolLootV1PlayerLootMap: (params: RequestParams = {}) =>
//       this.request<Record<string, LolLootPlayerLoot>, any>({
//         path: `/lol-loot/v1/player-loot-map`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1PlayerLootNotifications
//      * @request GET:/lol-loot/v1/player-loot-notifications
//      */
//     getLolLootV1PlayerLootNotifications: (params: RequestParams = {}) =>
//       this.request<LolLootPlayerLootNotification[], any>({
//         path: `/lol-loot/v1/player-loot-notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name PostLolLootV1PlayerLootNotificationsByIdAcknowledge
//      * @request POST:/lol-loot/v1/player-loot-notifications/{id}/acknowledge
//      */
//     postLolLootV1PlayerLootNotificationsByIdAcknowledge: (id: any, params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-loot/v1/player-loot-notifications/${id}/acknowledge`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1PlayerLootByLootId
//      * @request GET:/lol-loot/v1/player-loot/{lootId}
//      */
//     getLolLootV1PlayerLootByLootId: (lootId: any, params: RequestParams = {}) =>
//       this.request<LolLootPlayerLoot, any>({
//         path: `/lol-loot/v1/player-loot/${lootId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1PlayerLootByLootIdContextMenu
//      * @request GET:/lol-loot/v1/player-loot/{lootId}/context-menu
//      */
//     getLolLootV1PlayerLootByLootIdContextMenu: (lootId: any, params: RequestParams = {}) =>
//       this.request<LolLootContextMenu[], any>({
//         path: `/lol-loot/v1/player-loot/${lootId}/context-menu`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name PostLolLootV1PlayerLootByLootIdContextMenu
//      * @request POST:/lol-loot/v1/player-loot/{lootId}/context-menu
//      */
//     postLolLootV1PlayerLootByLootIdContextMenu: (lootId: any, params: RequestParams = {}) =>
//       this.request<LolLootContextMenu[], any>({
//         path: `/lol-loot/v1/player-loot/${lootId}/context-menu`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name DeleteLolLootV1PlayerLootByLootIdNewNotification
//      * @request DELETE:/lol-loot/v1/player-loot/{lootId}/new-notification
//      */
//     deleteLolLootV1PlayerLootByLootIdNewNotification: (lootId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-loot/v1/player-loot/${lootId}/new-notification`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name PostLolLootV1PlayerLootByLootNameRedeem
//      * @request POST:/lol-loot/v1/player-loot/{lootName}/redeem
//      */
//     postLolLootV1PlayerLootByLootNameRedeem: (lootName: any, params: RequestParams = {}) =>
//       this.request<LolLootPlayerLootUpdate, any>({
//         path: `/lol-loot/v1/player-loot/${lootName}/redeem`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1Ready
//      * @request GET:/lol-loot/v1/ready
//      */
//     getLolLootV1Ready: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-loot/v1/ready`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1RecipesConfiguration
//      * @request GET:/lol-loot/v1/recipes/configuration
//      */
//     getLolLootV1RecipesConfiguration: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-loot/v1/recipes/configuration`,
//         method: 'GET',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV1RecipesInitialItemByLootId
//      * @request GET:/lol-loot/v1/recipes/initial-item/{lootId}
//      */
//     getLolLootV1RecipesInitialItemByLootId: (
//       lootId: any,
//       query?: {
//         includeInactive?: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLootRecipeWithMilestones[], any>({
//         path: `/lol-loot/v1/recipes/initial-item/${lootId}`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name PostLolLootV1RecipesInitialItemByLootId
//      * @request POST:/lol-loot/v1/recipes/initial-item/{lootId}
//      */
//     postLolLootV1RecipesInitialItemByLootId: (
//       lootId: any,
//       query?: {
//         includeInactive?: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLootRecipeWithMilestones[], any>({
//         path: `/lol-loot/v1/recipes/initial-item/${lootId}`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name PostLolLootV1RecipesByRecipeNameCraft
//      * @request POST:/lol-loot/v1/recipes/{recipeName}/craft
//      */
//     postLolLootV1RecipesByRecipeNameCraft: (
//       recipeName: any,
//       data: string[],
//       query?: {
//         /** @format int32 */
//         repeat?: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolLootPlayerLootUpdate, any>({
//         path: `/lol-loot/v1/recipes/${recipeName}/craft`,
//         method: 'POST',
//         query: query,
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name PostLolLootV1Refresh
//      * @request POST:/lol-loot/v1/refresh
//      */
//     postLolLootV1Refresh: (
//       query: {
//         force: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<string, any>({
//         path: `/lol-loot/v1/refresh`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loot
//      * @name GetLolLootV2PlayerLootMap
//      * @request GET:/lol-loot/v2/player-loot-map
//      */
//     getLolLootV2PlayerLootMap: (params: RequestParams = {}) =>
//       this.request<LolLootPlayerLootMap, any>({
//         path: `/lol-loot/v2/player-loot-map`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolLoyalty = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loyalty
//      * @name GetLolLoyaltyV1InventoryRequestNotification
//      * @request GET:/lol-loyalty/v1/inventory-request-notification
//      */
//     getLolLoyaltyV1InventoryRequestNotification: (params: RequestParams = {}) =>
//       this.request<LolLoyaltyLoyaltyStatusNotification, any>({
//         path: `/lol-loyalty/v1/inventory-request-notification`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loyalty
//      * @name GetLolLoyaltyV1StatusNotification
//      * @request GET:/lol-loyalty/v1/status-notification
//      */
//     getLolLoyaltyV1StatusNotification: (params: RequestParams = {}) =>
//       this.request<LolLoyaltyLoyaltyStatusNotification, any>({
//         path: `/lol-loyalty/v1/status-notification`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-loyalty
//      * @name PostLolLoyaltyV1UpdateTftInventory
//      * @request POST:/lol-loyalty/v1/updateTftInventory
//      */
//     postLolLoyaltyV1UpdateTftInventory: (
//       data: LolLoyaltyLoyaltyRewards,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-loyalty/v1/updateTftInventory`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       })
//   }
//   lolMaps = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-maps
//      * @name PostLolMapsV1Map
//      * @request POST:/lol-maps/v1/map
//      */
//     postLolMapsV1Map: (data: LolMapsMaps, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-maps/v1/map`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-maps
//      * @name GetLolMapsV1MapById
//      * @request GET:/lol-maps/v1/map/{id}
//      */
//     getLolMapsV1MapById: (id: any, params: RequestParams = {}) =>
//       this.request<LolMapsMaps, any>({
//         path: `/lol-maps/v1/map/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-maps
//      * @name GetLolMapsV1Maps
//      * @request GET:/lol-maps/v1/maps
//      */
//     getLolMapsV1Maps: (params: RequestParams = {}) =>
//       this.request<LolMapsMaps[], any>({
//         path: `/lol-maps/v1/maps`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-maps
//      * @name GetLolMapsV2MapByIdByGameMode
//      * @request GET:/lol-maps/v2/map/{id}/{gameMode}
//      */
//     getLolMapsV2MapByIdByGameMode: (id: any, gameMode: any, params: RequestParams = {}) =>
//       this.request<LolMapsMaps, any>({
//         path: `/lol-maps/v2/map/${id}/${gameMode}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-maps
//      * @name GetLolMapsV2MapByIdByGameModeByGameMutator
//      * @request GET:/lol-maps/v2/map/{id}/{gameMode}/{gameMutator}
//      */
//     getLolMapsV2MapByIdByGameModeByGameMutator: (
//       id: any,
//       gameMode: any,
//       gameMutator: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolMapsMaps, any>({
//         path: `/lol-maps/v2/map/${id}/${gameMode}/${gameMutator}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-maps
//      * @name GetLolMapsV2Maps
//      * @request GET:/lol-maps/v2/maps
//      */
//     getLolMapsV2Maps: (params: RequestParams = {}) =>
//       this.request<LolMapsMaps[], any>({
//         path: `/lol-maps/v2/maps`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolMatchHistory = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-match-history
//      * @name PostLolMatchHistoryV1AcsEndpointOverride
//      * @request POST:/lol-match-history/v1/acs-endpoint-override
//      */
//     postLolMatchHistoryV1AcsEndpointOverride: (
//       data: LolMatchHistoryAcsEndPoint,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-match-history/v1/acs-endpoint-override`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-match-history
//      * @name GetLolMatchHistoryV1Delta
//      * @request GET:/lol-match-history/v1/delta
//      */
//     getLolMatchHistoryV1Delta: (params: RequestParams = {}) =>
//       this.request<LolMatchHistoryMatchHistoryPlayerDelta, any>({
//         path: `/lol-match-history/v1/delta`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-match-history
//      * @name GetLolMatchHistoryV1GameTimelinesByGameId
//      * @request GET:/lol-match-history/v1/game-timelines/{gameId}
//      */
//     getLolMatchHistoryV1GameTimelinesByGameId: (gameId: any, params: RequestParams = {}) =>
//       this.request<LolMatchHistoryMatchHistoryTimelineFrames, any>({
//         path: `/lol-match-history/v1/game-timelines/${gameId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-match-history
//      * @name GetLolMatchHistoryV1GamesByGameId
//      * @request GET:/lol-match-history/v1/games/{gameId}
//      */
//     getLolMatchHistoryV1GamesByGameId: (gameId: any, params: RequestParams = {}) =>
//       this.request<LolMatchHistoryMatchHistoryGame, any>({
//         path: `/lol-match-history/v1/games/${gameId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-match-history
//      * @name GetLolMatchHistoryV1ProductsLolCurrentSummonerMatches
//      * @request GET:/lol-match-history/v1/products/lol/current-summoner/matches
//      */
//     getLolMatchHistoryV1ProductsLolCurrentSummonerMatches: (
//       query?: {
//         /** @format int32 */
//         begIndex?: number
//         /** @format int32 */
//         endIndex?: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolMatchHistoryMatchHistoryList, any>({
//         path: `/lol-match-history/v1/products/lol/current-summoner/matches`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-match-history
//      * @name GetLolMatchHistoryV1ProductsLolByPuuidMatches
//      * @request GET:/lol-match-history/v1/products/lol/{puuid}/matches
//      */
//     getLolMatchHistoryV1ProductsLolByPuuidMatches: (
//       puuid: any,
//       query?: {
//         /** @format int32 */
//         begIndex?: number
//         /** @format int32 */
//         endIndex?: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolMatchHistoryMatchHistoryList, any>({
//         path: `/lol-match-history/v1/products/lol/${puuid}/matches`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-match-history
//      * @name GetLolMatchHistoryV1ProductsTftByPuuidMatches
//      * @request GET:/lol-match-history/v1/products/tft/{puuid}/matches
//      */
//     getLolMatchHistoryV1ProductsTftByPuuidMatches: (
//       puuid: any,
//       query?: {
//         /** @format int32 */
//         begin?: number
//         /** @format int32 */
//         count?: number
//         tag?: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolMatchHistoryGAMHSMatchHistoryList, any>({
//         path: `/lol-match-history/v1/products/tft/${puuid}/matches`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-match-history
//      * @name GetLolMatchHistoryV1RecentlyPlayedSummoners
//      * @request GET:/lol-match-history/v1/recently-played-summoners
//      */
//     getLolMatchHistoryV1RecentlyPlayedSummoners: (params: RequestParams = {}) =>
//       this.request<LolMatchHistoryRecentlyPlayedSummoner[], any>({
//         path: `/lol-match-history/v1/recently-played-summoners`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-match-history
//      * @name GetLolMatchHistoryV1WebUrl
//      * @request GET:/lol-match-history/v1/web-url
//      */
//     getLolMatchHistoryV1WebUrl: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-match-history/v1/web-url`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-match-history
//      * @name GetLolMatchHistoryV3MatchlistAccountByAccountId
//      * @request GET:/lol-match-history/v3/matchlist/account/{accountId}
//      */
//     getLolMatchHistoryV3MatchlistAccountByAccountId: (
//       accountId: any,
//       query?: {
//         /** @format int32 */
//         begIndex?: number
//         /** @format int32 */
//         endIndex?: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolMatchHistoryMatchHistoryList, any>({
//         path: `/lol-match-history/v3/matchlist/account/${accountId}`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   lolMatchmaking = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-matchmaking
//      * @name GetLolMatchmakingV1ReadyCheck
//      * @request GET:/lol-matchmaking/v1/ready-check
//      */
//     getLolMatchmakingV1ReadyCheck: (params: RequestParams = {}) =>
//       this.request<LolMatchmakingMatchmakingReadyCheckResource, any>({
//         path: `/lol-matchmaking/v1/ready-check`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-matchmaking
//      * @name PostLolMatchmakingV1ReadyCheckAccept
//      * @request POST:/lol-matchmaking/v1/ready-check/accept
//      */
//     postLolMatchmakingV1ReadyCheckAccept: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-matchmaking/v1/ready-check/accept`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-matchmaking
//      * @name PostLolMatchmakingV1ReadyCheckDecline
//      * @request POST:/lol-matchmaking/v1/ready-check/decline
//      */
//     postLolMatchmakingV1ReadyCheckDecline: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-matchmaking/v1/ready-check/decline`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-matchmaking
//      * @name DeleteLolMatchmakingV1Search
//      * @request DELETE:/lol-matchmaking/v1/search
//      */
//     deleteLolMatchmakingV1Search: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-matchmaking/v1/search`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-matchmaking
//      * @name GetLolMatchmakingV1Search
//      * @request GET:/lol-matchmaking/v1/search
//      */
//     getLolMatchmakingV1Search: (params: RequestParams = {}) =>
//       this.request<LolMatchmakingMatchmakingSearchResource, any>({
//         path: `/lol-matchmaking/v1/search`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-matchmaking
//      * @name PostLolMatchmakingV1Search
//      * @request POST:/lol-matchmaking/v1/search
//      */
//     postLolMatchmakingV1Search: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-matchmaking/v1/search`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-matchmaking
//      * @name PutLolMatchmakingV1Search
//      * @request PUT:/lol-matchmaking/v1/search
//      */
//     putLolMatchmakingV1Search: (
//       data: LolMatchmakingMatchmakingSearchResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-matchmaking/v1/search`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-matchmaking
//      * @name GetLolMatchmakingV1SearchErrors
//      * @request GET:/lol-matchmaking/v1/search/errors
//      */
//     getLolMatchmakingV1SearchErrors: (params: RequestParams = {}) =>
//       this.request<LolMatchmakingMatchmakingSearchErrorResource[], any>({
//         path: `/lol-matchmaking/v1/search/errors`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-matchmaking
//      * @name GetLolMatchmakingV1SearchErrorsById
//      * @request GET:/lol-matchmaking/v1/search/errors/{id}
//      */
//     getLolMatchmakingV1SearchErrorsById: (id: any, params: RequestParams = {}) =>
//       this.request<LolMatchmakingMatchmakingSearchErrorResource, any>({
//         path: `/lol-matchmaking/v1/search/errors/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolMissions = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-missions
//      * @name GetLolMissionsV1Data
//      * @request GET:/lol-missions/v1/data
//      */
//     getLolMissionsV1Data: (params: RequestParams = {}) =>
//       this.request<PlayerMissionEligibilityData, any>({
//         path: `/lol-missions/v1/data`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-missions
//      * @name PostLolMissionsV1Force
//      * @request POST:/lol-missions/v1/force
//      */
//     postLolMissionsV1Force: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-missions/v1/force`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-missions
//      * @name GetLolMissionsV1Missions
//      * @request GET:/lol-missions/v1/missions
//      */
//     getLolMissionsV1Missions: (params: RequestParams = {}) =>
//       this.request<PlayerMissionDTO[], any>({
//         path: `/lol-missions/v1/missions`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-missions
//      * @name PutLolMissionsV1Player
//      * @request PUT:/lol-missions/v1/player
//      */
//     putLolMissionsV1Player: (data: IdsDTO, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-missions/v1/player`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-missions
//      * @name PutLolMissionsV1PlayerByMissionId
//      * @request PUT:/lol-missions/v1/player/{missionId}
//      */
//     putLolMissionsV1PlayerByMissionId: (
//       missionId: any,
//       data: LolMissionsRewardGroupsSelection,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-missions/v1/player/${missionId}`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-missions
//      * @name GetLolMissionsV1Series
//      * @request GET:/lol-missions/v1/series
//      */
//     getLolMissionsV1Series: (params: RequestParams = {}) =>
//       this.request<SeriesDTO[], any>({
//         path: `/lol-missions/v1/series`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-missions
//      * @name PutLolMissionsV2PlayerOpt
//      * @request PUT:/lol-missions/v2/player/opt
//      */
//     putLolMissionsV2PlayerOpt: (data: LolMissionsSeriesOpt, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-missions/v2/player/opt`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       })
//   }
//   lolNpeRewards = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-npe-rewards
//      * @name PostLolNpeRewardsV1ChallengesOpt
//      * @request POST:/lol-npe-rewards/v1/challenges/opt
//      */
//     postLolNpeRewardsV1ChallengesOpt: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-npe-rewards/v1/challenges/opt`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-npe-rewards
//      * @name GetLolNpeRewardsV1ChallengesProgress
//      * @request GET:/lol-npe-rewards/v1/challenges/progress
//      */
//     getLolNpeRewardsV1ChallengesProgress: (params: RequestParams = {}) =>
//       this.request<LolNpeRewardsChallengesProgress, any>({
//         path: `/lol-npe-rewards/v1/challenges/progress`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-npe-rewards
//      * @name GetLolNpeRewardsV1LevelRewards
//      * @request GET:/lol-npe-rewards/v1/level-rewards
//      */
//     getLolNpeRewardsV1LevelRewards: (params: RequestParams = {}) =>
//       this.request<LolNpeRewardsRewardSeries, any>({
//         path: `/lol-npe-rewards/v1/level-rewards`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-npe-rewards
//      * @name GetLolNpeRewardsV1LevelRewardsState
//      * @request GET:/lol-npe-rewards/v1/level-rewards/state
//      */
//     getLolNpeRewardsV1LevelRewardsState: (params: RequestParams = {}) =>
//       this.request<LolNpeRewardsRewardSeriesState, any>({
//         path: `/lol-npe-rewards/v1/level-rewards/state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-npe-rewards
//      * @name GetLolNpeRewardsV1LoginRewards
//      * @request GET:/lol-npe-rewards/v1/login-rewards
//      */
//     getLolNpeRewardsV1LoginRewards: (params: RequestParams = {}) =>
//       this.request<LolNpeRewardsRewardSeries, any>({
//         path: `/lol-npe-rewards/v1/login-rewards`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-npe-rewards
//      * @name GetLolNpeRewardsV1LoginRewardsState
//      * @request GET:/lol-npe-rewards/v1/login-rewards/state
//      */
//     getLolNpeRewardsV1LoginRewardsState: (params: RequestParams = {}) =>
//       this.request<LolNpeRewardsRewardSeriesState, any>({
//         path: `/lol-npe-rewards/v1/login-rewards/state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolNpeTutorialPath = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-npe-tutorial-path
//      * @name GetLolNpeTutorialPathV1RewardsChamp
//      * @request GET:/lol-npe-tutorial-path/v1/rewards/champ
//      */
//     getLolNpeTutorialPathV1RewardsChamp: (params: RequestParams = {}) =>
//       this.request<LolNpeTutorialPathCollectionsChampion, any>({
//         path: `/lol-npe-tutorial-path/v1/rewards/champ`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-npe-tutorial-path
//      * @name GetLolNpeTutorialPathV1Settings
//      * @request GET:/lol-npe-tutorial-path/v1/settings
//      */
//     getLolNpeTutorialPathV1Settings: (params: RequestParams = {}) =>
//       this.request<LolNpeTutorialPathAccountSettingsTutorial, any>({
//         path: `/lol-npe-tutorial-path/v1/settings`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-npe-tutorial-path
//      * @name PutLolNpeTutorialPathV1Settings
//      * @request PUT:/lol-npe-tutorial-path/v1/settings
//      */
//     putLolNpeTutorialPathV1Settings: (
//       data: LolNpeTutorialPathAccountSettingsTutorial,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-npe-tutorial-path/v1/settings`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-npe-tutorial-path
//      * @name GetLolNpeTutorialPathV1Tutorials
//      * @request GET:/lol-npe-tutorial-path/v1/tutorials
//      */
//     getLolNpeTutorialPathV1Tutorials: (params: RequestParams = {}) =>
//       this.request<LolNpeTutorialPathTutorial[], any>({
//         path: `/lol-npe-tutorial-path/v1/tutorials`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-npe-tutorial-path
//      * @name PatchLolNpeTutorialPathV1TutorialsInit
//      * @request PATCH:/lol-npe-tutorial-path/v1/tutorials/init
//      */
//     patchLolNpeTutorialPathV1TutorialsInit: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-npe-tutorial-path/v1/tutorials/init`,
//         method: 'PATCH',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-npe-tutorial-path
//      * @name PutLolNpeTutorialPathV1TutorialsByTutorialIdView
//      * @request PUT:/lol-npe-tutorial-path/v1/tutorials/{tutorialId}/view
//      */
//     putLolNpeTutorialPathV1TutorialsByTutorialIdView: (
//       tutorialId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-npe-tutorial-path/v1/tutorials/${tutorialId}/view`,
//         method: 'PUT',
//         ...params
//       })
//   }
//   lolPatch = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name GetLolPatchV1CheckingEnabled
//      * @request GET:/lol-patch/v1/checking-enabled
//      */
//     getLolPatchV1CheckingEnabled: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-patch/v1/checking-enabled`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name GetLolPatchV1Environment
//      * @request GET:/lol-patch/v1/environment
//      */
//     getLolPatchV1Environment: (params: RequestParams = {}) =>
//       this.request<LolPatchChunkingPatcherEnvironment, any>({
//         path: `/lol-patch/v1/environment`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name PutLolPatchV1GamePatchUrl
//      * @request PUT:/lol-patch/v1/game-patch-url
//      */
//     putLolPatchV1GamePatchUrl: (
//       query: {
//         url: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-patch/v1/game-patch-url`,
//         method: 'PUT',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name GetLolPatchV1GameVersion
//      * @request GET:/lol-patch/v1/game-version
//      */
//     getLolPatchV1GameVersion: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-patch/v1/game-version`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name GetLolPatchV1Notifications
//      * @request GET:/lol-patch/v1/notifications
//      */
//     getLolPatchV1Notifications: (params: RequestParams = {}) =>
//       this.request<LolPatchNotification[], any>({
//         path: `/lol-patch/v1/notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name DeleteLolPatchV1NotificationsById
//      * @request DELETE:/lol-patch/v1/notifications/{id}
//      */
//     deleteLolPatchV1NotificationsById: (id: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-patch/v1/notifications/${id}`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name PostLolPatchV1ProductsLeagueOfLegendsDetectCorruptionRequest
//      * @request POST:/lol-patch/v1/products/league_of_legends/detect-corruption-request
//      */
//     postLolPatchV1ProductsLeagueOfLegendsDetectCorruptionRequest: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-patch/v1/products/league_of_legends/detect-corruption-request`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name GetLolPatchV1ProductsLeagueOfLegendsInstallLocation
//      * @request GET:/lol-patch/v1/products/league_of_legends/install-location
//      */
//     getLolPatchV1ProductsLeagueOfLegendsInstallLocation: (params: RequestParams = {}) =>
//       this.request<LolPatchInstallPaths, any>({
//         path: `/lol-patch/v1/products/league_of_legends/install-location`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name PostLolPatchV1ProductsLeagueOfLegendsPartialRepairRequest
//      * @request POST:/lol-patch/v1/products/league_of_legends/partial-repair-request
//      */
//     postLolPatchV1ProductsLeagueOfLegendsPartialRepairRequest: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-patch/v1/products/league_of_legends/partial-repair-request`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name PostLolPatchV1ProductsLeagueOfLegendsStartCheckingRequest
//      * @request POST:/lol-patch/v1/products/league_of_legends/start-checking-request
//      */
//     postLolPatchV1ProductsLeagueOfLegendsStartCheckingRequest: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-patch/v1/products/league_of_legends/start-checking-request`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name PostLolPatchV1ProductsLeagueOfLegendsStartPatchingRequest
//      * @request POST:/lol-patch/v1/products/league_of_legends/start-patching-request
//      */
//     postLolPatchV1ProductsLeagueOfLegendsStartPatchingRequest: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-patch/v1/products/league_of_legends/start-patching-request`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name GetLolPatchV1ProductsLeagueOfLegendsState
//      * @request GET:/lol-patch/v1/products/league_of_legends/state
//      */
//     getLolPatchV1ProductsLeagueOfLegendsState: (params: RequestParams = {}) =>
//       this.request<LolPatchProductState, any>({
//         path: `/lol-patch/v1/products/league_of_legends/state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name PostLolPatchV1ProductsLeagueOfLegendsStopCheckingRequest
//      * @request POST:/lol-patch/v1/products/league_of_legends/stop-checking-request
//      */
//     postLolPatchV1ProductsLeagueOfLegendsStopCheckingRequest: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-patch/v1/products/league_of_legends/stop-checking-request`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name PostLolPatchV1ProductsLeagueOfLegendsStopPatchingRequest
//      * @request POST:/lol-patch/v1/products/league_of_legends/stop-patching-request
//      */
//     postLolPatchV1ProductsLeagueOfLegendsStopPatchingRequest: (
//       query: {
//         restart: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-patch/v1/products/league_of_legends/stop-patching-request`,
//         method: 'POST',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name GetLolPatchV1ProductsLeagueOfLegendsSupportedGameReleases
//      * @request GET:/lol-patch/v1/products/league_of_legends/supported-game-releases
//      */
//     getLolPatchV1ProductsLeagueOfLegendsSupportedGameReleases: (params: RequestParams = {}) =>
//       this.request<LolPatchSupportedGameReleases, any>({
//         path: `/lol-patch/v1/products/league_of_legends/supported-game-releases`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name PutLolPatchV1SelfUpdateRestart
//      * @request PUT:/lol-patch/v1/self-update-restart
//      */
//     putLolPatchV1SelfUpdateRestart: (
//       query: {
//         forceRestartOnSelfUpdate: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-patch/v1/self-update-restart`,
//         method: 'PUT',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name GetLolPatchV1Status
//      * @request GET:/lol-patch/v1/status
//      */
//     getLolPatchV1Status: (params: RequestParams = {}) =>
//       this.request<LolPatchStatus, any>({
//         path: `/lol-patch/v1/status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-patch
//      * @name PutLolPatchV1Ux
//      * @request PUT:/lol-patch/v1/ux
//      */
//     putLolPatchV1Ux: (data: LolPatchUxResource, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-patch/v1/ux`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       })
//   }
//   lolPerks = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1Currentpage
//      * @request GET:/lol-perks/v1/currentpage
//      */
//     getLolPerksV1Currentpage: (params: RequestParams = {}) =>
//       this.request<LolPerksPerkPageResource, any>({
//         path: `/lol-perks/v1/currentpage`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name PutLolPerksV1Currentpage
//      * @request PUT:/lol-perks/v1/currentpage
//      */
//     putLolPerksV1Currentpage: (data: number, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-perks/v1/currentpage`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1Customizationlimits
//      * @request GET:/lol-perks/v1/customizationlimits
//      */
//     getLolPerksV1Customizationlimits: (params: RequestParams = {}) =>
//       this.request<LolPerksCustomizationLimits, any>({
//         path: `/lol-perks/v1/customizationlimits`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1Inventory
//      * @request GET:/lol-perks/v1/inventory
//      */
//     getLolPerksV1Inventory: (params: RequestParams = {}) =>
//       this.request<LolPerksPlayerInventory, any>({
//         path: `/lol-perks/v1/inventory`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name DeleteLolPerksV1Pages
//      * @request DELETE:/lol-perks/v1/pages
//      */
//     deleteLolPerksV1Pages: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-perks/v1/pages`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1Pages
//      * @request GET:/lol-perks/v1/pages
//      */
//     getLolPerksV1Pages: (params: RequestParams = {}) =>
//       this.request<LolPerksPerkPageResource[], any>({
//         path: `/lol-perks/v1/pages`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name PostLolPerksV1Pages
//      * @request POST:/lol-perks/v1/pages
//      */
//     postLolPerksV1Pages: (data: LolPerksPerkPageResource, params: RequestParams = {}) =>
//       this.request<LolPerksPerkPageResource, any>({
//         path: `/lol-perks/v1/pages`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name PutLolPerksV1PagesValidate
//      * @request PUT:/lol-perks/v1/pages/validate
//      */
//     putLolPerksV1PagesValidate: (data: LolPerksValidatePageNameData, params: RequestParams = {}) =>
//       this.request<LolPerksValidatePageNameResponse, any>({
//         path: `/lol-perks/v1/pages/validate`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name DeleteLolPerksV1PagesById
//      * @request DELETE:/lol-perks/v1/pages/{id}
//      */
//     deleteLolPerksV1PagesById: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-perks/v1/pages/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1PagesById
//      * @request GET:/lol-perks/v1/pages/{id}
//      */
//     getLolPerksV1PagesById: (id: any, params: RequestParams = {}) =>
//       this.request<LolPerksPerkPageResource, any>({
//         path: `/lol-perks/v1/pages/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name PutLolPerksV1PagesById
//      * @request PUT:/lol-perks/v1/pages/{id}
//      */
//     putLolPerksV1PagesById: (id: any, data: LolPerksPerkPageResource, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-perks/v1/pages/${id}`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name DeleteLolPerksV1PagesByIdAutoModifiedSelections
//      * @request DELETE:/lol-perks/v1/pages/{id}/auto-modified-selections
//      */
//     deleteLolPerksV1PagesByIdAutoModifiedSelections: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-perks/v1/pages/${id}/auto-modified-selections`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1Perks
//      * @request GET:/lol-perks/v1/perks
//      */
//     getLolPerksV1Perks: (params: RequestParams = {}) =>
//       this.request<LolPerksPerkUIPerk[], any>({
//         path: `/lol-perks/v1/perks`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name PutLolPerksV1PerksAckGameplayUpdated
//      * @request PUT:/lol-perks/v1/perks/ack-gameplay-updated
//      */
//     putLolPerksV1PerksAckGameplayUpdated: (data: number[], params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-perks/v1/perks/ack-gameplay-updated`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1PerksDisabled
//      * @request GET:/lol-perks/v1/perks/disabled
//      */
//     getLolPerksV1PerksDisabled: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-perks/v1/perks/disabled`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1PerksGameplayUpdated
//      * @request GET:/lol-perks/v1/perks/gameplay-updated
//      */
//     getLolPerksV1PerksGameplayUpdated: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-perks/v1/perks/gameplay-updated`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1SchemaVersion
//      * @request GET:/lol-perks/v1/schema-version
//      */
//     getLolPerksV1SchemaVersion: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/lol-perks/v1/schema-version`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1Servicesettings
//      * @request GET:/lol-perks/v1/servicesettings
//      */
//     getLolPerksV1Servicesettings: (params: RequestParams = {}) =>
//       this.request<LolPerksServiceSettings, any>({
//         path: `/lol-perks/v1/servicesettings`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1Settings
//      * @request GET:/lol-perks/v1/settings
//      */
//     getLolPerksV1Settings: (params: RequestParams = {}) =>
//       this.request<LolPerksUISettings, any>({
//         path: `/lol-perks/v1/settings`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name PutLolPerksV1Settings
//      * @request PUT:/lol-perks/v1/settings
//      */
//     putLolPerksV1Settings: (data: LolPerksUISettings, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-perks/v1/settings`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1ShowAutoModifiedPagesNotification
//      * @request GET:/lol-perks/v1/show-auto-modified-pages-notification
//      */
//     getLolPerksV1ShowAutoModifiedPagesNotification: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-perks/v1/show-auto-modified-pages-notification`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name PostLolPerksV1ShowAutoModifiedPagesNotification
//      * @request POST:/lol-perks/v1/show-auto-modified-pages-notification
//      */
//     postLolPerksV1ShowAutoModifiedPagesNotification: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-perks/v1/show-auto-modified-pages-notification`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name GetLolPerksV1Styles
//      * @request GET:/lol-perks/v1/styles
//      */
//     getLolPerksV1Styles: (params: RequestParams = {}) =>
//       this.request<LolPerksPerkUIStyle[], any>({
//         path: `/lol-perks/v1/styles`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-perks
//      * @name PostLolPerksV1UpdatePageOrder
//      * @request POST:/lol-perks/v1/update-page-order
//      */
//     postLolPerksV1UpdatePageOrder: (
//       data: LolPerksUpdatePageOrderRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-perks/v1/update-page-order`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolPersonalizedOffers = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-personalized-offers
//      * @name GetLolPersonalizedOffersV1Offers
//      * @request GET:/lol-personalized-offers/v1/offers
//      */
//     getLolPersonalizedOffersV1Offers: (params: RequestParams = {}) =>
//       this.request<LolPersonalizedOffersUIOffer[], any>({
//         path: `/lol-personalized-offers/v1/offers`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-personalized-offers
//      * @name PostLolPersonalizedOffersV1OffersByIdPurchase
//      * @request POST:/lol-personalized-offers/v1/offers/{id}/purchase
//      */
//     postLolPersonalizedOffersV1OffersByIdPurchase: (id: any, params: RequestParams = {}) =>
//       this.request<LolPersonalizedOffersPurchaseResponse, any>({
//         path: `/lol-personalized-offers/v1/offers/${id}/purchase`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-personalized-offers
//      * @name PostLolPersonalizedOffersV1OffersByIdReveal
//      * @request POST:/lol-personalized-offers/v1/offers/{id}/reveal
//      */
//     postLolPersonalizedOffersV1OffersByIdReveal: (id: any, params: RequestParams = {}) =>
//       this.request<LolPersonalizedOffersUIOffer[], any>({
//         path: `/lol-personalized-offers/v1/offers/${id}/reveal`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-personalized-offers
//      * @name GetLolPersonalizedOffersV1Ready
//      * @request GET:/lol-personalized-offers/v1/ready
//      */
//     getLolPersonalizedOffersV1Ready: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-personalized-offers/v1/ready`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-personalized-offers
//      * @name GetLolPersonalizedOffersV1Status
//      * @request GET:/lol-personalized-offers/v1/status
//      */
//     getLolPersonalizedOffersV1Status: (params: RequestParams = {}) =>
//       this.request<LolPersonalizedOffersUIStatus, any>({
//         path: `/lol-personalized-offers/v1/status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-personalized-offers
//      * @name GetLolPersonalizedOffersV1Themed
//      * @request GET:/lol-personalized-offers/v1/themed
//      */
//     getLolPersonalizedOffersV1Themed: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-personalized-offers/v1/themed`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolPft = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-pft
//      * @name PostLolPftV2Events
//      * @request POST:/lol-pft/v2/events
//      */
//     postLolPftV2Events: (data: LolPftPFTEvent, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-pft/v2/events`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-pft
//      * @name GetLolPftV2Survey
//      * @request GET:/lol-pft/v2/survey
//      */
//     getLolPftV2Survey: (params: RequestParams = {}) =>
//       this.request<LolPftPFTSurvey, any>({
//         path: `/lol-pft/v2/survey`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-pft
//      * @name PostLolPftV2Survey
//      * @request POST:/lol-pft/v2/survey
//      */
//     postLolPftV2Survey: (data: LolPftPFTSurvey, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-pft/v2/survey`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       })
//   }
//   lolPlatformConfig = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-platform-config
//      * @name GetLolPlatformConfigV1InitialConfigurationComplete
//      * @request GET:/lol-platform-config/v1/initial-configuration-complete
//      */
//     getLolPlatformConfigV1InitialConfigurationComplete: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-platform-config/v1/initial-configuration-complete`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-platform-config
//      * @name GetLolPlatformConfigV1Namespaces
//      * @request GET:/lol-platform-config/v1/namespaces
//      */
//     getLolPlatformConfigV1Namespaces: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-platform-config/v1/namespaces`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-platform-config
//      * @name GetLolPlatformConfigV1NamespacesByNs
//      * @request GET:/lol-platform-config/v1/namespaces/{ns}
//      */
//     getLolPlatformConfigV1NamespacesByNs: (ns: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-platform-config/v1/namespaces/${ns}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-platform-config
//      * @name GetLolPlatformConfigV1NamespacesByNsByKey
//      * @request GET:/lol-platform-config/v1/namespaces/{ns}/{key}
//      */
//     getLolPlatformConfigV1NamespacesByNsByKey: (ns: any, key: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-platform-config/v1/namespaces/${ns}/${key}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolPlayerBehavior = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-behavior
//      * @name GetLolPlayerBehaviorV1Ban
//      * @request GET:/lol-player-behavior/v1/ban
//      */
//     getLolPlayerBehaviorV1Ban: (params: RequestParams = {}) =>
//       this.request<LolPlayerBehaviorBanNotification, any>({
//         path: `/lol-player-behavior/v1/ban`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-behavior
//      * @name GetLolPlayerBehaviorV1ChatRestriction
//      * @request GET:/lol-player-behavior/v1/chat-restriction
//      */
//     getLolPlayerBehaviorV1ChatRestriction: (params: RequestParams = {}) =>
//       this.request<LolPlayerBehaviorRestrictionNotification, any>({
//         path: `/lol-player-behavior/v1/chat-restriction`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-behavior
//      * @name DeleteLolPlayerBehaviorV1CodeOfConductNotification
//      * @request DELETE:/lol-player-behavior/v1/code-of-conduct-notification
//      */
//     deleteLolPlayerBehaviorV1CodeOfConductNotification: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-player-behavior/v1/code-of-conduct-notification`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-behavior
//      * @name GetLolPlayerBehaviorV1CodeOfConductNotification
//      * @request GET:/lol-player-behavior/v1/code-of-conduct-notification
//      */
//     getLolPlayerBehaviorV1CodeOfConductNotification: (params: RequestParams = {}) =>
//       this.request<LolPlayerBehaviorCodeOfConductNotification, any>({
//         path: `/lol-player-behavior/v1/code-of-conduct-notification`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-behavior
//      * @name GetLolPlayerBehaviorV1Config
//      * @request GET:/lol-player-behavior/v1/config
//      */
//     getLolPlayerBehaviorV1Config: (params: RequestParams = {}) =>
//       this.request<LolPlayerBehaviorPlayerBehaviorConfig, any>({
//         path: `/lol-player-behavior/v1/config`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-behavior
//      * @name GetLolPlayerBehaviorV1RankedRestriction
//      * @request GET:/lol-player-behavior/v1/ranked-restriction
//      */
//     getLolPlayerBehaviorV1RankedRestriction: (params: RequestParams = {}) =>
//       this.request<LolPlayerBehaviorRestrictionNotification, any>({
//         path: `/lol-player-behavior/v1/ranked-restriction`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-behavior
//      * @name GetLolPlayerBehaviorV1ReformCard
//      * @request GET:/lol-player-behavior/v1/reform-card
//      */
//     getLolPlayerBehaviorV1ReformCard: (params: RequestParams = {}) =>
//       this.request<LolPlayerBehaviorReformCard, any>({
//         path: `/lol-player-behavior/v1/reform-card`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-behavior
//      * @name GetLolPlayerBehaviorV1ReporterFeedback
//      * @request GET:/lol-player-behavior/v1/reporter-feedback
//      */
//     getLolPlayerBehaviorV1ReporterFeedback: (params: RequestParams = {}) =>
//       this.request<LolPlayerBehaviorReporterFeedback[], any>({
//         path: `/lol-player-behavior/v1/reporter-feedback`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-behavior
//      * @name DeleteLolPlayerBehaviorV1ReporterFeedbackById
//      * @request DELETE:/lol-player-behavior/v1/reporter-feedback/{id}
//      */
//     deleteLolPlayerBehaviorV1ReporterFeedbackById: (id: any, params: RequestParams = {}) =>
//       this.request<LolPlayerBehaviorReporterFeedback, any>({
//         path: `/lol-player-behavior/v1/reporter-feedback/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-behavior
//      * @name GetLolPlayerBehaviorV1ReporterFeedbackById
//      * @request GET:/lol-player-behavior/v1/reporter-feedback/{id}
//      */
//     getLolPlayerBehaviorV1ReporterFeedbackById: (id: any, params: RequestParams = {}) =>
//       this.request<LolPlayerBehaviorReporterFeedback, any>({
//         path: `/lol-player-behavior/v1/reporter-feedback/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-behavior
//      * @name GetLolPlayerBehaviorV2ReformCard
//      * @request GET:/lol-player-behavior/v2/reform-card
//      */
//     getLolPlayerBehaviorV2ReformCard: (params: RequestParams = {}) =>
//       this.request<LolPlayerBehaviorReformCardV2, any>({
//         path: `/lol-player-behavior/v2/reform-card`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolPlayerLevelUp = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-level-up
//      * @name GetLolPlayerLevelUpV1LevelUp
//      * @request GET:/lol-player-level-up/v1/level-up
//      */
//     getLolPlayerLevelUpV1LevelUp: (params: RequestParams = {}) =>
//       this.request<LolPlayerLevelUpPlayerLevelUpEvent, any>({
//         path: `/lol-player-level-up/v1/level-up`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-level-up
//      * @name GetLolPlayerLevelUpV1LevelUpNotificationsByPluginName
//      * @request GET:/lol-player-level-up/v1/level-up-notifications/{pluginName}
//      */
//     getLolPlayerLevelUpV1LevelUpNotificationsByPluginName: (
//       pluginName: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolPlayerLevelUpPlayerLevelUpEventAck, any>({
//         path: `/lol-player-level-up/v1/level-up-notifications/${pluginName}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-level-up
//      * @name PostLolPlayerLevelUpV1LevelUpNotificationsByPluginName
//      * @request POST:/lol-player-level-up/v1/level-up-notifications/{pluginName}
//      */
//     postLolPlayerLevelUpV1LevelUpNotificationsByPluginName: (
//       pluginName: any,
//       data: LolPlayerLevelUpPlayerLevelUpEventAck,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-player-level-up/v1/level-up-notifications/${pluginName}`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       })
//   }
//   lolPlayerMessaging = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-messaging
//      * @name GetLolPlayerMessagingV1CelebrationNotification
//      * @request GET:/lol-player-messaging/v1/celebration/notification
//      */
//     getLolPlayerMessagingV1CelebrationNotification: (params: RequestParams = {}) =>
//       this.request<LolPlayerMessagingDynamicCelebrationMessagingNotificationResource, any>({
//         path: `/lol-player-messaging/v1/celebration/notification`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-messaging
//      * @name DeleteLolPlayerMessagingV1CelebrationNotificationByIdAcknowledge
//      * @request DELETE:/lol-player-messaging/v1/celebration/notification/{id}/acknowledge
//      */
//     deleteLolPlayerMessagingV1CelebrationNotificationByIdAcknowledge: (
//       id: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-player-messaging/v1/celebration/notification/${id}/acknowledge`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-messaging
//      * @name GetLolPlayerMessagingV1Notification
//      * @request GET:/lol-player-messaging/v1/notification
//      */
//     getLolPlayerMessagingV1Notification: (params: RequestParams = {}) =>
//       this.request<LolPlayerMessagingPlayerMessagingNotificationResource, any>({
//         path: `/lol-player-messaging/v1/notification`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-messaging
//      * @name DeleteLolPlayerMessagingV1NotificationByIdAcknowledge
//      * @request DELETE:/lol-player-messaging/v1/notification/{id}/acknowledge
//      */
//     deleteLolPlayerMessagingV1NotificationByIdAcknowledge: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-player-messaging/v1/notification/${id}/acknowledge`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       })
//   }
//   lolPlayerPreferences = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-preferences
//      * @name PostLolPlayerPreferencesV1Hash
//      * @request POST:/lol-player-preferences/v1/hash
//      */
//     postLolPlayerPreferencesV1Hash: (data: string, params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-player-preferences/v1/hash`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-preferences
//      * @name PostLolPlayerPreferencesV1PlayerPreferencesEndpointOverride
//      * @request POST:/lol-player-preferences/v1/player-preferences-endpoint-override
//      */
//     postLolPlayerPreferencesV1PlayerPreferencesEndpointOverride: (
//       data: LolPlayerPreferencesPlayerPreferencesEndpoint,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-player-preferences/v1/player-preferences-endpoint-override`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-preferences
//      * @name GetLolPlayerPreferencesV1PlayerPreferencesReady
//      * @request GET:/lol-player-preferences/v1/player-preferences-ready
//      */
//     getLolPlayerPreferencesV1PlayerPreferencesReady: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-player-preferences/v1/player-preferences-ready`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-preferences
//      * @name PutLolPlayerPreferencesV1Preference
//      * @request PUT:/lol-player-preferences/v1/preference
//      */
//     putLolPlayerPreferencesV1Preference: (
//       data: LolPlayerPreferencesPlayerPreferences,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-player-preferences/v1/preference`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-preferences
//      * @name GetLolPlayerPreferencesV1PreferenceByType
//      * @request GET:/lol-player-preferences/v1/preference/{type}
//      */
//     getLolPlayerPreferencesV1PreferenceByType: (
//       type: any,
//       query?: {
//         hash?: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-player-preferences/v1/preference/${type}`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   lolPlayerReportSender = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-report-sender
//      * @name PostLolPlayerReportSenderV1ChampSelectReportsPuuidByPuuidCategoryByCategory
//      * @request POST:/lol-player-report-sender/v1/champ-select-reports/puuid/{puuid}/category/{category}
//      */
//     postLolPlayerReportSenderV1ChampSelectReportsPuuidByPuuidCategoryByCategory: (
//       puuid: any,
//       category: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-player-report-sender/v1/champ-select-reports/puuid/${puuid}/category/${category}`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-player-report-sender
//      * @name PostLolPlayerReportSenderV1EndOfGameReports
//      * @request POST:/lol-player-report-sender/v1/end-of-game-reports
//      */
//     postLolPlayerReportSenderV1EndOfGameReports: (
//       data: LolPlayerReportSenderEndOfGamePlayerReport,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-player-report-sender/v1/end-of-game-reports`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolPreEndOfGame = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-pre-end-of-game
//      * @name PostLolPreEndOfGameV1CompleteBySequenceEventName
//      * @request POST:/lol-pre-end-of-game/v1/complete/{sequenceEventName}
//      */
//     postLolPreEndOfGameV1CompleteBySequenceEventName: (
//       sequenceEventName: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-pre-end-of-game/v1/complete/${sequenceEventName}`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-pre-end-of-game
//      * @name GetLolPreEndOfGameV1CurrentSequenceEvent
//      * @request GET:/lol-pre-end-of-game/v1/currentSequenceEvent
//      */
//     getLolPreEndOfGameV1CurrentSequenceEvent: (params: RequestParams = {}) =>
//       this.request<LolPreEndOfGameSequenceEvent, any>({
//         path: `/lol-pre-end-of-game/v1/currentSequenceEvent`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-pre-end-of-game
//      * @name DeleteLolPreEndOfGameV1RegistrationBySequenceEventName
//      * @request DELETE:/lol-pre-end-of-game/v1/registration/{sequenceEventName}
//      */
//     deleteLolPreEndOfGameV1RegistrationBySequenceEventName: (
//       sequenceEventName: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-pre-end-of-game/v1/registration/${sequenceEventName}`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-pre-end-of-game
//      * @name PostLolPreEndOfGameV1RegistrationBySequenceEventNameByPriority
//      * @request POST:/lol-pre-end-of-game/v1/registration/{sequenceEventName}/{priority}
//      */
//     postLolPreEndOfGameV1RegistrationBySequenceEventNameByPriority: (
//       sequenceEventName: any,
//       priority: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-pre-end-of-game/v1/registration/${sequenceEventName}/${priority}`,
//         method: 'POST',
//         ...params
//       })
//   }
//   lolPremadeVoice = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name GetLolPremadeVoiceV1Availability
//      * @request GET:/lol-premade-voice/v1/availability
//      */
//     getLolPremadeVoiceV1Availability: (params: RequestParams = {}) =>
//       this.request<LolPremadeVoiceVoiceAvailability, any>({
//         path: `/lol-premade-voice/v1/availability`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name GetLolPremadeVoiceV1Capturedevices
//      * @request GET:/lol-premade-voice/v1/capturedevices
//      */
//     getLolPremadeVoiceV1Capturedevices: (params: RequestParams = {}) =>
//       this.request<LolPremadeVoiceDeviceResource[], any>({
//         path: `/lol-premade-voice/v1/capturedevices`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PutLolPremadeVoiceV1Capturedevices
//      * @request PUT:/lol-premade-voice/v1/capturedevices
//      */
//     putLolPremadeVoiceV1Capturedevices: (data: string, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/capturedevices`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name GetLolPremadeVoiceV1FirstExperience
//      * @request GET:/lol-premade-voice/v1/first-experience
//      */
//     getLolPremadeVoiceV1FirstExperience: (params: RequestParams = {}) =>
//       this.request<LolPremadeVoiceFirstExperience, any>({
//         path: `/lol-premade-voice/v1/first-experience`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PostLolPremadeVoiceV1FirstExperienceGame
//      * @request POST:/lol-premade-voice/v1/first-experience/game
//      */
//     postLolPremadeVoiceV1FirstExperienceGame: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/first-experience/game`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PostLolPremadeVoiceV1FirstExperienceLcu
//      * @request POST:/lol-premade-voice/v1/first-experience/lcu
//      */
//     postLolPremadeVoiceV1FirstExperienceLcu: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/first-experience/lcu`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PostLolPremadeVoiceV1FirstExperienceReset
//      * @request POST:/lol-premade-voice/v1/first-experience/reset
//      */
//     postLolPremadeVoiceV1FirstExperienceReset: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/first-experience/reset`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PostLolPremadeVoiceV1GameClientUpdatedPttKey
//      * @request POST:/lol-premade-voice/v1/gameClientUpdatedPTTKey
//      */
//     postLolPremadeVoiceV1GameClientUpdatedPttKey: (data: string, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/gameClientUpdatedPTTKey`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name DeleteLolPremadeVoiceV1MicTest
//      * @request DELETE:/lol-premade-voice/v1/mic-test
//      */
//     deleteLolPremadeVoiceV1MicTest: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-premade-voice/v1/mic-test`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name GetLolPremadeVoiceV1MicTest
//      * @request GET:/lol-premade-voice/v1/mic-test
//      */
//     getLolPremadeVoiceV1MicTest: (params: RequestParams = {}) =>
//       this.request<LolPremadeVoiceAudioPropertiesResource, any>({
//         path: `/lol-premade-voice/v1/mic-test`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PostLolPremadeVoiceV1MicTest
//      * @request POST:/lol-premade-voice/v1/mic-test
//      */
//     postLolPremadeVoiceV1MicTest: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-premade-voice/v1/mic-test`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name GetLolPremadeVoiceV1ParticipantRecords
//      * @request GET:/lol-premade-voice/v1/participant-records
//      */
//     getLolPremadeVoiceV1ParticipantRecords: (params: RequestParams = {}) =>
//       this.request<LolPremadeVoicePremadeVoiceParticipantDto[], any>({
//         path: `/lol-premade-voice/v1/participant-records`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name GetLolPremadeVoiceV1Participants
//      * @request GET:/lol-premade-voice/v1/participants
//      */
//     getLolPremadeVoiceV1Participants: (params: RequestParams = {}) =>
//       this.request<LolPremadeVoicePremadeVoiceParticipantDto[], any>({
//         path: `/lol-premade-voice/v1/participants`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PutLolPremadeVoiceV1ParticipantsByPuuidMute
//      * @request PUT:/lol-premade-voice/v1/participants/{puuid}/mute
//      */
//     putLolPremadeVoiceV1ParticipantsByPuuidMute: (
//       puuid: any,
//       data: number,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/participants/${puuid}/mute`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PutLolPremadeVoiceV1ParticipantsByPuuidVolume
//      * @request PUT:/lol-premade-voice/v1/participants/{puuid}/volume
//      */
//     putLolPremadeVoiceV1ParticipantsByPuuidVolume: (
//       puuid: any,
//       data: number,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/participants/${puuid}/volume`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PostLolPremadeVoiceV1PushToTalkCheckAvailable
//      * @request POST:/lol-premade-voice/v1/push-to-talk/check-available
//      */
//     postLolPremadeVoiceV1PushToTalkCheckAvailable: (data: number, params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-premade-voice/v1/push-to-talk/check-available`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PutLolPremadeVoiceV1SelfActivationSensitivity
//      * @request PUT:/lol-premade-voice/v1/self/activationSensitivity
//      */
//     putLolPremadeVoiceV1SelfActivationSensitivity: (data: number, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/self/activationSensitivity`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PutLolPremadeVoiceV1SelfInputMode
//      * @request PUT:/lol-premade-voice/v1/self/inputMode
//      */
//     putLolPremadeVoiceV1SelfInputMode: (
//       data: LolPremadeVoiceInputMode,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/self/inputMode`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PutLolPremadeVoiceV1SelfMicLevel
//      * @request PUT:/lol-premade-voice/v1/self/micLevel
//      */
//     putLolPremadeVoiceV1SelfMicLevel: (data: number, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/self/micLevel`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PutLolPremadeVoiceV1SelfMute
//      * @request PUT:/lol-premade-voice/v1/self/mute
//      */
//     putLolPremadeVoiceV1SelfMute: (data: number, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/self/mute`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name DeleteLolPremadeVoiceV1Session
//      * @request DELETE:/lol-premade-voice/v1/session
//      */
//     deleteLolPremadeVoiceV1Session: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/session`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PostLolPremadeVoiceV1Session
//      * @request POST:/lol-premade-voice/v1/session
//      */
//     postLolPremadeVoiceV1Session: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/session`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name GetLolPremadeVoiceV1Settings
//      * @request GET:/lol-premade-voice/v1/settings
//      */
//     getLolPremadeVoiceV1Settings: (params: RequestParams = {}) =>
//       this.request<LolPremadeVoiceSettingsResource, any>({
//         path: `/lol-premade-voice/v1/settings`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-premade-voice
//      * @name PostLolPremadeVoiceV1SettingsReset
//      * @request POST:/lol-premade-voice/v1/settings/reset
//      */
//     postLolPremadeVoiceV1SettingsReset: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-premade-voice/v1/settings/reset`,
//         method: 'POST',
//         ...params
//       })
//   }
//   lolPublishingContent = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-publishing-content
//      * @name GetLolPublishingContentV1Ready
//      * @request GET:/lol-publishing-content/v1/ready
//      */
//     getLolPublishingContentV1Ready: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-publishing-content/v1/ready`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-publishing-content
//      * @name GetLolPublishingContentV1TftHubCards
//      * @request GET:/lol-publishing-content/v1/tft-hub-cards
//      */
//     getLolPublishingContentV1TftHubCards: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-publishing-content/v1/tft-hub-cards`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolPurchaseWidget = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-purchase-widget
//      * @name GetLolPurchaseWidgetV1Configuration
//      * @request GET:/lol-purchase-widget/v1/configuration
//      */
//     getLolPurchaseWidgetV1Configuration: (params: RequestParams = {}) =>
//       this.request<LolPurchaseWidgetPurchaseWidgetConfig, any>({
//         path: `/lol-purchase-widget/v1/configuration`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-purchase-widget
//      * @name GetLolPurchaseWidgetV1OrderNotifications
//      * @request GET:/lol-purchase-widget/v1/order-notifications
//      */
//     getLolPurchaseWidgetV1OrderNotifications: (params: RequestParams = {}) =>
//       this.request<LolPurchaseWidgetOrderNotificationResource[], any>({
//         path: `/lol-purchase-widget/v1/order-notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-purchase-widget
//      * @name GetLolPurchaseWidgetV1PurchasableItem
//      * @request GET:/lol-purchase-widget/v1/purchasable-item
//      */
//     getLolPurchaseWidgetV1PurchasableItem: (
//       query: {
//         inventoryType: string
//         /** @format int64 */
//         itemId: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolPurchaseWidgetPurchasableItem, any>({
//         path: `/lol-purchase-widget/v1/purchasable-item`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-purchase-widget
//      * @name PostLolPurchaseWidgetV1PurchasableItemsByInventoryType
//      * @request POST:/lol-purchase-widget/v1/purchasable-items/{inventoryType}
//      */
//     postLolPurchaseWidgetV1PurchasableItemsByInventoryType: (
//       inventoryType: any,
//       data: number[],
//       params: RequestParams = {}
//     ) =>
//       this.request<LolPurchaseWidgetItemChoices, any>({
//         path: `/lol-purchase-widget/v1/purchasable-items/${inventoryType}`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-purchase-widget
//      * @name PostLolPurchaseWidgetV2PurchaseItems
//      * @request POST:/lol-purchase-widget/v2/purchaseItems
//      */
//     postLolPurchaseWidgetV2PurchaseItems: (
//       data: LolPurchaseWidgetPurchaseRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-purchase-widget/v2/purchaseItems`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-purchase-widget
//      * @name GetLolPurchaseWidgetV3BaseSkinLineDataByOfferId
//      * @request GET:/lol-purchase-widget/v3/base-skin-line-data/{offerId}
//      */
//     getLolPurchaseWidgetV3BaseSkinLineDataByOfferId: (offerId: any, params: RequestParams = {}) =>
//       this.request<LolPurchaseWidgetBaseSkinLineDto, any>({
//         path: `/lol-purchase-widget/v3/base-skin-line-data/${offerId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-purchase-widget
//      * @name GetLolPurchaseWidgetV3PurchaseOfferOrderStatuses
//      * @request GET:/lol-purchase-widget/v3/purchase-offer-order-statuses
//      */
//     getLolPurchaseWidgetV3PurchaseOfferOrderStatuses: (params: RequestParams = {}) =>
//       this.request<LolPurchaseWidgetPurchaseOfferOrderStatuses, any>({
//         path: `/lol-purchase-widget/v3/purchase-offer-order-statuses`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-purchase-widget
//      * @name PostLolPurchaseWidgetV3PurchaseOffer
//      * @request POST:/lol-purchase-widget/v3/purchaseOffer
//      */
//     postLolPurchaseWidgetV3PurchaseOffer: (
//       data: LolPurchaseWidgetPurchaseOfferRequestV3,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolPurchaseWidgetPurchaseOfferResponseV3, any>({
//         path: `/lol-purchase-widget/v3/purchaseOffer`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-purchase-widget
//      * @name PostLolPurchaseWidgetV3ValidateOffer
//      * @request POST:/lol-purchase-widget/v3/validateOffer
//      */
//     postLolPurchaseWidgetV3ValidateOffer: (
//       data: LolPurchaseWidgetValidateOfferRequestV3,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolPurchaseWidgetValidateOfferResponseV3, any>({
//         path: `/lol-purchase-widget/v3/validateOffer`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolRanked = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1ApexLeaguesByQueueTypeByTier
//      * @request GET:/lol-ranked/v1/apex-leagues/{queueType}/{tier}
//      */
//     getLolRankedV1ApexLeaguesByQueueTypeByTier: (
//       queueType: any,
//       tier: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolRankedLeagueLadderInfo, any>({
//         path: `/lol-ranked/v1/apex-leagues/${queueType}/${tier}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1ChallengerLaddersEnabled
//      * @request GET:/lol-ranked/v1/challenger-ladders-enabled
//      */
//     getLolRankedV1ChallengerLaddersEnabled: (params: RequestParams = {}) =>
//       this.request<string[], any>({
//         path: `/lol-ranked/v1/challenger-ladders-enabled`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1CurrentLpChangeNotification
//      * @request GET:/lol-ranked/v1/current-lp-change-notification
//      */
//     getLolRankedV1CurrentLpChangeNotification: (params: RequestParams = {}) =>
//       this.request<LolRankedLcuLeagueNotification, any>({
//         path: `/lol-ranked/v1/current-lp-change-notification`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1CurrentRankedStats
//      * @request GET:/lol-ranked/v1/current-ranked-stats
//      */
//     getLolRankedV1CurrentRankedStats: (params: RequestParams = {}) =>
//       this.request<LolRankedRankedStats, any>({
//         path: `/lol-ranked/v1/current-ranked-stats`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1EosNotifications
//      * @request GET:/lol-ranked/v1/eos-notifications
//      */
//     getLolRankedV1EosNotifications: (params: RequestParams = {}) =>
//       this.request<LolRankedEosNotificationResource[], any>({
//         path: `/lol-ranked/v1/eos-notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name PostLolRankedV1EosNotificationsByIdAcknowledge
//      * @request POST:/lol-ranked/v1/eos-notifications/{id}/acknowledge
//      */
//     postLolRankedV1EosNotificationsByIdAcknowledge: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-ranked/v1/eos-notifications/${id}/acknowledge`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1EosRewards
//      * @request GET:/lol-ranked/v1/eos-rewards
//      */
//     getLolRankedV1EosRewards: (params: RequestParams = {}) =>
//       this.request<LolRankedEosRewardsConfig, any>({
//         path: `/lol-ranked/v1/eos-rewards`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1LeagueLaddersByPuuid
//      * @request GET:/lol-ranked/v1/league-ladders/{puuid}
//      */
//     getLolRankedV1LeagueLaddersByPuuid: (puuid: any, params: RequestParams = {}) =>
//       this.request<LolRankedLeagueLadderInfo[], any>({
//         path: `/lol-ranked/v1/league-ladders/${puuid}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1Notifications
//      * @request GET:/lol-ranked/v1/notifications
//      */
//     getLolRankedV1Notifications: (params: RequestParams = {}) =>
//       this.request<LolRankedLcuLeagueNotification[], any>({
//         path: `/lol-ranked/v1/notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name PostLolRankedV1NotificationsByIdAcknowledge
//      * @request POST:/lol-ranked/v1/notifications/{id}/acknowledge
//      */
//     postLolRankedV1NotificationsByIdAcknowledge: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-ranked/v1/notifications/${id}/acknowledge`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1RankedStats
//      * @request GET:/lol-ranked/v1/ranked-stats
//      */
//     getLolRankedV1RankedStats: (
//       query: {
//         puuids: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, LolRankedRankedStats>, any>({
//         path: `/lol-ranked/v1/ranked-stats`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1RankedStatsByPuuid
//      * @request GET:/lol-ranked/v1/ranked-stats/{puuid}
//      */
//     getLolRankedV1RankedStatsByPuuid: (puuid: any, params: RequestParams = {}) =>
//       this.request<LolRankedRankedStats, any>({
//         path: `/lol-ranked/v1/ranked-stats/${puuid}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1RatedLadderByQueueType
//      * @request GET:/lol-ranked/v1/rated-ladder/{queueType}
//      */
//     getLolRankedV1RatedLadderByQueueType: (queueType: any, params: RequestParams = {}) =>
//       this.request<LolRankedRatedLadderInfo, any>({
//         path: `/lol-ranked/v1/rated-ladder/${queueType}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1SignedRankedStats
//      * @request GET:/lol-ranked/v1/signed-ranked-stats
//      */
//     getLolRankedV1SignedRankedStats: (params: RequestParams = {}) =>
//       this.request<LolRankedSignedRankedStatsDTO, any>({
//         path: `/lol-ranked/v1/signed-ranked-stats`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1SocialLeaderboardRankedQueueStatsForPuuids
//      * @request GET:/lol-ranked/v1/social-leaderboard-ranked-queue-stats-for-puuids
//      */
//     getLolRankedV1SocialLeaderboardRankedQueueStatsForPuuids: (
//       query: {
//         queueType:
//           | 'NONE'
//           | 'RANKED_SOLO_5x5'
//           | 'RANKED_FLEX_SR'
//           | 'RANKED_FLEX_TT'
//           | 'RANKED_TFT'
//           | 'RANKED_TFT_TURBO'
//           | 'RANKED_TFT_PAIRS'
//         puuids: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, LolRankedSocialLeaderboardRankedQueueStats>, any>({
//         path: `/lol-ranked/v1/social-leaderboard-ranked-queue-stats-for-puuids`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1SplitsConfig
//      * @request GET:/lol-ranked/v1/splits-config
//      */
//     getLolRankedV1SplitsConfig: (params: RequestParams = {}) =>
//       this.request<LolRankedRewardsInfo, any>({
//         path: `/lol-ranked/v1/splits-config`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV1TopRatedLaddersEnabled
//      * @request GET:/lol-ranked/v1/top-rated-ladders-enabled
//      */
//     getLolRankedV1TopRatedLaddersEnabled: (params: RequestParams = {}) =>
//       this.request<string[], any>({
//         path: `/lol-ranked/v1/top-rated-ladders-enabled`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-ranked
//      * @name GetLolRankedV2Tiers
//      * @request GET:/lol-ranked/v2/tiers
//      */
//     getLolRankedV2Tiers: (
//       query: {
//         summonerIds: number[]
//         queueTypes: LolRankedLeagueQueueType[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolRankedParticipantTiers[], any>({
//         path: `/lol-ranked/v2/tiers`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   lolRegalia = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-regalia
//      * @name GetLolRegaliaV2Config
//      * @request GET:/lol-regalia/v2/config
//      */
//     getLolRegaliaV2Config: (params: RequestParams = {}) =>
//       this.request<LolRegaliaRegaliaFrontendConfig, any>({
//         path: `/lol-regalia/v2/config`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-regalia
//      * @name GetLolRegaliaV2CurrentSummonerRegalia
//      * @request GET:/lol-regalia/v2/current-summoner/regalia
//      */
//     getLolRegaliaV2CurrentSummonerRegalia: (params: RequestParams = {}) =>
//       this.request<LolRegaliaRegaliaWithPreferences, any>({
//         path: `/lol-regalia/v2/current-summoner/regalia`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-regalia
//      * @name PutLolRegaliaV2CurrentSummonerRegalia
//      * @request PUT:/lol-regalia/v2/current-summoner/regalia
//      */
//     putLolRegaliaV2CurrentSummonerRegalia: (
//       data: LolRegaliaRegaliaPreferences,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolRegaliaRegaliaWithPreferences, any>({
//         path: `/lol-regalia/v2/current-summoner/regalia`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-regalia
//      * @name GetLolRegaliaV2SummonersBySummonerIdQueuesByQueuePositionsByPositionRegalia
//      * @request GET:/lol-regalia/v2/summoners/{summonerId}/queues/{queue}/positions/{position}/regalia
//      */
//     getLolRegaliaV2SummonersBySummonerIdQueuesByQueuePositionsByPositionRegalia: (
//       summonerId: any,
//       queue: any,
//       position: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolRegaliaRegalia, any>({
//         path: `/lol-regalia/v2/summoners/${summonerId}/queues/${queue}/positions/${position}/regalia`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-regalia
//      * @name GetLolRegaliaV2SummonersBySummonerIdQueuesByQueueRegalia
//      * @request GET:/lol-regalia/v2/summoners/{summonerId}/queues/{queue}/regalia
//      */
//     getLolRegaliaV2SummonersBySummonerIdQueuesByQueueRegalia: (
//       summonerId: any,
//       queue: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolRegaliaRegalia, any>({
//         path: `/lol-regalia/v2/summoners/${summonerId}/queues/${queue}/regalia`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-regalia
//      * @name GetLolRegaliaV2SummonersBySummonerIdRegalia
//      * @request GET:/lol-regalia/v2/summoners/{summonerId}/regalia
//      */
//     getLolRegaliaV2SummonersBySummonerIdRegalia: (
//       summonerId: any,
//       query: {
//         hovercard: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolRegaliaRegalia, any>({
//         path: `/lol-regalia/v2/summoners/${summonerId}/regalia`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-regalia
//      * @name GetLolRegaliaV2SummonersBySummonerIdRegaliaAsync
//      * @request GET:/lol-regalia/v2/summoners/{summonerId}/regalia/async
//      */
//     getLolRegaliaV2SummonersBySummonerIdRegaliaAsync: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolRegaliaRegaliaAsync, any>({
//         path: `/lol-regalia/v2/summoners/${summonerId}/regalia/async`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolReplays = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-replays
//      * @name GetLolReplaysV1Configuration
//      * @request GET:/lol-replays/v1/configuration
//      */
//     getLolReplaysV1Configuration: (params: RequestParams = {}) =>
//       this.request<LolReplaysReplaysConfiguration, any>({
//         path: `/lol-replays/v1/configuration`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-replays
//      * @name GetLolReplaysV1MetadataByGameId
//      * @request GET:/lol-replays/v1/metadata/{gameId}
//      */
//     getLolReplaysV1MetadataByGameId: (gameId: any, params: RequestParams = {}) =>
//       this.request<LolReplaysReplayMetadata, any>({
//         path: `/lol-replays/v1/metadata/${gameId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-replays
//      * @name PostLolReplaysV1MetadataByGameIdCreateGameVersionByGameVersionGameTypeByGameTypeQueueIdByQueueId
//      * @request POST:/lol-replays/v1/metadata/{gameId}/create/gameVersion/{gameVersion}/gameType/{gameType}/queueId/{queueId}
//      */
//     postLolReplaysV1MetadataByGameIdCreateGameVersionByGameVersionGameTypeByGameTypeQueueIdByQueueId:
//       (gameId: any, gameVersion: any, gameType: any, queueId: any, params: RequestParams = {}) =>
//         this.request<void, any>({
//           path: `/lol-replays/v1/metadata/${gameId}/create/gameVersion/${gameVersion}/gameType/${gameType}/queueId/${queueId}`,
//           method: 'POST',
//           ...params
//         }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-replays
//      * @name GetLolReplaysV1RoflsPath
//      * @request GET:/lol-replays/v1/rofls/path
//      */
//     getLolReplaysV1RoflsPath: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-replays/v1/rofls/path`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-replays
//      * @name GetLolReplaysV1RoflsPathDefault
//      * @request GET:/lol-replays/v1/rofls/path/default
//      */
//     getLolReplaysV1RoflsPathDefault: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-replays/v1/rofls/path/default`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-replays
//      * @name PostLolReplaysV1RoflsScan
//      * @request POST:/lol-replays/v1/rofls/scan
//      */
//     postLolReplaysV1RoflsScan: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-replays/v1/rofls/scan`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-replays
//      * @name PostLolReplaysV1RoflsByGameIdDownload
//      * @request POST:/lol-replays/v1/rofls/{gameId}/download
//      */
//     postLolReplaysV1RoflsByGameIdDownload: (
//       gameId: any,
//       data: LolReplaysReplayContextData,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-replays/v1/rofls/${gameId}/download`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-replays
//      * @name PostLolReplaysV1RoflsByGameIdDownloadGraceful
//      * @request POST:/lol-replays/v1/rofls/{gameId}/download/graceful
//      */
//     postLolReplaysV1RoflsByGameIdDownloadGraceful: (
//       gameId: any,
//       data: LolReplaysReplayContextData,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-replays/v1/rofls/${gameId}/download/graceful`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-replays
//      * @name PostLolReplaysV1RoflsByGameIdWatch
//      * @request POST:/lol-replays/v1/rofls/{gameId}/watch
//      */
//     postLolReplaysV1RoflsByGameIdWatch: (
//       gameId: any,
//       data: LolReplaysReplayContextData,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-replays/v1/rofls/${gameId}/watch`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-replays
//      * @name PostLolReplaysV2MetadataByGameIdCreate
//      * @request POST:/lol-replays/v2/metadata/{gameId}/create
//      */
//     postLolReplaysV2MetadataByGameIdCreate: (
//       gameId: any,
//       data: LolReplaysReplayCreateMetadata,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-replays/v2/metadata/${gameId}/create`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       })
//   }
//   lolRewards = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rewards
//      * @name GetLolRewardsV1Grants
//      * @request GET:/lol-rewards/v1/grants
//      */
//     getLolRewardsV1Grants: (
//       query?: {
//         status?: 'PENDING_FULFILLMENT' | 'PENDING_SELECTION' | 'FULFILLED' | 'FAILED'
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolRewardsRewardGrant[], any>({
//         path: `/lol-rewards/v1/grants`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rewards
//      * @name PostLolRewardsV1GrantsByGrantIdSelect
//      * @request POST:/lol-rewards/v1/grants/{grantId}/select
//      */
//     postLolRewardsV1GrantsByGrantIdSelect: (
//       grantId: any,
//       data: LolRewardsSelectionRequestDTO,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolRewardsRewardGrant, any>({
//         path: `/lol-rewards/v1/grants/${grantId}/select`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rewards
//      * @name PatchLolRewardsV1GrantsByGrantIdView
//      * @request PATCH:/lol-rewards/v1/grants/{grantId}/view
//      */
//     patchLolRewardsV1GrantsByGrantIdView: (grantId: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-rewards/v1/grants/${grantId}/view`,
//         method: 'PATCH',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rewards
//      * @name GetLolRewardsV1Groups
//      * @request GET:/lol-rewards/v1/groups
//      */
//     getLolRewardsV1Groups: (
//       query?: {
//         types?: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolRewardsSvcRewardGroup[], any>({
//         path: `/lol-rewards/v1/groups`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   lolRms = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-riot-messaging-service
//      * @name GetLolRmsV1ChampionMasteryLeaveupUpdate
//      * @request GET:/lol-rms/v1/champion-mastery-leaveup-update
//      */
//     getLolRmsV1ChampionMasteryLeaveupUpdate: (params: RequestParams = {}) =>
//       this.request<LolRiotMessagingServiceChampionMasteryLevelUp[], any>({
//         path: `/lol-rms/v1/champion-mastery-leaveup-update`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-riot-messaging-service
//      * @name DeleteLolRmsV1ChampionMasteryLeaveupUpdateById
//      * @request DELETE:/lol-rms/v1/champion-mastery-leaveup-update/{id}
//      */
//     deleteLolRmsV1ChampionMasteryLeaveupUpdateById: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-rms/v1/champion-mastery-leaveup-update/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       })
//   }
//   lolRsoAuth = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name GetLolRsoAuthConfigurationV3ReadyState
//      * @request GET:/lol-rso-auth/configuration/v3/ready-state
//      */
//     getLolRsoAuthConfigurationV3ReadyState: (params: RequestParams = {}) =>
//       this.request<LolRsoAuthRSOConfigReadyState, any>({
//         path: `/lol-rso-auth/configuration/v3/ready-state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name DeleteLolRsoAuthV1AuthHintsHint
//      * @request DELETE:/lol-rso-auth/v1/auth-hints/hint
//      */
//     deleteLolRsoAuthV1AuthHintsHint: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-rso-auth/v1/auth-hints/hint`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name GetLolRsoAuthV1AuthHintsHint
//      * @request GET:/lol-rso-auth/v1/auth-hints/hint
//      */
//     getLolRsoAuthV1AuthHintsHint: (params: RequestParams = {}) =>
//       this.request<LolRsoAuthAuthHint, any>({
//         path: `/lol-rso-auth/v1/auth-hints/hint`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name DeleteLolRsoAuthV1Authorization
//      * @request DELETE:/lol-rso-auth/v1/authorization
//      */
//     deleteLolRsoAuthV1Authorization: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-rso-auth/v1/authorization`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name GetLolRsoAuthV1Authorization
//      * @request GET:/lol-rso-auth/v1/authorization
//      */
//     getLolRsoAuthV1Authorization: (params: RequestParams = {}) =>
//       this.request<LolRsoAuthAuthorization, any>({
//         path: `/lol-rso-auth/v1/authorization`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name GetLolRsoAuthV1AuthorizationAccessToken
//      * @request GET:/lol-rso-auth/v1/authorization/access-token
//      */
//     getLolRsoAuthV1AuthorizationAccessToken: (params: RequestParams = {}) =>
//       this.request<LolRsoAuthAccessToken, any>({
//         path: `/lol-rso-auth/v1/authorization/access-token`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name GetLolRsoAuthV1AuthorizationError
//      * @request GET:/lol-rso-auth/v1/authorization/error
//      */
//     getLolRsoAuthV1AuthorizationError: (params: RequestParams = {}) =>
//       this.request<LolRsoAuthAuthError, any>({
//         path: `/lol-rso-auth/v1/authorization/error`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name PostLolRsoAuthV1AuthorizationGas
//      * @request POST:/lol-rso-auth/v1/authorization/gas
//      */
//     postLolRsoAuthV1AuthorizationGas: (
//       data: LolRsoAuthRSOPlayerCredentials,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolRsoAuthAuthorization, any>({
//         path: `/lol-rso-auth/v1/authorization/gas`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name GetLolRsoAuthV1AuthorizationIdToken
//      * @request GET:/lol-rso-auth/v1/authorization/id-token
//      */
//     getLolRsoAuthV1AuthorizationIdToken: (params: RequestParams = {}) =>
//       this.request<LolRsoAuthIdToken, any>({
//         path: `/lol-rso-auth/v1/authorization/id-token`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name PostLolRsoAuthV1AuthorizationRefresh
//      * @request POST:/lol-rso-auth/v1/authorization/refresh
//      */
//     postLolRsoAuthV1AuthorizationRefresh: (params: RequestParams = {}) =>
//       this.request<LolRsoAuthAuthorization, any>({
//         path: `/lol-rso-auth/v1/authorization/refresh`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name GetLolRsoAuthV1AuthorizationUserinfo
//      * @request GET:/lol-rso-auth/v1/authorization/userinfo
//      */
//     getLolRsoAuthV1AuthorizationUserinfo: (params: RequestParams = {}) =>
//       this.request<LolRsoAuthUserInfo, any>({
//         path: `/lol-rso-auth/v1/authorization/userinfo`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name PostLolRsoAuthV1AuthorizationUserinfo
//      * @request POST:/lol-rso-auth/v1/authorization/userinfo
//      */
//     postLolRsoAuthV1AuthorizationUserinfo: (params: RequestParams = {}) =>
//       this.request<LolRsoAuthUserInfo, any>({
//         path: `/lol-rso-auth/v1/authorization/userinfo`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name PostLolRsoAuthV1DeviceId
//      * @request POST:/lol-rso-auth/v1/device-id
//      */
//     postLolRsoAuthV1DeviceId: (params: RequestParams = {}) =>
//       this.request<LolRsoAuthDeviceId, any>({
//         path: `/lol-rso-auth/v1/device-id`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name DeleteLolRsoAuthV1Session
//      * @request DELETE:/lol-rso-auth/v1/session
//      */
//     deleteLolRsoAuthV1Session: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-rso-auth/v1/session`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name GetLolRsoAuthV1StatusByPlatformId
//      * @request GET:/lol-rso-auth/v1/status/{platformId}
//      */
//     getLolRsoAuthV1StatusByPlatformId: (platformId: any, params: RequestParams = {}) =>
//       this.request<LolRsoAuthRegionStatus, any>({
//         path: `/lol-rso-auth/v1/status/${platformId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name DeleteLolRsoAuthV2Config
//      * @request DELETE:/lol-rso-auth/v2/config
//      */
//     deleteLolRsoAuthV2Config: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-rso-auth/v2/config`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-rso-auth
//      * @name PostLolRsoAuthV2Config
//      * @request POST:/lol-rso-auth/v2/config
//      */
//     postLolRsoAuthV2Config: (data: LolRsoAuthPublicClientConfig, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-rso-auth/v2/config`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       })
//   }
//   lolServiceStatus = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-service-status
//      * @name GetLolServiceStatusV1LcuStatus
//      * @request GET:/lol-service-status/v1/lcu-status
//      */
//     getLolServiceStatusV1LcuStatus: (params: RequestParams = {}) =>
//       this.request<LolServiceStatusServiceStatusResource, any>({
//         path: `/lol-service-status/v1/lcu-status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-service-status
//      * @name GetLolServiceStatusV1TickerMessages
//      * @request GET:/lol-service-status/v1/ticker-messages
//      */
//     getLolServiceStatusV1TickerMessages: (params: RequestParams = {}) =>
//       this.request<LolServiceStatusTickerMessage[], any>({
//         path: `/lol-service-status/v1/ticker-messages`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolSettings = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name GetLolSettingsV1AccountDidreset
//      * @request GET:/lol-settings/v1/account/didreset
//      */
//     getLolSettingsV1AccountDidreset: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-settings/v1/account/didreset`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name PostLolSettingsV1AccountSave
//      * @request POST:/lol-settings/v1/account/save
//      */
//     postLolSettingsV1AccountSave: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-settings/v1/account/save`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name GetLolSettingsV1AccountByCategory
//      * @request GET:/lol-settings/v1/account/{category}
//      */
//     getLolSettingsV1AccountByCategory: (category: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-settings/v1/account/${category}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name PatchLolSettingsV1AccountByCategory
//      * @request PATCH:/lol-settings/v1/account/{category}
//      */
//     patchLolSettingsV1AccountByCategory: (
//       category: any,
//       data: LolSettingsSettingCategory,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-settings/v1/account/${category}`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name PutLolSettingsV1AccountByCategory
//      * @request PUT:/lol-settings/v1/account/{category}
//      */
//     putLolSettingsV1AccountByCategory: (
//       category: any,
//       data: LolSettingsSettingCategory,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-settings/v1/account/${category}`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name GetLolSettingsV1LocalByCategory
//      * @request GET:/lol-settings/v1/local/{category}
//      */
//     getLolSettingsV1LocalByCategory: (category: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-settings/v1/local/${category}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name PatchLolSettingsV1LocalByCategory
//      * @request PATCH:/lol-settings/v1/local/{category}
//      */
//     patchLolSettingsV1LocalByCategory: (
//       category: any,
//       data: LolSettingsSettingCategory,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-settings/v1/local/${category}`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name GetLolSettingsV2AccountByPpTypeByCategory
//      * @request GET:/lol-settings/v2/account/{ppType}/{category}
//      */
//     getLolSettingsV2AccountByPpTypeByCategory: (
//       ppType: any,
//       category: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-settings/v2/account/${ppType}/${category}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name PatchLolSettingsV2AccountByPpTypeByCategory
//      * @request PATCH:/lol-settings/v2/account/{ppType}/{category}
//      */
//     patchLolSettingsV2AccountByPpTypeByCategory: (
//       ppType: any,
//       category: any,
//       data: LolSettingsSettingCategory,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-settings/v2/account/${ppType}/${category}`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name PutLolSettingsV2AccountByPpTypeByCategory
//      * @request PUT:/lol-settings/v2/account/{ppType}/{category}
//      */
//     putLolSettingsV2AccountByPpTypeByCategory: (
//       ppType: any,
//       category: any,
//       data: LolSettingsSettingCategory,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-settings/v2/account/${ppType}/${category}`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name GetLolSettingsV2DidresetByPpType
//      * @request GET:/lol-settings/v2/didreset/{ppType}
//      */
//     getLolSettingsV2DidresetByPpType: (ppType: any, params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-settings/v2/didreset/${ppType}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name GetLolSettingsV2LocalByCategory
//      * @request GET:/lol-settings/v2/local/{category}
//      */
//     getLolSettingsV2LocalByCategory: (category: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-settings/v2/local/${category}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name PatchLolSettingsV2LocalByCategory
//      * @request PATCH:/lol-settings/v2/local/{category}
//      */
//     patchLolSettingsV2LocalByCategory: (
//       category: any,
//       data: LolSettingsSettingCategory,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-settings/v2/local/${category}`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-settings
//      * @name GetLolSettingsV2Ready
//      * @request GET:/lol-settings/v2/ready
//      */
//     getLolSettingsV2Ready: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-settings/v2/ready`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolShutdown = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-shutdown
//      * @name GetLolShutdownV1Notification
//      * @request GET:/lol-shutdown/v1/notification
//      */
//     getLolShutdownV1Notification: (params: RequestParams = {}) =>
//       this.request<LolShutdownShutdownNotification, any>({
//         path: `/lol-shutdown/v1/notification`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolSimpleDialogMessages = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-simple-dialog-messages
//      * @name GetLolSimpleDialogMessagesV1Messages
//      * @request GET:/lol-simple-dialog-messages/v1/messages
//      */
//     getLolSimpleDialogMessagesV1Messages: (params: RequestParams = {}) =>
//       this.request<LolSimpleDialogMessagesMessage[], any>({
//         path: `/lol-simple-dialog-messages/v1/messages`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-simple-dialog-messages
//      * @name PostLolSimpleDialogMessagesV1Messages
//      * @request POST:/lol-simple-dialog-messages/v1/messages
//      */
//     postLolSimpleDialogMessagesV1Messages: (
//       data: LolSimpleDialogMessagesLocalMessageRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-simple-dialog-messages/v1/messages`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-simple-dialog-messages
//      * @name DeleteLolSimpleDialogMessagesV1MessagesByMessageId
//      * @request DELETE:/lol-simple-dialog-messages/v1/messages/{messageId}
//      */
//     deleteLolSimpleDialogMessagesV1MessagesByMessageId: (
//       messageId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-simple-dialog-messages/v1/messages/${messageId}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       })
//   }
//   lolSocialLeaderboard = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-social-leaderboard
//      * @name GetLolSocialLeaderboardV1LeaderboardNextUpdateTime
//      * @request GET:/lol-social-leaderboard/v1/leaderboard-next-update-time
//      */
//     getLolSocialLeaderboardV1LeaderboardNextUpdateTime: (
//       query: {
//         queueType:
//           | 'NONE'
//           | 'RANKED_SOLO_5x5'
//           | 'RANKED_FLEX_SR'
//           | 'RANKED_FLEX_TT'
//           | 'RANKED_TFT'
//           | 'RANKED_TFT_TURBO'
//           | 'RANKED_TFT_PAIRS'
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<number, any>({
//         path: `/lol-social-leaderboard/v1/leaderboard-next-update-time`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-social-leaderboard
//      * @name GetLolSocialLeaderboardV1SocialLeaderboardData
//      * @request GET:/lol-social-leaderboard/v1/social-leaderboard-data
//      */
//     getLolSocialLeaderboardV1SocialLeaderboardData: (
//       query: {
//         queueType:
//           | 'NONE'
//           | 'RANKED_SOLO_5x5'
//           | 'RANKED_FLEX_SR'
//           | 'RANKED_FLEX_TT'
//           | 'RANKED_TFT'
//           | 'RANKED_TFT_TURBO'
//           | 'RANKED_TFT_PAIRS'
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolSocialLeaderboardSocialLeaderboardData, any>({
//         path: `/lol-social-leaderboard/v1/social-leaderboard-data`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   lolSpectator = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-spectator
//      * @name PostLolSpectatorV1BuddySpectate
//      * @request POST:/lol-spectator/v1/buddy/spectate
//      */
//     postLolSpectatorV1BuddySpectate: (data: string[], params: RequestParams = {}) =>
//       this.request<LolSpectatorSummonerOrTeamAvailabilty, any>({
//         path: `/lol-spectator/v1/buddy/spectate`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-spectator
//      * @name GetLolSpectatorV1Spectate
//      * @request GET:/lol-spectator/v1/spectate
//      */
//     getLolSpectatorV1Spectate: (params: RequestParams = {}) =>
//       this.request<LolSpectatorSpectateGameInfo, any>({
//         path: `/lol-spectator/v1/spectate`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-spectator
//      * @name PostLolSpectatorV1SpectateLaunch
//      * @request POST:/lol-spectator/v1/spectate/launch
//      */
//     postLolSpectatorV1SpectateLaunch: (
//       data: LolSpectatorSpectateGameInfo,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-spectator/v1/spectate/launch`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   lolStatstones = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name DeleteLolStatstonesV1EogNotifications
//      * @request DELETE:/lol-statstones/v1/eog-notifications
//      */
//     deleteLolStatstonesV1EogNotifications: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-statstones/v1/eog-notifications`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name GetLolStatstonesV1EogNotifications
//      * @request GET:/lol-statstones/v1/eog-notifications
//      */
//     getLolStatstonesV1EogNotifications: (params: RequestParams = {}) =>
//       this.request<Record<string, any>[], any>({
//         path: `/lol-statstones/v1/eog-notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name DeleteLolStatstonesV1EogNotificationsByKey
//      * @request DELETE:/lol-statstones/v1/eog-notifications/{key}
//      */
//     deleteLolStatstonesV1EogNotificationsByKey: (key: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-statstones/v1/eog-notifications/${key}`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name GetLolStatstonesV1FeaturedChampionStatstonesByChampionItemId
//      * @request GET:/lol-statstones/v1/featured-champion-statstones/{championItemId}
//      */
//     getLolStatstonesV1FeaturedChampionStatstonesByChampionItemId: (
//       championItemId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolStatstonesStatstone[], any>({
//         path: `/lol-statstones/v1/featured-champion-statstones/${championItemId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name PostLolStatstonesV1FeaturedChampionStatstonesByChampionItemIdByStatstoneId
//      * @request POST:/lol-statstones/v1/featured-champion-statstones/{championItemId}/{statstoneId}
//      */
//     postLolStatstonesV1FeaturedChampionStatstonesByChampionItemIdByStatstoneId: (
//       championItemId: any,
//       statstoneId: any,
//       data: LolStatstonesStatstoneFeaturedRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-statstones/v1/featured-champion-statstones/${championItemId}/${statstoneId}`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name GetLolStatstonesV1ProfileSummaryByPuuid
//      * @request GET:/lol-statstones/v1/profile-summary/{puuid}
//      */
//     getLolStatstonesV1ProfileSummaryByPuuid: (puuid: any, params: RequestParams = {}) =>
//       this.request<LolStatstonesProfileStatstoneSummary[], any>({
//         path: `/lol-statstones/v1/profile-summary/${puuid}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name GetLolStatstonesV1StatstoneByContentIdOwned
//      * @request GET:/lol-statstones/v1/statstone/{contentId}/owned
//      */
//     getLolStatstonesV1StatstoneByContentIdOwned: (contentId: any, params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-statstones/v1/statstone/${contentId}/owned`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name GetLolStatstonesV1StatstonesEnabledQueueIds
//      * @request GET:/lol-statstones/v1/statstones-enabled-queue-ids
//      */
//     getLolStatstonesV1StatstonesEnabledQueueIds: (params: RequestParams = {}) =>
//       this.request<number[], any>({
//         path: `/lol-statstones/v1/statstones-enabled-queue-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name DeleteLolStatstonesV1VignetteNotifications
//      * @request DELETE:/lol-statstones/v1/vignette-notifications
//      */
//     deleteLolStatstonesV1VignetteNotifications: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-statstones/v1/vignette-notifications`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name GetLolStatstonesV1VignetteNotifications
//      * @request GET:/lol-statstones/v1/vignette-notifications
//      */
//     getLolStatstonesV1VignetteNotifications: (params: RequestParams = {}) =>
//       this.request<Record<string, any>[], any>({
//         path: `/lol-statstones/v1/vignette-notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name DeleteLolStatstonesV1VignetteNotificationsByKey
//      * @request DELETE:/lol-statstones/v1/vignette-notifications/{key}
//      */
//     deleteLolStatstonesV1VignetteNotificationsByKey: (key: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-statstones/v1/vignette-notifications/${key}`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name GetLolStatstonesV2PlayerStatstonesSelfByChampionItemId
//      * @request GET:/lol-statstones/v2/player-statstones-self/{championItemId}
//      */
//     getLolStatstonesV2PlayerStatstonesSelfByChampionItemId: (
//       championItemId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolStatstonesStatstoneSet[], any>({
//         path: `/lol-statstones/v2/player-statstones-self/${championItemId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-statstones
//      * @name GetLolStatstonesV2PlayerSummarySelf
//      * @request GET:/lol-statstones/v2/player-summary-self
//      */
//     getLolStatstonesV2PlayerSummarySelf: (params: RequestParams = {}) =>
//       this.request<LolStatstonesChampionStatstoneSummary[], any>({
//         path: `/lol-statstones/v2/player-summary-self`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolStore = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1Catalog
//      * @request GET:/lol-store/v1/catalog
//      */
//     getLolStoreV1Catalog: (
//       query?: {
//         inventoryType?: string[]
//         itemId?: number[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolStoreCatalogItem[], any>({
//         path: `/lol-store/v1/catalog`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1CatalogSales
//      * @request GET:/lol-store/v1/catalog/sales
//      */
//     getLolStoreV1CatalogSales: (params: RequestParams = {}) =>
//       this.request<LolStoreItemSale[], any>({
//         path: `/lol-store/v1/catalog/sales`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1CatalogByInventoryType
//      * @request GET:/lol-store/v1/catalog/{inventoryType}
//      */
//     getLolStoreV1CatalogByInventoryType: (
//       inventoryType: any,
//       query: {
//         itemIds: number[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolStoreCatalogItem[], any>({
//         path: `/lol-store/v1/catalog/${inventoryType}`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1CatalogByInstanceIds
//      * @request GET:/lol-store/v1/catalogByInstanceIds
//      */
//     getLolStoreV1CatalogByInstanceIds: (
//       query: {
//         instanceIds: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolStoreCatalogItem[], any>({
//         path: `/lol-store/v1/catalogByInstanceIds`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1GetStoreUrl
//      * @request GET:/lol-store/v1/getStoreUrl
//      */
//     getLolStoreV1GetStoreUrl: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-store/v1/getStoreUrl`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1Giftablefriends
//      * @request GET:/lol-store/v1/giftablefriends
//      */
//     getLolStoreV1Giftablefriends: (params: RequestParams = {}) =>
//       this.request<LolStoreGiftingFriend[], any>({
//         path: `/lol-store/v1/giftablefriends`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1ItemKeysFromInstanceIds
//      * @request GET:/lol-store/v1/itemKeysFromInstanceIds
//      */
//     getLolStoreV1ItemKeysFromInstanceIds: (
//       query: {
//         instanceIds: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, LolStoreItemKey>, any>({
//         path: `/lol-store/v1/itemKeysFromInstanceIds`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1ItemKeysFromOfferIds
//      * @request GET:/lol-store/v1/itemKeysFromOfferIds
//      */
//     getLolStoreV1ItemKeysFromOfferIds: (
//       query: {
//         offerIds: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, LolStoreItemKey>, any>({
//         path: `/lol-store/v1/itemKeysFromOfferIds`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1LastPage
//      * @request GET:/lol-store/v1/lastPage
//      */
//     getLolStoreV1LastPage: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-store/v1/lastPage`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name PostLolStoreV1LastPage
//      * @request POST:/lol-store/v1/lastPage
//      */
//     postLolStoreV1LastPage: (data: string, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/lol-store/v1/lastPage`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name PostLolStoreV1NotificationsAcknowledge
//      * @request POST:/lol-store/v1/notifications/acknowledge
//      */
//     postLolStoreV1NotificationsAcknowledge: (data: string, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-store/v1/notifications/acknowledge`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1Offers
//      * @request GET:/lol-store/v1/offers
//      */
//     getLolStoreV1Offers: (
//       query?: {
//         inventoryTypeUUIDs?: string[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolStoreCapOffer[], any>({
//         path: `/lol-store/v1/offers`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1OrderNotifications
//      * @request GET:/lol-store/v1/order-notifications
//      */
//     getLolStoreV1OrderNotifications: (params: RequestParams = {}) =>
//       this.request<LolStoreOrderNotificationResource[], any>({
//         path: `/lol-store/v1/order-notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1OrderNotificationsById
//      * @request GET:/lol-store/v1/order-notifications/{id}
//      */
//     getLolStoreV1OrderNotificationsById: (id: any, params: RequestParams = {}) =>
//       this.request<LolStoreOrderNotificationResource, any>({
//         path: `/lol-store/v1/order-notifications/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1PaymentDetails
//      * @request GET:/lol-store/v1/paymentDetails
//      */
//     getLolStoreV1PaymentDetails: (
//       query: {
//         action: string
//         /** @format int64 */
//         giftRecipientAccountId?: number
//         giftMessage?: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-store/v1/paymentDetails`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1SkinsBySkinId
//      * @request GET:/lol-store/v1/skins/{skinId}
//      */
//     getLolStoreV1SkinsBySkinId: (skinId: any, params: RequestParams = {}) =>
//       this.request<LolStoreCatalogItem, any>({
//         path: `/lol-store/v1/skins/${skinId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name PostLolStoreV1SkinsBySkinIdPurchase
//      * @request POST:/lol-store/v1/skins/{skinId}/purchase
//      */
//     postLolStoreV1SkinsBySkinIdPurchase: (
//       skinId: any,
//       data: LolStoreItemCost,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-store/v1/skins/${skinId}/purchase`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1Status
//      * @request GET:/lol-store/v1/status
//      */
//     getLolStoreV1Status: (params: RequestParams = {}) =>
//       this.request<LolStoreStoreStatus, any>({
//         path: `/lol-store/v1/status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1StoreReady
//      * @request GET:/lol-store/v1/store-ready
//      */
//     getLolStoreV1StoreReady: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-store/v1/store-ready`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1Wallet
//      * @request GET:/lol-store/v1/wallet
//      */
//     getLolStoreV1Wallet: (params: RequestParams = {}) =>
//       this.request<LolStoreWallet, any>({
//         path: `/lol-store/v1/wallet`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-store
//      * @name GetLolStoreV1ByPageType
//      * @request GET:/lol-store/v1/{pageType}
//      */
//     getLolStoreV1ByPageType: (pageType: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-store/v1/${pageType}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolSuggestedPlayers = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-suggested-players
//      * @name PostLolSuggestedPlayersV1ReportedPlayer
//      * @request POST:/lol-suggested-players/v1/reported-player
//      */
//     postLolSuggestedPlayersV1ReportedPlayer: (
//       data: LolSuggestedPlayersSuggestedPlayersReportedPlayer,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-suggested-players/v1/reported-player`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-suggested-players
//      * @name GetLolSuggestedPlayersV1SuggestedPlayers
//      * @request GET:/lol-suggested-players/v1/suggested-players
//      */
//     getLolSuggestedPlayersV1SuggestedPlayers: (params: RequestParams = {}) =>
//       this.request<LolSuggestedPlayersSuggestedPlayersSuggestedPlayer[], any>({
//         path: `/lol-suggested-players/v1/suggested-players`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-suggested-players
//      * @name DeleteLolSuggestedPlayersV1SuggestedPlayersBySummonerId
//      * @request DELETE:/lol-suggested-players/v1/suggested-players/{summonerId}
//      */
//     deleteLolSuggestedPlayersV1SuggestedPlayersBySummonerId: (
//       summonerId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-suggested-players/v1/suggested-players/${summonerId}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-suggested-players
//      * @name PostLolSuggestedPlayersV1VictoriousComrade
//      * @request POST:/lol-suggested-players/v1/victorious-comrade
//      */
//     postLolSuggestedPlayersV1VictoriousComrade: (
//       data: LolSuggestedPlayersSuggestedPlayersVictoriousComrade,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/lol-suggested-players/v1/victorious-comrade`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       })
//   }
//   lolSummoner = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1CheckNameAvailabilityNewSummonersByName
//      * @request GET:/lol-summoner/v1/check-name-availability-new-summoners/{name}
//      */
//     getLolSummonerV1CheckNameAvailabilityNewSummonersByName: (
//       name: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<boolean, any>({
//         path: `/lol-summoner/v1/check-name-availability-new-summoners/${name}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1CheckNameAvailabilityByName
//      * @request GET:/lol-summoner/v1/check-name-availability/{name}
//      */
//     getLolSummonerV1CheckNameAvailabilityByName: (name: any, params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-summoner/v1/check-name-availability/${name}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1CurrentSummoner
//      * @request GET:/lol-summoner/v1/current-summoner
//      */
//     getLolSummonerV1CurrentSummoner: (params: RequestParams = {}) =>
//       this.request<LolSummonerSummoner, any>({
//         path: `/lol-summoner/v1/current-summoner`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1CurrentSummonerAccountAndSummonerIds
//      * @request GET:/lol-summoner/v1/current-summoner/account-and-summoner-ids
//      */
//     getLolSummonerV1CurrentSummonerAccountAndSummonerIds: (params: RequestParams = {}) =>
//       this.request<LolSummonerAccountIdAndSummonerId, any>({
//         path: `/lol-summoner/v1/current-summoner/account-and-summoner-ids`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1CurrentSummonerAutofill
//      * @request GET:/lol-summoner/v1/current-summoner/autofill
//      */
//     getLolSummonerV1CurrentSummonerAutofill: (params: RequestParams = {}) =>
//       this.request<LolSummonerAutoFillQueueDto[], any>({
//         path: `/lol-summoner/v1/current-summoner/autofill`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name PutLolSummonerV1CurrentSummonerIcon
//      * @request PUT:/lol-summoner/v1/current-summoner/icon
//      */
//     putLolSummonerV1CurrentSummonerIcon: (
//       data: LolSummonerSummonerIcon,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolSummonerSummoner, any>({
//         path: `/lol-summoner/v1/current-summoner/icon`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1CurrentSummonerJwt
//      * @request GET:/lol-summoner/v1/current-summoner/jwt
//      */
//     getLolSummonerV1CurrentSummonerJwt: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/lol-summoner/v1/current-summoner/jwt`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name PostLolSummonerV1CurrentSummonerName
//      * @request POST:/lol-summoner/v1/current-summoner/name
//      */
//     postLolSummonerV1CurrentSummonerName: (data: string, params: RequestParams = {}) =>
//       this.request<LolSummonerSummoner, any>({
//         path: `/lol-summoner/v1/current-summoner/name`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1CurrentSummonerProfilePrivacy
//      * @request GET:/lol-summoner/v1/current-summoner/profile-privacy
//      */
//     getLolSummonerV1CurrentSummonerProfilePrivacy: (params: RequestParams = {}) =>
//       this.request<LolSummonerProfilePrivacy, any>({
//         path: `/lol-summoner/v1/current-summoner/profile-privacy`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name PutLolSummonerV1CurrentSummonerProfilePrivacy
//      * @request PUT:/lol-summoner/v1/current-summoner/profile-privacy
//      */
//     putLolSummonerV1CurrentSummonerProfilePrivacy: (
//       data: LolSummonerProfilePrivacySetting,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-summoner/v1/current-summoner/profile-privacy`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1CurrentSummonerRerollPoints
//      * @request GET:/lol-summoner/v1/current-summoner/rerollPoints
//      */
//     getLolSummonerV1CurrentSummonerRerollPoints: (params: RequestParams = {}) =>
//       this.request<LolSummonerSummonerRerollPoints, any>({
//         path: `/lol-summoner/v1/current-summoner/rerollPoints`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1CurrentSummonerSummonerProfile
//      * @request GET:/lol-summoner/v1/current-summoner/summoner-profile
//      */
//     getLolSummonerV1CurrentSummonerSummonerProfile: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-summoner/v1/current-summoner/summoner-profile`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name PostLolSummonerV1CurrentSummonerSummonerProfile
//      * @request POST:/lol-summoner/v1/current-summoner/summoner-profile
//      */
//     postLolSummonerV1CurrentSummonerSummonerProfile: (
//       data: LolSummonerSummonerProfileUpdate,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-summoner/v1/current-summoner/summoner-profile`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1ProfilePrivacyEnabled
//      * @request GET:/lol-summoner/v1/profile-privacy-enabled
//      */
//     getLolSummonerV1ProfilePrivacyEnabled: (params: RequestParams = {}) =>
//       this.request<LolSummonerProfilePrivacyEnabledState, any>({
//         path: `/lol-summoner/v1/profile-privacy-enabled`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1Status
//      * @request GET:/lol-summoner/v1/status
//      */
//     getLolSummonerV1Status: (params: RequestParams = {}) =>
//       this.request<LolSummonerStatus, any>({
//         path: `/lol-summoner/v1/status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1SummonerProfile
//      * @request GET:/lol-summoner/v1/summoner-profile
//      */
//     getLolSummonerV1SummonerProfile: (
//       query: {
//         puuid: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/lol-summoner/v1/summoner-profile`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1SummonerRequestsReady
//      * @request GET:/lol-summoner/v1/summoner-requests-ready
//      */
//     getLolSummonerV1SummonerRequestsReady: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-summoner/v1/summoner-requests-ready`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1Summoners
//      * @request GET:/lol-summoner/v1/summoners
//      */
//     getLolSummonerV1Summoners: (
//       query: {
//         name: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolSummonerSummoner, any>({
//         path: `/lol-summoner/v1/summoners`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name PostLolSummonerV1Summoners
//      * @request POST:/lol-summoner/v1/summoners
//      */
//     postLolSummonerV1Summoners: (
//       data: LolSummonerSummonerRequestedName,
//       params: RequestParams = {}
//     ) =>
//       this.request<LolSummonerSummoner, any>({
//         path: `/lol-summoner/v1/summoners`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1SummonersByPuuidCachedByPuuid
//      * @request GET:/lol-summoner/v1/summoners-by-puuid-cached/{puuid}
//      */
//     getLolSummonerV1SummonersByPuuidCachedByPuuid: (puuid: any, params: RequestParams = {}) =>
//       this.request<LolSummonerSummoner, any>({
//         path: `/lol-summoner/v1/summoners-by-puuid-cached/${puuid}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV1SummonersById
//      * @request GET:/lol-summoner/v1/summoners/{id}
//      */
//     getLolSummonerV1SummonersById: (id: any, params: RequestParams = {}) =>
//       this.request<LolSummonerSummoner, any>({
//         path: `/lol-summoner/v1/summoners/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV2SummonerIcons
//      * @request GET:/lol-summoner/v2/summoner-icons
//      */
//     getLolSummonerV2SummonerIcons: (
//       query: {
//         ids: number[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolSummonerSummonerIdAndIcon[], any>({
//         path: `/lol-summoner/v2/summoner-icons`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV2SummonerNames
//      * @request GET:/lol-summoner/v2/summoner-names
//      */
//     getLolSummonerV2SummonerNames: (
//       query: {
//         ids: number[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolSummonerSummonerIdAndName[], any>({
//         path: `/lol-summoner/v2/summoner-names`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV2Summoners
//      * @request GET:/lol-summoner/v2/summoners
//      */
//     getLolSummonerV2Summoners: (
//       query?: {
//         ids?: number[]
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<LolSummonerSummoner[], any>({
//         path: `/lol-summoner/v2/summoners`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name PostLolSummonerV2SummonersNames
//      * @request POST:/lol-summoner/v2/summoners/names
//      */
//     postLolSummonerV2SummonersNames: (data: string[], params: RequestParams = {}) =>
//       this.request<LolSummonerSummoner[], any>({
//         path: `/lol-summoner/v2/summoners/names`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name PostLolSummonerV2SummonersPuuid
//      * @request POST:/lol-summoner/v2/summoners/puuid
//      */
//     postLolSummonerV2SummonersPuuid: (data: string[], params: RequestParams = {}) =>
//       this.request<LolSummonerSummoner[], any>({
//         path: `/lol-summoner/v2/summoners/puuid`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-summoner
//      * @name GetLolSummonerV2SummonersPuuidByPuuid
//      * @request GET:/lol-summoner/v2/summoners/puuid/{puuid}
//      */
//     getLolSummonerV2SummonersPuuidByPuuid: (puuid: any, params: RequestParams = {}) =>
//       this.request<LolSummonerSummoner, any>({
//         path: `/lol-summoner/v2/summoners/puuid/${puuid}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolTastes = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-tastes
//      * @name GetLolTastesV1Ready
//      * @request GET:/lol-tastes/v1/ready
//      */
//     getLolTastesV1Ready: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/lol-tastes/v1/ready`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-tastes
//      * @name GetLolTastesV1SkinsModel
//      * @request GET:/lol-tastes/v1/skins-model
//      */
//     getLolTastesV1SkinsModel: (params: RequestParams = {}) =>
//       this.request<LolTastesDataModelResponse, any>({
//         path: `/lol-tastes/v1/skins-model`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolTft = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-tft
//      * @name GetLolTftV1TftHubFooterColors
//      * @request GET:/lol-tft/v1/tft/hubFooterColors
//      */
//     getLolTftV1TftHubFooterColors: (params: RequestParams = {}) =>
//       this.request<LolTftLolTftHubFooterColors, any>({
//         path: `/lol-tft/v1/tft/hubFooterColors`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-tft
//      * @name GetLolTftV1TftStorePromos
//      * @request GET:/lol-tft/v1/tft/storePromos
//      */
//     getLolTftV1TftStorePromos: (params: RequestParams = {}) =>
//       this.request<LolTftLolTftStorePromos, any>({
//         path: `/lol-tft/v1/tft/storePromos`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-missions
//      * @name GetLolTftV2TftBattlepass
//      * @request GET:/lol-tft/v2/tft/battlepass
//      */
//     getLolTftV2TftBattlepass: (params: RequestParams = {}) =>
//       this.request<LolMissionsTftPaidBattlepass, any>({
//         path: `/lol-tft/v2/tft/battlepass`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolTokenUpsell = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-worlds-token-card
//      * @name GetLolTokenUpsellV1All
//      * @request GET:/lol-token-upsell/v1/all
//      */
//     getLolTokenUpsellV1All: (params: RequestParams = {}) =>
//       this.request<LolWorldsTokenCardTokenUpsell[], any>({
//         path: `/lol-token-upsell/v1/all`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   lolTrophies = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-trophies
//      * @name GetLolTrophiesV1CurrentSummonerTrophiesProfile
//      * @request GET:/lol-trophies/v1/current-summoner/trophies/profile
//      */
//     getLolTrophiesV1CurrentSummonerTrophiesProfile: (params: RequestParams = {}) =>
//       this.request<LolTrophiesTrophyProfileData, any>({
//         path: `/lol-trophies/v1/current-summoner/trophies/profile`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin lol-trophies
//      * @name GetLolTrophiesV1PlayersByPuuidTrophiesProfile
//      * @request GET:/lol-trophies/v1/players/{puuid}/trophies/profile
//      */
//     getLolTrophiesV1PlayersByPuuidTrophiesProfile: (puuid: any, params: RequestParams = {}) =>
//       this.request<LolTrophiesTrophyProfileData, any>({
//         path: `/lol-trophies/v1/players/${puuid}/trophies/profile`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   memory = {
//     /**
//      * No description
//      *
//      * @name GetMemoryV1FeProcessesReady
//      * @summary Returns whether or not the frontend processes are ready
//      * @request GET:/memory/v1/fe-processes-ready
//      */
//     getMemoryV1FeProcessesReady: (params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/memory/v1/fe-processes-ready`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostMemoryV1NotifyFeProcessesReady
//      * @summary Sends an event that the frontend processes are ready
//      * @request POST:/memory/v1/notify-fe-processes-ready
//      */
//     postMemoryV1NotifyFeProcessesReady: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/memory/v1/notify-fe-processes-ready`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostMemoryV1Snapshot
//      * @summary Sends current memory usage info to telemetry.
//      * @request POST:/memory/v1/snapshot
//      */
//     postMemoryV1Snapshot: (
//       query: {
//         context: string
//       },
//       data: number[],
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/memory/v1/snapshot`,
//         method: 'POST',
//         query: query,
//         body: data,
//         type: ContentType.Json,
//         ...params
//       })
//   }
//   patcher = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name GetPatcherV1Notifications
//      * @request GET:/patcher/v1/notifications
//      */
//     getPatcherV1Notifications: (params: RequestParams = {}) =>
//       this.request<PatcherNotification[], any>({
//         path: `/patcher/v1/notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name PostPatcherV1Notifications
//      * @request POST:/patcher/v1/notifications
//      */
//     postPatcherV1Notifications: (
//       query: {
//         notificationId:
//           | 'UnspecifiedError'
//           | 'ConnectionError'
//           | 'MissingFilesError'
//           | 'FailedToWriteError'
//           | 'WillRestoreClientBackupOnRestart'
//           | 'DidRestoreClientBackup'
//           | 'NotEnoughDiskSpace'
//           | 'BrokenPermissions'
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/patcher/v1/notifications`,
//         method: 'POST',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name DeletePatcherV1NotificationsById
//      * @request DELETE:/patcher/v1/notifications/{id}
//      */
//     deletePatcherV1NotificationsById: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/patcher/v1/notifications/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name GetPatcherV1P2PStatus
//      * @request GET:/patcher/v1/p2p/status
//      */
//     getPatcherV1P2PStatus: (params: RequestParams = {}) =>
//       this.request<PatcherP2PStatus, any>({
//         path: `/patcher/v1/p2p/status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name PatchPatcherV1P2PStatus
//      * @request PATCH:/patcher/v1/p2p/status
//      */
//     patchPatcherV1P2PStatus: (data: PatcherP2PStatusUpdate, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/patcher/v1/p2p/status`,
//         method: 'PATCH',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name GetPatcherV1Products
//      * @request GET:/patcher/v1/products
//      */
//     getPatcherV1Products: (params: RequestParams = {}) =>
//       this.request<string[], any>({
//         path: `/patcher/v1/products`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name PostPatcherV1ProductsLeagueOfLegendsFullRepairRequest
//      * @request POST:/patcher/v1/products/league_of_legends/full-repair-request
//      */
//     postPatcherV1ProductsLeagueOfLegendsFullRepairRequest: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/patcher/v1/products/league_of_legends/full-repair-request`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name DeletePatcherV1ProductsByProductId
//      * @request DELETE:/patcher/v1/products/{product-id}
//      */
//     deletePatcherV1ProductsByProductId: (productId: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/patcher/v1/products/${productId}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name PostPatcherV1ProductsByProductIdDetectCorruptionRequest
//      * @request POST:/patcher/v1/products/{product-id}/detect-corruption-request
//      */
//     postPatcherV1ProductsByProductIdDetectCorruptionRequest: (
//       productId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<PatcherProductState, any>({
//         path: `/patcher/v1/products/${productId}/detect-corruption-request`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name PostPatcherV1ProductsByProductIdPartialRepairRequest
//      * @request POST:/patcher/v1/products/{product-id}/partial-repair-request
//      */
//     postPatcherV1ProductsByProductIdPartialRepairRequest: (
//       productId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/patcher/v1/products/${productId}/partial-repair-request`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name GetPatcherV1ProductsByProductIdPaths
//      * @request GET:/patcher/v1/products/{product-id}/paths
//      */
//     getPatcherV1ProductsByProductIdPaths: (productId: any, params: RequestParams = {}) =>
//       this.request<Record<string, string>, any>({
//         path: `/patcher/v1/products/${productId}/paths`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name PostPatcherV1ProductsByProductIdSignalStartPatchingDelayed
//      * @request POST:/patcher/v1/products/{product-id}/signal-start-patching-delayed
//      */
//     postPatcherV1ProductsByProductIdSignalStartPatchingDelayed: (
//       productId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/patcher/v1/products/${productId}/signal-start-patching-delayed`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name PostPatcherV1ProductsByProductIdStartCheckingRequest
//      * @request POST:/patcher/v1/products/{product-id}/start-checking-request
//      */
//     postPatcherV1ProductsByProductIdStartCheckingRequest: (
//       productId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/patcher/v1/products/${productId}/start-checking-request`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name PostPatcherV1ProductsByProductIdStartPatchingRequest
//      * @request POST:/patcher/v1/products/{product-id}/start-patching-request
//      */
//     postPatcherV1ProductsByProductIdStartPatchingRequest: (
//       productId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/patcher/v1/products/${productId}/start-patching-request`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name GetPatcherV1ProductsByProductIdState
//      * @request GET:/patcher/v1/products/{product-id}/state
//      */
//     getPatcherV1ProductsByProductIdState: (productId: any, params: RequestParams = {}) =>
//       this.request<PatcherProductState, any>({
//         path: `/patcher/v1/products/${productId}/state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name PostPatcherV1ProductsByProductIdStopCheckingRequest
//      * @request POST:/patcher/v1/products/{product-id}/stop-checking-request
//      */
//     postPatcherV1ProductsByProductIdStopCheckingRequest: (
//       productId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/patcher/v1/products/${productId}/stop-checking-request`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name PostPatcherV1ProductsByProductIdStopPatchingRequest
//      * @request POST:/patcher/v1/products/{product-id}/stop-patching-request
//      */
//     postPatcherV1ProductsByProductIdStopPatchingRequest: (
//       productId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/patcher/v1/products/${productId}/stop-patching-request`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name GetPatcherV1ProductsByProductIdTags
//      * @request GET:/patcher/v1/products/{product-id}/tags
//      */
//     getPatcherV1ProductsByProductIdTags: (productId: any, params: RequestParams = {}) =>
//       this.request<Record<string, string>, any>({
//         path: `/patcher/v1/products/${productId}/tags`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name PutPatcherV1SelfUpdateRestart
//      * @request PUT:/patcher/v1/self-update-restart
//      */
//     putPatcherV1SelfUpdateRestart: (
//       query: {
//         forceRestartOnSelfUpdate: boolean
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/patcher/v1/self-update-restart`,
//         method: 'PUT',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name GetPatcherV1Status
//      * @request GET:/patcher/v1/status
//      */
//     getPatcherV1Status: (params: RequestParams = {}) =>
//       this.request<PatcherStatus, any>({
//         path: `/patcher/v1/status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin patcher
//      * @name PutPatcherV1Ux
//      * @request PUT:/patcher/v1/ux
//      */
//     putPatcherV1Ux: (data: PatcherUxResource, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/patcher/v1/ux`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       })
//   }
//   payments = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin payments
//      * @name PostPaymentsV1PmcStartUrl
//      * @request POST:/payments/v1/pmc-start-url
//      */
//     postPaymentsV1PmcStartUrl: (data: PaymentsFrontEndRequest, params: RequestParams = {}) =>
//       this.request<PaymentsFrontEndResult, any>({
//         path: `/payments/v1/pmc-start-url`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   performance = {
//     /**
//      * No description
//      *
//      * @name GetPerformanceV1Memory
//      * @summary Returns process memory status
//      * @request GET:/performance/v1/memory
//      */
//     getPerformanceV1Memory: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/performance/v1/memory`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags performance
//      * @name PostPerformanceV1ProcessByProcessId
//      * @summary Registers the process and includes it with the performance information.
//      * @request POST:/performance/v1/process/{processId}
//      */
//     postPerformanceV1ProcessByProcessId: (processId: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/performance/v1/process/${processId}`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags performance
//      * @name GetPerformanceV1Report
//      * @summary Returns the various performance information for the cef processes
//      * @request GET:/performance/v1/report
//      */
//     getPerformanceV1Report: (params: RequestParams = {}) =>
//       this.request<Record<string, any>[], any>({
//         path: `/performance/v1/report`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags performance
//      * @name PostPerformanceV1ReportRestart
//      * @summary Restarts the CPU timing information and returns the results from PerfReportProcesses
//      * @request POST:/performance/v1/report/restart
//      */
//     postPerformanceV1ReportRestart: (
//       query?: {
//         /**
//          * Time in seconds for each CPU timing sample.
//          * @format int32
//          */
//         sampleLength?: number
//         /**
//          * Number of samples to record.
//          * @format int32
//          */
//         sampleCount?: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>[], any>({
//         path: `/performance/v1/report/restart`,
//         method: 'POST',
//         query: query,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetPerformanceV1SystemInfo
//      * @summary Returns hardware and software specs for the machine the client is running on.
//      * @request GET:/performance/v1/system-info
//      */
//     getPerformanceV1SystemInfo: (
//       query?: {
//         /**
//          * Returns all available system information
//          * @format int32
//          */
//         full?: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<Record<string, any>, any>({
//         path: `/performance/v1/system-info`,
//         method: 'GET',
//         query: query,
//         format: 'json',
//         ...params
//       })
//   }
//   playerNotifications = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin player-notifications
//      * @name GetPlayerNotificationsV1Config
//      * @request GET:/player-notifications/v1/config
//      */
//     getPlayerNotificationsV1Config: (params: RequestParams = {}) =>
//       this.request<PlayerNotificationsPlayerNotificationConfigResource, any>({
//         path: `/player-notifications/v1/config`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin player-notifications
//      * @name PutPlayerNotificationsV1Config
//      * @request PUT:/player-notifications/v1/config
//      */
//     putPlayerNotificationsV1Config: (
//       data: PlayerNotificationsPlayerNotificationConfigResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<PlayerNotificationsPlayerNotificationConfigResource, any>({
//         path: `/player-notifications/v1/config`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin player-notifications
//      * @name GetPlayerNotificationsV1Notifications
//      * @request GET:/player-notifications/v1/notifications
//      */
//     getPlayerNotificationsV1Notifications: (params: RequestParams = {}) =>
//       this.request<PlayerNotificationsPlayerNotificationResource[], any>({
//         path: `/player-notifications/v1/notifications`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin player-notifications
//      * @name PostPlayerNotificationsV1Notifications
//      * @request POST:/player-notifications/v1/notifications
//      */
//     postPlayerNotificationsV1Notifications: (
//       data: PlayerNotificationsPlayerNotificationResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<PlayerNotificationsPlayerNotificationResource, any>({
//         path: `/player-notifications/v1/notifications`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin player-notifications
//      * @name DeletePlayerNotificationsV1NotificationsById
//      * @request DELETE:/player-notifications/v1/notifications/{id}
//      */
//     deletePlayerNotificationsV1NotificationsById: (id: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/player-notifications/v1/notifications/${id}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin player-notifications
//      * @name GetPlayerNotificationsV1NotificationsById
//      * @request GET:/player-notifications/v1/notifications/{id}
//      */
//     getPlayerNotificationsV1NotificationsById: (id: any, params: RequestParams = {}) =>
//       this.request<PlayerNotificationsPlayerNotificationResource, any>({
//         path: `/player-notifications/v1/notifications/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin player-notifications
//      * @name PutPlayerNotificationsV1NotificationsById
//      * @request PUT:/player-notifications/v1/notifications/{id}
//      */
//     putPlayerNotificationsV1NotificationsById: (
//       id: any,
//       data: Record<string, any>,
//       params: RequestParams = {}
//     ) =>
//       this.request<PlayerNotificationsPlayerNotificationResource, any>({
//         path: `/player-notifications/v1/notifications/${id}`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       })
//   }
//   pluginManager = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin Manager, Plugin Manager Diagnostics
//      * @name GetPluginManagerV1ExternalPluginsAvailability
//      * @summary Get the status of the external plugin connection.
//      * @request GET:/plugin-manager/v1/external-plugins/availability
//      */
//     getPluginManagerV1ExternalPluginsAvailability: (params: RequestParams = {}) =>
//       this.request<ExternalPluginsResource, any>({
//         path: `/plugin-manager/v1/external-plugins/availability`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin Manager, Plugin Manager Diagnostics
//      * @name GetPluginManagerV1Status
//      * @summary Get the status of the plugin manager.
//      * @request GET:/plugin-manager/v1/status
//      */
//     getPluginManagerV1Status: (params: RequestParams = {}) =>
//       this.request<PluginManagerResource, any>({
//         path: `/plugin-manager/v1/status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin Manager, Plugin Manager Info
//      * @name GetPluginManagerV2Descriptions
//      * @summary Get all plugin descriptions.
//      * @request GET:/plugin-manager/v2/descriptions
//      */
//     getPluginManagerV2Descriptions: (params: RequestParams = {}) =>
//       this.request<PluginDescriptionResource[], any>({
//         path: `/plugin-manager/v2/descriptions`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin Manager, Plugin Manager Info
//      * @name GetPluginManagerV2DescriptionsByPlugin
//      * @summary Get a plugin description.
//      * @request GET:/plugin-manager/v2/descriptions/{plugin}
//      */
//     getPluginManagerV2DescriptionsByPlugin: (plugin: any, params: RequestParams = {}) =>
//       this.request<PluginDescriptionResource, any>({
//         path: `/plugin-manager/v2/descriptions/${plugin}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin Manager, Plugin Manager Diagnostics
//      * @name GetPluginManagerV2Plugins
//      * @summary Get diagnostic information for all plugins.
//      * @request GET:/plugin-manager/v2/plugins
//      */
//     getPluginManagerV2Plugins: (params: RequestParams = {}) =>
//       this.request<PluginResource[], any>({
//         path: `/plugin-manager/v2/plugins`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin Manager, Plugin Manager Diagnostics
//      * @name GetPluginManagerV2PluginsByPlugin
//      * @summary Get diagnostic information for a single plugin.
//      * @request GET:/plugin-manager/v2/plugins/{plugin}
//      */
//     getPluginManagerV2PluginsByPlugin: (plugin: any, params: RequestParams = {}) =>
//       this.request<PluginResource, any>({
//         path: `/plugin-manager/v2/plugins/${plugin}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin Manager, Plugin Manager Info
//      * @name GetPluginManagerV3PluginsManifest
//      * @summary Get the plugin manifest.
//      * @request GET:/plugin-manager/v3/plugins-manifest
//      */
//     getPluginManagerV3PluginsManifest: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/plugin-manager/v3/plugins-manifest`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   processControl = {
//     /**
//      * No description
//      *
//      * @name GetProcessControlV1Process
//      * @summary Returns information about the process-control.
//      * @request GET:/process-control/v1/process
//      */
//     getProcessControlV1Process: (params: RequestParams = {}) =>
//       this.request<ProcessControlProcess, any>({
//         path: `/process-control/v1/process`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostProcessControlV1ProcessQuit
//      * @summary Quits the application.
//      * @request POST:/process-control/v1/process/quit
//      */
//     postProcessControlV1ProcessQuit: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/process-control/v1/process/quit`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostProcessControlV1ProcessRestart
//      * @summary Restarts the application.  Does nothing if there is already a waiting delayed restart.  Optionally accepts specific version to restart.
//      * @request POST:/process-control/v1/process/restart
//      */
//     postProcessControlV1ProcessRestart: (
//       query: {
//         /** @format int32 */
//         delaySeconds: number
//         /** @format int32 */
//         restartVersion?: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/process-control/v1/process/restart`,
//         method: 'POST',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostProcessControlV1ProcessRestartToRepair
//      * @summary Restarts the application in order to perform a full repair (including self repair).
//      * @request POST:/process-control/v1/process/restart-to-repair
//      */
//     postProcessControlV1ProcessRestartToRepair: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/process-control/v1/process/restart-to-repair`,
//         method: 'POST',
//         ...params
//       })
//   }
//   riotMessagingService = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name DeleteRiotMessagingServiceV1Connect
//      * @request DELETE:/riot-messaging-service/v1/connect
//      */
//     deleteRiotMessagingServiceV1Connect: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riot-messaging-service/v1/connect`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name PostRiotMessagingServiceV1Connect
//      * @request POST:/riot-messaging-service/v1/connect
//      */
//     postRiotMessagingServiceV1Connect: (data: string, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riot-messaging-service/v1/connect`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name DeleteRiotMessagingServiceV1Entitlements
//      * @request DELETE:/riot-messaging-service/v1/entitlements
//      */
//     deleteRiotMessagingServiceV1Entitlements: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riot-messaging-service/v1/entitlements`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name PostRiotMessagingServiceV1Entitlements
//      * @request POST:/riot-messaging-service/v1/entitlements
//      */
//     postRiotMessagingServiceV1Entitlements: (
//       data: RiotMessagingServiceEntitlementsToken,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/riot-messaging-service/v1/entitlements`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name GetRiotMessagingServiceV1MessageByA
//      * @request GET:/riot-messaging-service/v1/message/{a}
//      */
//     getRiotMessagingServiceV1MessageByA: (a: any, params: RequestParams = {}) =>
//       this.request<RmsMessage, any>({
//         path: `/riot-messaging-service/v1/message/{a}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name GetRiotMessagingServiceV1MessageByAByB
//      * @request GET:/riot-messaging-service/v1/message/{a}/{b}
//      */
//     getRiotMessagingServiceV1MessageByAByB: (a: any, b: any, params: RequestParams = {}) =>
//       this.request<RmsMessage, any>({
//         path: `/riot-messaging-service/v1/message/{a}/{b}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name GetRiotMessagingServiceV1MessageByAByBByC
//      * @request GET:/riot-messaging-service/v1/message/{a}/{b}/{c}
//      */
//     getRiotMessagingServiceV1MessageByAByBByC: (
//       a: any,
//       b: any,
//       c: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<RmsMessage, any>({
//         path: `/riot-messaging-service/v1/message/{a}/{b}/{c}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name GetRiotMessagingServiceV1MessageByAByBByCByD
//      * @request GET:/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}
//      */
//     getRiotMessagingServiceV1MessageByAByBByCByD: (
//       a: any,
//       b: any,
//       c: any,
//       d: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<RmsMessage, any>({
//         path: `/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name GetRiotMessagingServiceV1MessageByAByBByCByDByE
//      * @request GET:/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}
//      */
//     getRiotMessagingServiceV1MessageByAByBByCByDByE: (
//       a: any,
//       b: any,
//       c: any,
//       d: any,
//       e: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<RmsMessage, any>({
//         path: `/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name GetRiotMessagingServiceV1MessageByAByBByCByDByEByF
//      * @request GET:/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}/{f}
//      */
//     getRiotMessagingServiceV1MessageByAByBByCByDByEByF: (
//       a: any,
//       b: any,
//       c: any,
//       d: any,
//       e: any,
//       f: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<RmsMessage, any>({
//         path: `/riot-messaging-service/v1/message/{a}/{b}/{c}/{d}/{e}/{f}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name DeleteRiotMessagingServiceV1Session
//      * @request DELETE:/riot-messaging-service/v1/session
//      */
//     deleteRiotMessagingServiceV1Session: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riot-messaging-service/v1/session`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name GetRiotMessagingServiceV1Session
//      * @request GET:/riot-messaging-service/v1/session
//      */
//     getRiotMessagingServiceV1Session: (params: RequestParams = {}) =>
//       this.request<RiotMessagingServiceSession, any>({
//         path: `/riot-messaging-service/v1/session`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin riot-messaging-service
//      * @name GetRiotMessagingServiceV1State
//      * @request GET:/riot-messaging-service/v1/state
//      */
//     getRiotMessagingServiceV1State: (params: RequestParams = {}) =>
//       this.request<RiotMessagingServiceState, any>({
//         path: `/riot-messaging-service/v1/state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   riotclient = {
//     /**
//      * No description
//      *
//      * @tags core, logging
//      * @name PostRiotclientAddorupdatemetric
//      * @summary Adds or Updates a Metric
//      * @request POST:/riotclient/addorupdatemetric
//      */
//     postRiotclientAddorupdatemetric: (
//       query: {
//         /** Name of metric group */
//         group: string
//         /** Name of metric object */
//         object: string
//         /** Name of metric item */
//         name: string
//         /**
//          * Value to store
//          * @format int64
//          */
//         value: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/riotclient/addorupdatemetric`,
//         method: 'POST',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name DeleteRiotclientAffinity
//      * @summary Deletes the current runtime affinity of the application.
//      * @request DELETE:/riotclient/affinity
//      */
//     deleteRiotclientAffinity: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/affinity`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientAffinity
//      * @summary Get the current runtime affinity of the application.
//      * @request GET:/riotclient/affinity
//      */
//     getRiotclientAffinity: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/riotclient/affinity`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientAffinity
//      * @summary Sets the current runtime affinity of the application.
//      * @request POST:/riotclient/affinity
//      */
//     postRiotclientAffinity: (
//       query: {
//         /** The new affinity to use. */
//         newAffinity: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/riotclient/affinity`,
//         method: 'POST',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientAppName
//      * @summary Application name without file extension
//      * @request GET:/riotclient/app-name
//      */
//     getRiotclientAppName: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/riotclient/app-name`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientAppPort
//      * @summary Get the TCP port number that the remoting server is listening on.
//      * @request GET:/riotclient/app-port
//      */
//     getRiotclientAppPort: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/riotclient/app-port`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientAuthToken
//      * @summary Return the auth token used by the remoting server
//      * @request GET:/riotclient/auth-token
//      */
//     getRiotclientAuthToken: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/riotclient/auth-token`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientCommandLineArgs
//      * @summary Get the command line parameters for the application
//      * @request GET:/riotclient/command-line-args
//      */
//     getRiotclientCommandLineArgs: (params: RequestParams = {}) =>
//       this.request<string[], any>({
//         path: `/riotclient/command-line-args`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientGetRegionLocale
//      * @summary Get the current region and locale.
//      * @request GET:/riotclient/get_region_locale
//      */
//     getRiotclientGetRegionLocale: (params: RequestParams = {}) =>
//       this.request<RegionLocale, any>({
//         path: `/riotclient/get_region_locale`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientKillAndRestartUx
//      * @summary Kills the ux process and restarts it. Used only when the ux process crashes.
//      * @request POST:/riotclient/kill-and-restart-ux
//      */
//     postRiotclientKillAndRestartUx: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/kill-and-restart-ux`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientKillUx
//      * @summary Kills the ux process.
//      * @request POST:/riotclient/kill-ux
//      */
//     postRiotclientKillUx: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/kill-ux`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientLaunchUx
//      * @summary Launches the ux process.
//      * @request POST:/riotclient/launch-ux
//      */
//     postRiotclientLaunchUx: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/launch-ux`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientMachineId
//      * @summary Base64 encoded uuid identifying the user's machine
//      * @request GET:/riotclient/machine-id
//      */
//     getRiotclientMachineId: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/riotclient/machine-id`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientNewArgs
//      * @summary Endpoint for passing in new data.
//      * @request POST:/riotclient/new-args
//      */
//     postRiotclientNewArgs: (data: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/new-args`,
//         method: 'POST',
//         body: data,
//         type: ContentType.UrlEncoded,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientRegionLocale
//      * @summary Get the current region and locale.
//      * @request GET:/riotclient/region-locale
//      */
//     getRiotclientRegionLocale: (params: RequestParams = {}) =>
//       this.request<RegionLocale, any>({
//         path: `/riotclient/region-locale`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PutRiotclientRegionLocale
//      * @summary Update the region and locale.
//      * @request PUT:/riotclient/region-locale
//      */
//     putRiotclientRegionLocale: (data: RegionLocale, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/region-locale`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PutRiotclientRegionLocaleAck
//      * @summary Ux acknowledges the update to the region and locale.
//      * @request PUT:/riotclient/region-locale/ack
//      */
//     putRiotclientRegionLocaleAck: (data: number, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/region-locale/ack`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientSetRegionLocale
//      * @summary Update the region and locale.
//      * @request POST:/riotclient/set_region_locale
//      */
//     postRiotclientSetRegionLocale: (
//       query: {
//         /** Name of the region. */
//         region: string
//         /** Name of the locale. */
//         locale: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/riotclient/set_region_locale`,
//         method: 'POST',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientShowSwagger
//      * @summary Open swagger in the default browser.
//      * @request POST:/riotclient/show-swagger
//      */
//     postRiotclientShowSwagger: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/show-swagger`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name DeleteRiotclientSplash
//      * @summary Hide the splash screen.
//      * @request DELETE:/riotclient/splash
//      */
//     deleteRiotclientSplash: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/splash`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PutRiotclientSplash
//      * @summary Show the splash screen.
//      * @request PUT:/riotclient/splash
//      */
//     putRiotclientSplash: (
//       query: {
//         splash: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/riotclient/splash`,
//         method: 'PUT',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientSystemInfoV1BasicInfo
//      * @summary Get basic system information: OS, memory, processor speed, and number of physical cores
//      * @request GET:/riotclient/system-info/v1/basic-info
//      */
//     getRiotclientSystemInfoV1BasicInfo: (params: RequestParams = {}) =>
//       this.request<BasicSystemInfo, any>({
//         path: `/riotclient/system-info/v1/basic-info`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientTrace
//      * @summary Retrieves a completed scheduler trace.
//      * @request GET:/riotclient/trace
//      */
//     getRiotclientTrace: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/riotclient/trace`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientUnload
//      * @summary Unloads the UX process
//      * @request POST:/riotclient/unload
//      */
//     postRiotclientUnload: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/unload`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientUxAllowForeground
//      * @summary Allows the background process to launch the game into the foregound.
//      * @request POST:/riotclient/ux-allow-foreground
//      */
//     postRiotclientUxAllowForeground: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/ux-allow-foreground`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientUxCrashCount
//      * @summary Returns whether the ux has crashed or not
//      * @request GET:/riotclient/ux-crash-count
//      */
//     getRiotclientUxCrashCount: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/riotclient/ux-crash-count`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientUxFlash
//      * @summary Flash the ux process' main window and the taskbar/dock icon, if they exist.
//      * @request POST:/riotclient/ux-flash
//      */
//     postRiotclientUxFlash: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/ux-flash`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PutRiotclientUxLoadComplete
//      * @summary Ux notification that it has completed loading the main window.
//      * @request PUT:/riotclient/ux-load-complete
//      */
//     putRiotclientUxLoadComplete: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/ux-load-complete`,
//         method: 'PUT',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientUxMinimize
//      * @summary Minimize the ux process and all its windows if it exists. This does not kill the ux.
//      * @request POST:/riotclient/ux-minimize
//      */
//     postRiotclientUxMinimize: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/ux-minimize`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientUxShow
//      * @summary Shows the ux process if it exists; create and show if it does not.
//      * @request POST:/riotclient/ux-show
//      */
//     postRiotclientUxShow: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/ux-show`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientUxState
//      * @summary Get the current Ux state.
//      * @request GET:/riotclient/ux-state
//      */
//     getRiotclientUxState: (params: RequestParams = {}) =>
//       this.request<string, any>({
//         path: `/riotclient/ux-state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PutRiotclientUxStateAck
//      * @summary Ux acknowledges the update to the Ux state.
//      * @request PUT:/riotclient/ux-state/ack
//      */
//     putRiotclientUxStateAck: (data: number, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/ux-state/ack`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name DeleteRiotclientV1AuthTokensByAuthToken
//      * @summary Unregister an existing auth token.
//      * @request DELETE:/riotclient/v1/auth-tokens/{authToken}
//      */
//     deleteRiotclientV1AuthTokensByAuthToken: (authToken: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/riotclient/v1/auth-tokens/${authToken}`,
//         method: 'DELETE',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PutRiotclientV1AuthTokensByAuthToken
//      * @summary Register an auth token.  This is any alpha-numeric string that will be used as a password with the `riot` user when making requests.
//      * @request PUT:/riotclient/v1/auth-tokens/{authToken}
//      */
//     putRiotclientV1AuthTokensByAuthToken: (authToken: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/riotclient/v1/auth-tokens/${authToken}`,
//         method: 'PUT',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientV1CrashReportingEnvironment
//      * @summary Get the crash reporting environment identifier.
//      * @request GET:/riotclient/v1/crash-reporting/environment
//      */
//     getRiotclientV1CrashReportingEnvironment: (params: RequestParams = {}) =>
//       this.request<CrashReportingEnvironment, any>({
//         path: `/riotclient/v1/crash-reporting/environment`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PutRiotclientV1CrashReportingEnvironment
//      * @summary Tags the crash with an environment so it can be filtered more easily.
//      * @request PUT:/riotclient/v1/crash-reporting/environment
//      */
//     putRiotclientV1CrashReportingEnvironment: (
//       data: CrashReportingEnvironment,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/riotclient/v1/crash-reporting/environment`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientV1CrashReportingLogs
//      * @summary Adds the enclosed log to the app's crash report.
//      * @request POST:/riotclient/v1/crash-reporting/logs
//      */
//     postRiotclientV1CrashReportingLogs: (data: string, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/v1/crash-reporting/logs`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientV1ElevationRequests
//      * @request POST:/riotclient/v1/elevation-requests
//      */
//     postRiotclientV1ElevationRequests: (data: ElevationRequest, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/riotclient/v1/elevation-requests`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PutRiotclientV1SelfUpdateInfo
//      * @request PUT:/riotclient/v1/self-update-info
//      */
//     putRiotclientV1SelfUpdateInfo: (
//       query: {
//         url: string
//         uuid: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/riotclient/v1/self-update-info`,
//         method: 'PUT',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name GetRiotclientZoomScale
//      * @summary Gets the last known posted zoom-scale value.
//      * @request GET:/riotclient/zoom-scale
//      */
//     getRiotclientZoomScale: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/riotclient/zoom-scale`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostRiotclientZoomScale
//      * @summary Handles changing the zoom scale value.
//      * @request POST:/riotclient/zoom-scale
//      */
//     postRiotclientZoomScale: (
//       query: {
//         /**
//          * The new value of the zoom scale.
//          * @format double
//          */
//         newZoomScale: number
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/riotclient/zoom-scale`,
//         method: 'POST',
//         query: query,
//         ...params
//       })
//   }
//   sanitizer = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin sanitizer
//      * @name PostSanitizerV1ContainsSanitized
//      * @request POST:/sanitizer/v1/containsSanitized
//      */
//     postSanitizerV1ContainsSanitized: (
//       data: SanitizerContainsSanitizedRequest,
//       params: RequestParams = {}
//     ) =>
//       this.request<SanitizerContainsSanitizedResponse, any>({
//         path: `/sanitizer/v1/containsSanitized`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin sanitizer
//      * @name PostSanitizerV1Sanitize
//      * @request POST:/sanitizer/v1/sanitize
//      */
//     postSanitizerV1Sanitize: (data: SanitizerSanitizeRequest, params: RequestParams = {}) =>
//       this.request<SanitizerSanitizeResponse, any>({
//         path: `/sanitizer/v1/sanitize`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin sanitizer
//      * @name GetSanitizerV1Status
//      * @request GET:/sanitizer/v1/status
//      */
//     getSanitizerV1Status: (params: RequestParams = {}) =>
//       this.request<SanitizerSanitizerStatus, any>({
//         path: `/sanitizer/v1/status`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   swagger = {
//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name HttpApiDocsV1
//      * @summary Retrieves the API documentation resource listing
//      * @request GET:/swagger/v1/api-docs
//      */
//     httpApiDocsV1: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/swagger/v1/api-docs`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name HttpApiDeclarationV1
//      * @summary Retrieves the API declaration for a supported API
//      * @request GET:/swagger/v1/api-docs/{api}
//      */
//     httpApiDeclarationV1: (api: any, api: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/swagger/v1/api-docs/${api}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name HttpApiDocsV2
//      * @summary Retrieves the API documentation
//      * @request GET:/swagger/v2/swagger.json
//      */
//     httpApiDocsV2: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/swagger/v2/swagger.json`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags builtin
//      * @name HttpApiDocsV3
//      * @summary Retrieves the API documentation
//      * @request GET:/swagger/v3/openapi.json
//      */
//     httpApiDocsV3: (params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/swagger/v3/openapi.json`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   system = {
//     /**
//      * No description
//      *
//      * @name GetSystemV1Builds
//      * @summary Information about the current artifacts that make up this build
//      * @request GET:/system/v1/builds
//      */
//     getSystemV1Builds: (params: RequestParams = {}) =>
//       this.request<BuildInfo, any>({
//         path: `/system/v1/builds`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   telemetry = {
//     /**
//      * No description
//      *
//      * @name GetTelemetryV1ApplicationStartTime
//      * @summary Gets the millisecond UNIX timestamp of when the application was started.
//      * @request GET:/telemetry/v1/application-start-time
//      */
//     getTelemetryV1ApplicationStartTime: (params: RequestParams = {}) =>
//       this.request<number, any>({
//         path: `/telemetry/v1/application-start-time`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostTelemetryV1CommonDataByKey
//      * @summary Adds/updates a common data key and value to be sent with every subsequent event.
//      * @request POST:/telemetry/v1/common-data/{key}
//      */
//     postTelemetryV1CommonDataByKey: (key: any, data: string, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/telemetry/v1/common-data/${key}`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostTelemetryV1EventsOnceByEventType
//      * @summary Adds a new event to be sent to Dradis and/or other analytics/monitoring data sinks that will be sent only once during this client executable run regardless of any javascript frontend restarts. All events will have their eventType prefixed with "riot__rclient__"
//      * @request POST:/telemetry/v1/events-once/{eventType}
//      */
//     postTelemetryV1EventsOnceByEventType: (
//       eventType: any,
//       query: {
//         /** A unique tag used to ensure this event is sent only once */
//         onceTag: string
//       },
//       data: Record<string, Record<string, any>>,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/telemetry/v1/events-once/${eventType}`,
//         method: 'POST',
//         query: query,
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostTelemetryV1EventsWithPerfInfoByEventType
//      * @summary Adds a new event to be sent to Dradis and/or other analytics/monitoring data sinks. This will include current performance information along with the passed in data. Each call will record the performance counters then reset them for use in the next call. All events will have their eventType prefixed with "riot__rclient__"
//      * @request POST:/telemetry/v1/events-with-perf-info/{eventType}
//      */
//     postTelemetryV1EventsWithPerfInfoByEventType: (
//       eventType: any,
//       data: Record<string, Record<string, any>>,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/telemetry/v1/events-with-perf-info/${eventType}`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostTelemetryV1EventsByEventType
//      * @summary Adds a new event to be sent to Dradis and/or other analytics/monitoring data sinks. All events will have their eventType prefixed with "riot__rclient__"
//      * @request POST:/telemetry/v1/events/{eventType}
//      */
//     postTelemetryV1EventsByEventType: (
//       eventType: any,
//       data: Record<string, Record<string, any>>,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/telemetry/v1/events/${eventType}`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostTelemetryV3EventsOnceByEventType
//      * @summary Adds a new event to be sent to Dradis and/or other analytics/monitoring data sinks using the Riot Data API that will be sent only once during this client executable run regardless of any javascript frontend restarts. All events will have their eventType prefixed with "riot__rclient__"
//      * @request POST:/telemetry/v3/events-once/{eventType}
//      */
//     postTelemetryV3EventsOnceByEventType: (
//       eventType: any,
//       query: {
//         /** A unique tag used to ensure this event is sent only once */
//         onceTag: string
//       },
//       data: Record<string, Record<string, any>>,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/telemetry/v3/events-once/${eventType}`,
//         method: 'POST',
//         query: query,
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @name PostTelemetryV3EventsByEventType
//      * @summary Adds a new event to be sent to Dradis and/or other analytics/monitoring data sinks using the Riot Data API. All events will have their eventType prefixed with "riot__rclient__"
//      * @request POST:/telemetry/v3/events/{eventType}
//      */
//     postTelemetryV3EventsByEventType: (
//       eventType: any,
//       data: Record<string, Record<string, any>>,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/telemetry/v3/events/${eventType}`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       })
//   }
//   tracing = {
//     /**
//      * No description
//      *
//      * @tags Tracing
//      * @name DeleteTracingV1PerformanceByName
//      * @summary Ends recording of a performance metric.
//      * @request DELETE:/tracing/v1/performance/{name}
//      */
//     deleteTracingV1PerformanceByName: (name: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/tracing/v1/performance/${name}`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Tracing
//      * @name PostTracingV1PerformanceByName
//      * @summary Starts recording of a performance metric.
//      * @request POST:/tracing/v1/performance/{name}
//      */
//     postTracingV1PerformanceByName: (name: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/tracing/v1/performance/${name}`,
//         method: 'POST',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Tracing
//      * @name PostTracingV1TraceEvent
//      * @summary Record a tracing event.
//      * @request POST:/tracing/v1/trace/event
//      */
//     postTracingV1TraceEvent: (data: TracingEventV1, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/tracing/v1/trace/event`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Tracing
//      * @name PostTracingV1TraceModule
//      * @summary Record a module description.
//      * @request POST:/tracing/v1/trace/module
//      */
//     postTracingV1TraceModule: (data: TracingModuleV1, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/tracing/v1/trace/module`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Tracing
//      * @name PostTracingV1TraceNonTimingEventByEventName
//      * @summary Record a non timing telemetry event.
//      * @request POST:/tracing/v1/trace/non-timing-event/{eventName}
//      */
//     postTracingV1TraceNonTimingEventByEventName: (
//       eventName: any,
//       query: {
//         /** The value to be recorded */
//         value: string
//         /** The unit of measurement for the value */
//         unit: string
//       },
//       data: number,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/tracing/v1/trace/non-timing-event/${eventName}`,
//         method: 'POST',
//         query: query,
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Tracing
//      * @name PostTracingV1TracePhaseBegin
//      * @summary Record a tracing phase beginning.
//      * @request POST:/tracing/v1/trace/phase/begin
//      */
//     postTracingV1TracePhaseBegin: (data: TracingPhaseBeginV1, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/tracing/v1/trace/phase/begin`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Tracing
//      * @name PostTracingV1TracePhaseEnd
//      * @summary Record a tracing phase ending.
//      * @request POST:/tracing/v1/trace/phase/end
//      */
//     postTracingV1TracePhaseEnd: (data: TracingPhaseEndV1, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/tracing/v1/trace/phase/end`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Tracing
//      * @name PostTracingV1TraceStepEvent
//      * @summary Record a tracing step event.
//      * @request POST:/tracing/v1/trace/step-event
//      */
//     postTracingV1TraceStepEvent: (data: string, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/tracing/v1/trace/step-event`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Tracing
//      * @name DeleteTracingV1TraceTimeSeriesEventByEventName
//      * @summary Record the ending of a time series event.
//      * @request DELETE:/tracing/v1/trace/time-series-event/{eventName}
//      */
//     deleteTracingV1TraceTimeSeriesEventByEventName: (
//       eventName: any,
//       query: {
//         /**
//          * When the event occurred
//          * @format int64
//          */
//         when: number
//         /** Optional eventName suffix to apply that mutates the event name to indicate the outcome */
//         suffix?: string
//       },
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/tracing/v1/trace/time-series-event/${eventName}`,
//         method: 'DELETE',
//         query: query,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Tracing
//      * @name PostTracingV1TraceTimeSeriesEventByEventName
//      * @summary Record the beginning of a time series event.
//      * @request POST:/tracing/v1/trace/time-series-event/{eventName}
//      */
//     postTracingV1TraceTimeSeriesEventByEventName: (
//       eventName: any,
//       data: number,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/tracing/v1/trace/time-series-event/${eventName}`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Tracing
//      * @name PostTracingV1TraceTimeSeriesEventByEventNameMarkerByMarkerName
//      * @summary Record a marker within a time series event.
//      * @request POST:/tracing/v1/trace/time-series-event/{eventName}/marker/{markerName}
//      */
//     postTracingV1TraceTimeSeriesEventByEventNameMarkerByMarkerName: (
//       eventName: any,
//       markerName: any,
//       data: number,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/tracing/v1/trace/time-series-event/${eventName}/marker/${markerName}`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       })
//   }
//   voiceChat = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV1AudioProperties
//      * @request GET:/voice-chat/v1/audio-properties
//      */
//     getVoiceChatV1AudioProperties: (params: RequestParams = {}) =>
//       this.request<VoiceChatAudioPropertiesResource, any>({
//         path: `/voice-chat/v1/audio-properties`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV1CallStatsAggregate
//      * @request GET:/voice-chat/v1/call-stats/aggregate
//      */
//     getVoiceChatV1CallStatsAggregate: (params: RequestParams = {}) =>
//       this.request<VoiceChatCallStatsResource, any>({
//         path: `/voice-chat/v1/call-stats/aggregate`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV1CallStatsById
//      * @request GET:/voice-chat/v1/call-stats/{id}
//      */
//     getVoiceChatV1CallStatsById: (id: any, params: RequestParams = {}) =>
//       this.request<VoiceChatCallStatsResource[], any>({
//         path: `/voice-chat/v1/call-stats/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV1CodecSettings
//      * @request GET:/voice-chat/v1/codec-settings
//      */
//     getVoiceChatV1CodecSettings: (params: RequestParams = {}) =>
//       this.request<VoiceChatCodecSettingsResource, any>({
//         path: `/voice-chat/v1/codec-settings`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name PutVoiceChatV1CodecSettings
//      * @request PUT:/voice-chat/v1/codec-settings
//      */
//     putVoiceChatV1CodecSettings: (
//       data: VoiceChatUpdateCodecSettingsResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/voice-chat/v1/codec-settings`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV1Config
//      * @request GET:/voice-chat/v1/config
//      */
//     getVoiceChatV1Config: (params: RequestParams = {}) =>
//       this.request<VoiceChatConfigResource, any>({
//         path: `/voice-chat/v1/config`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV1Errors
//      * @request GET:/voice-chat/v1/errors
//      */
//     getVoiceChatV1Errors: (params: RequestParams = {}) =>
//       this.request<VoiceChatVoiceErrorCounterResource[], any>({
//         path: `/voice-chat/v1/errors`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV1PushToTalk
//      * @request GET:/voice-chat/v1/push-to-talk
//      */
//     getVoiceChatV1PushToTalk: (params: RequestParams = {}) =>
//       this.request<VoiceChatPushToTalkResource, any>({
//         path: `/voice-chat/v1/push-to-talk`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name PutVoiceChatV1PushToTalk
//      * @request PUT:/voice-chat/v1/push-to-talk
//      */
//     putVoiceChatV1PushToTalk: (data: VoiceChatPushToTalkResource, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/voice-chat/v1/push-to-talk`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name PostVoiceChatV1PushToTalkCheckAvailable
//      * @request POST:/voice-chat/v1/push-to-talk/check-available
//      */
//     postVoiceChatV1PushToTalkCheckAvailable: (data: number, params: RequestParams = {}) =>
//       this.request<boolean, any>({
//         path: `/voice-chat/v1/push-to-talk/check-available`,
//         method: 'POST',
//         body: data,
//         type: ContentType.Json,
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV2DevicesCapture
//      * @request GET:/voice-chat/v2/devices/capture
//      */
//     getVoiceChatV2DevicesCapture: (params: RequestParams = {}) =>
//       this.request<VoiceChatDeviceResource[], any>({
//         path: `/voice-chat/v2/devices/capture`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV2DevicesCapturePermission
//      * @request GET:/voice-chat/v2/devices/capture/permission
//      */
//     getVoiceChatV2DevicesCapturePermission: (params: RequestParams = {}) =>
//       this.request<VoiceChatCaptureDevicePermissionStatus, any>({
//         path: `/voice-chat/v2/devices/capture/permission`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name PutVoiceChatV2DevicesCapturePromptForPermission
//      * @request PUT:/voice-chat/v2/devices/capture/prompt-for-permission
//      */
//     putVoiceChatV2DevicesCapturePromptForPermission: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/voice-chat/v2/devices/capture/prompt-for-permission`,
//         method: 'PUT',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV2DevicesRender
//      * @request GET:/voice-chat/v2/devices/render
//      */
//     getVoiceChatV2DevicesRender: (params: RequestParams = {}) =>
//       this.request<VoiceChatDeviceResource[], any>({
//         path: `/voice-chat/v2/devices/render`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name DeleteVoiceChatV2Sessions
//      * @request DELETE:/voice-chat/v2/sessions
//      */
//     deleteVoiceChatV2Sessions: (params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/voice-chat/v2/sessions`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV2Sessions
//      * @request GET:/voice-chat/v2/sessions
//      */
//     getVoiceChatV2Sessions: (params: RequestParams = {}) =>
//       this.request<VoiceChatSessionResource[], any>({
//         path: `/voice-chat/v2/sessions`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name PostVoiceChatV2Sessions
//      * @request POST:/voice-chat/v2/sessions
//      */
//     postVoiceChatV2Sessions: (params: RequestParams = {}) =>
//       this.request<VoiceChatSessionResource, any>({
//         path: `/voice-chat/v2/sessions`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name DeleteVoiceChatV2SessionsById
//      * @request DELETE:/voice-chat/v2/sessions/{id}
//      */
//     deleteVoiceChatV2SessionsById: (id: any, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/voice-chat/v2/sessions/${id}`,
//         method: 'DELETE',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV2SessionsById
//      * @request GET:/voice-chat/v2/sessions/{id}
//      */
//     getVoiceChatV2SessionsById: (id: any, params: RequestParams = {}) =>
//       this.request<VoiceChatSessionResource, any>({
//         path: `/voice-chat/v2/sessions/${id}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name PostVoiceChatV2SessionsById
//      * @request POST:/voice-chat/v2/sessions/{id}
//      */
//     postVoiceChatV2SessionsById: (id: any, params: RequestParams = {}) =>
//       this.request<VoiceChatSessionResource, any>({
//         path: `/voice-chat/v2/sessions/${id}`,
//         method: 'POST',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV2SessionsBySessionIdParticipantsByParticipantId
//      * @request GET:/voice-chat/v2/sessions/{sessionId}/participants/{participantId}
//      */
//     getVoiceChatV2SessionsBySessionIdParticipantsByParticipantId: (
//       sessionId: any,
//       participantId: any,
//       params: RequestParams = {}
//     ) =>
//       this.request<VoiceChatParticipantResource, any>({
//         path: `/voice-chat/v2/sessions/${sessionId}/participants/${participantId}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name PutVoiceChatV2SessionsBySessionIdParticipantsByParticipantId
//      * @request PUT:/voice-chat/v2/sessions/{sessionId}/participants/{participantId}
//      */
//     putVoiceChatV2SessionsBySessionIdParticipantsByParticipantId: (
//       sessionId: any,
//       participantId: any,
//       data: VoiceChatUpdateParticipantResource,
//       params: RequestParams = {}
//     ) =>
//       this.request<void, any>({
//         path: `/voice-chat/v2/sessions/${sessionId}/participants/${participantId}`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV2Settings
//      * @request GET:/voice-chat/v2/settings
//      */
//     getVoiceChatV2Settings: (params: RequestParams = {}) =>
//       this.request<VoiceChatSettingsResource, any>({
//         path: `/voice-chat/v2/settings`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name PutVoiceChatV2Settings
//      * @request PUT:/voice-chat/v2/settings
//      */
//     putVoiceChatV2Settings: (data: VoiceChatUpdateSettingsResource, params: RequestParams = {}) =>
//       this.request<void, any>({
//         path: `/voice-chat/v2/settings`,
//         method: 'PUT',
//         body: data,
//         type: ContentType.Json,
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin voice-chat
//      * @name GetVoiceChatV2State
//      * @request GET:/voice-chat/v2/state
//      */
//     getVoiceChatV2State: (params: RequestParams = {}) =>
//       this.request<VoiceChatStateResource, any>({
//         path: `/voice-chat/v2/state`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       })
//   }
//   plugin = {
//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin Manager, Plugin Asset Serving
//      * @name GetByPluginAssetsByPath
//      * @summary Download a backend asset
//      * @request GET:/{plugin}/assets/{path}
//      */
//     getByPluginAssetsByPath: (plugin: any, path: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/${plugin}/assets/${path}`,
//         method: 'GET',
//         format: 'json',
//         ...params
//       }),

//     /**
//      * No description
//      *
//      * @tags Plugins, Plugin Manager, Plugin Asset Serving
//      * @name HeadByPluginAssetsByPath
//      * @summary Download the header for a backend asset
//      * @request HEAD:/{plugin}/assets/{path}
//      */
//     headByPluginAssetsByPath: (plugin: any, path: any, params: RequestParams = {}) =>
//       this.request<Record<string, any>, any>({
//         path: `/${plugin}/assets/${path}`,
//         method: 'HEAD',
//         format: 'json',
//         ...params
//       })
//   }
// }
